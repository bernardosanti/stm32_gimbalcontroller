
CircularBuffer_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c264  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800c3f8  0800c3f8  0001c3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e4  0800c9e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9e4  0800c9e4  0001c9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9ec  0800c9ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c9ec  0800c9ec  0001c9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c9f4  0800c9f4  0001c9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000680  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000085c  2000085c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f673  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003448  00000000  00000000  0003f87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00042cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b0  00000000  00000000  00043e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025adf  00000000  00000000  00044ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001624e  00000000  00000000  0006a9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deee5  00000000  00000000  00080c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015fb0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007154  00000000  00000000  0015fb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c3dc 	.word	0x0800c3dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c3dc 	.word	0x0800c3dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <_ZN10CircBufferC1Ev>:
 *      Author: bernardosantana
 */

#include "CircBuffer.h"

CircBuffer::CircBuffer()
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <_ZN10CircBufferC1Ev+0x30>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f008 fb5d 	bl	8009624 <memset>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
{

}
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	0800c49c 	.word	0x0800c49c

08000f80 <_ZN10CircBufferD1Ev>:

CircBuffer::~CircBuffer()
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <_ZN10CircBufferD1Ev+0x1c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
{

}
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	0800c49c 	.word	0x0800c49c

08000fa0 <_ZN10CircBufferD0Ev>:
CircBuffer::~CircBuffer()
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
}
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffe9 	bl	8000f80 <_ZN10CircBufferD1Ev>
 8000fae:	f240 410c 	movw	r1, #1036	; 0x40c
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f007 ffde 	bl	8008f74 <_ZdlPvj>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZN10CircBuffer4ReadEPhj>:

void CircBuffer::Read(uint8_t* data, size_t len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
	size_t avaiSize = Available();
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f852 	bl	8001078 <_ZN10CircBuffer9AvailableEv>
 8000fd4:	6138      	str	r0, [r7, #16]
	if(avaiSize < len) len = avaiSize;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d201      	bcs.n	8000fe2 <_ZN10CircBuffer4ReadEPhj+0x20>
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 0; i < len; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	82fb      	strh	r3, [r7, #22]
 8000fe6:	8afb      	ldrh	r3, [r7, #22]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d916      	bls.n	800101c <_ZN10CircBuffer4ReadEPhj+0x5a>
	{
		*(data+i) = buffer[head%MAX_BUFFER_SIZE];
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000ff4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000ff8:	8afb      	ldrh	r3, [r7, #22]
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	440a      	add	r2, r1
 8001002:	7912      	ldrb	r2, [r2, #4]
 8001004:	701a      	strb	r2, [r3, #0]
		head++;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	for(uint16_t i = 0; i < len; i++)
 8001014:	8afb      	ldrh	r3, [r7, #22]
 8001016:	3301      	adds	r3, #1
 8001018:	82fb      	strh	r3, [r7, #22]
 800101a:	e7e4      	b.n	8000fe6 <_ZN10CircBuffer4ReadEPhj+0x24>
	}
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN10CircBuffer5WriteEPhj>:


void CircBuffer::Write(uint8_t* data, size_t len)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	for(uint16_t i = 0; i < len; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	82fb      	strh	r3, [r7, #22]
 8001034:	8afb      	ldrh	r3, [r7, #22]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	d917      	bls.n	800106c <_ZN10CircBuffer5WriteEPhj+0x48>
	{
		buffer[tail%MAX_BUFFER_SIZE] = *(data+i);
 800103c:	8afb      	ldrh	r3, [r7, #22]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	441a      	add	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800104c:	7811      	ldrb	r1, [r2, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	460a      	mov	r2, r1
 8001054:	711a      	strb	r2, [r3, #4]
		tail++;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	for(uint16_t i = 0; i < len; i++)
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	3301      	adds	r3, #1
 8001068:	82fb      	strh	r3, [r7, #22]
 800106a:	e7e3      	b.n	8001034 <_ZN10CircBuffer5WriteEPhj+0x10>
	}
}
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZN10CircBuffer9AvailableEv>:
		*(data+i) = buffer[head%MAX_BUFFER_SIZE];
}


size_t CircBuffer::Available()
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	return tail < head ? (tail+MAX_BUFFER_SIZE - head) : (tail - head);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800108c:	429a      	cmp	r2, r3
 800108e:	d209      	bcs.n	80010a4 <_ZN10CircBuffer9AvailableEv+0x2c>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010a2:	e006      	b.n	80010b2 <_ZN10CircBuffer9AvailableEv+0x3a>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80010b0:	1ad3      	subs	r3, r2, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN7MPU9050C1EhP17I2C_HandleTypeDef>:
 */


#include "MPU9050.h"

MPU9050::MPU9050(uint8_t address, I2C_HandleTypeDef* _hi2c)
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	460b      	mov	r3, r1
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	72fb      	strb	r3, [r7, #11]
{
	_devAddr = address;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	7afa      	ldrb	r2, [r7, #11]
 80010d0:	709a      	strb	r2, [r3, #2]
	devAddr = (uint16_t)(address << 1);
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	809a      	strh	r2, [r3, #4]
	hi2c = _hi2c;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	609a      	str	r2, [r3, #8]
}
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_ZN7MPU90504InitEv>:


int MPU9050::Init()
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b088      	sub	sp, #32
 80010f6:	af04      	add	r7, sp, #16
 80010f8:	6078      	str	r0, [r7, #4]
	uint8_t ret, check, data;

	ret = HAL_I2C_IsDeviceReady(hi2c, devAddr, 5, TIMEOUT);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6898      	ldr	r0, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	8899      	ldrh	r1, [r3, #4]
 8001102:	f242 7310 	movw	r3, #10000	; 0x2710
 8001106:	2205      	movs	r2, #5
 8001108:	f003 f842 	bl	8004190 <HAL_I2C_IsDeviceReady>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <_ZN7MPU90504InitEv+0x28>
		return 0;
 8001116:	2300      	movs	r3, #0
 8001118:	e05d      	b.n	80011d6 <_ZN7MPU90504InitEv+0xe4>

	HAL_I2C_Mem_Read(hi2c, devAddr, RA_WHO_AM_I, 1, &check, 1 , TIMEOUT);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6898      	ldr	r0, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8899      	ldrh	r1, [r3, #4]
 8001122:	f242 7310 	movw	r3, #10000	; 0x2710
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2301      	movs	r3, #1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f107 030e 	add.w	r3, r7, #14
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	2275      	movs	r2, #117	; 0x75
 8001136:	f002 fe05 	bl	8003d44 <HAL_I2C_Mem_Read>

	if(check == 0x68)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	2b68      	cmp	r3, #104	; 0x68
 800113e:	d149      	bne.n	80011d4 <_ZN7MPU90504InitEv+0xe2>
	{
		//Power management register write all 0's to wake up sensor
		data = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(hi2c,devAddr, RA_PWR_MGMT_1, 1, &data, 1, TIMEOUT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6898      	ldr	r0, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	8899      	ldrh	r1, [r3, #4]
 800114c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 030d 	add.w	r3, r7, #13
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	226b      	movs	r2, #107	; 0x6b
 8001160:	f002 fcf6 	bl	8003b50 <HAL_I2C_Mem_Write>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 8001164:	2307      	movs	r3, #7
 8001166:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(hi2c, devAddr, RA_SMPLRT_DIV, 1, &data, 1, TIMEOUT);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	8899      	ldrh	r1, [r3, #4]
 8001170:	f242 7310 	movw	r3, #10000	; 0x2710
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	f107 030d 	add.w	r3, r7, #13
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	2219      	movs	r2, #25
 8001184:	f002 fce4 	bl	8003b50 <HAL_I2C_Mem_Write>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(hi2c, devAddr, RA_ACCEL_CONFIG, 1, &data, 1, TIMEOUT);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6898      	ldr	r0, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	8899      	ldrh	r1, [r3, #4]
 8001194:	f242 7310 	movw	r3, #10000	; 0x2710
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030d 	add.w	r3, r7, #13
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	221c      	movs	r2, #28
 80011a8:	f002 fcd2 	bl	8003b50 <HAL_I2C_Mem_Write>

		data = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(hi2c, devAddr, RA_GYRO_CONFIG, 1, &data, 1, TIMEOUT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6898      	ldr	r0, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	8899      	ldrh	r1, [r3, #4]
 80011b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2301      	movs	r3, #1
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	f107 030d 	add.w	r3, r7, #13
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	221b      	movs	r2, #27
 80011cc:	f002 fcc0 	bl	8003b50 <HAL_I2C_Mem_Write>
	else
	{
		return 0;
	}

	return 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <_ZN7MPU90504InitEv+0xe4>
		return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <_ZN7MPU90509ReadAccelERfS0_S0_>:


int MPU9050::ReadAccel(float &Ax, float &Ay, float &Az)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
	uint8_t buf[6];
	uint16_t ax, ay, az = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	83fb      	strh	r3, [r7, #30]

	if(HAL_I2C_Mem_Read(hi2c, devAddr, RA_ACCEL_XOUT_H, 1, buf, 6, TIMEOUT) != HAL_OK)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6898      	ldr	r0, [r3, #8]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8899      	ldrh	r1, [r3, #4]
 80011fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2306      	movs	r3, #6
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	223b      	movs	r2, #59	; 0x3b
 800120e:	f002 fd99 	bl	8003d44 <HAL_I2C_Mem_Read>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	bf14      	ite	ne
 8001218:	2301      	movne	r3, #1
 800121a:	2300      	moveq	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <_ZN7MPU90509ReadAccelERfS0_S0_+0x52>
	{
		I2CErrorCounter++;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	b29a      	uxth	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	801a      	strh	r2, [r3, #0]
		return 0;
 800122e:	2300      	movs	r3, #0
 8001230:	e057      	b.n	80012e2 <_ZN7MPU90509ReadAccelERfS0_S0_+0x102>
	}

	//Adding 2 BYTES into 16 bit integer
	ax = (int16_t)(buf[0] << 8 | buf [1]);
 8001232:	7d3b      	ldrb	r3, [r7, #20]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b21a      	sxth	r2, r3
 8001238:	7d7b      	ldrb	r3, [r7, #21]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21b      	sxth	r3, r3
 8001240:	83bb      	strh	r3, [r7, #28]
	ay = (int16_t)(buf[2] << 8 | buf [3]);
 8001242:	7dbb      	ldrb	r3, [r7, #22]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	837b      	strh	r3, [r7, #26]
	az = (int16_t)(buf[4] << 8 | buf [5]);
 8001252:	7e3b      	ldrb	r3, [r7, #24]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7e7b      	ldrb	r3, [r7, #25]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
 8001260:	83fb      	strh	r3, [r7, #30]

	Ax = ax*100/16384.0;
 8001262:	8bbb      	ldrh	r3, [r7, #28]
 8001264:	2264      	movs	r2, #100	; 0x64
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f95a 	bl	8000524 <__aeabi_i2d>
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <_ZN7MPU90509ReadAccelERfS0_S0_+0x10c>)
 8001276:	f7ff fae9 	bl	800084c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fc91 	bl	8000ba8 <__aeabi_d2f>
 8001286:	4602      	mov	r2, r0
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	601a      	str	r2, [r3, #0]
	Ay = ay*100/16384.0;
 800128c:	8b7b      	ldrh	r3, [r7, #26]
 800128e:	2264      	movs	r2, #100	; 0x64
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f945 	bl	8000524 <__aeabi_i2d>
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_ZN7MPU90509ReadAccelERfS0_S0_+0x10c>)
 80012a0:	f7ff fad4 	bl	800084c <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fc7c 	bl	8000ba8 <__aeabi_d2f>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
	Az = az*100/16384.0;
 80012b6:	8bfb      	ldrh	r3, [r7, #30]
 80012b8:	2264      	movs	r2, #100	; 0x64
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f930 	bl	8000524 <__aeabi_i2d>
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_ZN7MPU90509ReadAccelERfS0_S0_+0x10c>)
 80012ca:	f7ff fabf 	bl	800084c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc67 	bl	8000ba8 <__aeabi_d2f>
 80012da:	4602      	mov	r2, r0
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	601a      	str	r2, [r3, #0]

	return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40d00000 	.word	0x40d00000

080012f0 <_ZNSt7__cxx119to_stringEf>:
#if _GLIBCXX_USE_C99_STDIO
  // NB: (v)snprintf vs sprintf.

  inline string
  to_string(float __val)
  {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	ed87 0a00 	vstr	s0, [r7]
    const int __n = 
 80012fc:	233a      	movs	r3, #58	; 0x3a
 80012fe:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8001300:	6838      	ldr	r0, [r7, #0]
 8001302:	f7ff f921 	bl	8000548 <__aeabi_f2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	e9cd 2300 	strd	r2, r3, [sp]
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <_ZNSt7__cxx119to_stringEf+0x34>)
 8001312:	223a      	movs	r2, #58	; 0x3a
 8001314:	4904      	ldr	r1, [pc, #16]	; (8001328 <_ZNSt7__cxx119to_stringEf+0x38>)
 8001316:	f000 fd96 	bl	8001e46 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800c3f8 	.word	0x0800c3f8
 8001328:	0800a1c9 	.word	0x0800a1c9

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b0dd      	sub	sp, #372	; 0x174
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001332:	f001 fb41 	bl	80029b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001336:	f000 fa99 	bl	800186c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133a:	f000 fcf5 	bl	8001d28 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800133e:	f000 fc9d 	bl	8001c7c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001342:	f000 fcc3 	bl	8001ccc <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001346:	f000 fb05 	bl	8001954 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 800134a:	f000 fb37 	bl	80019bc <_ZL12MX_TIM1_Initv>
  MX_TIM6_Init();
 800134e:	f000 fc15 	bl	8001b7c <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8001352:	f000 fc53 	bl	8001bfc <_ZL12MX_TIM7_Initv>

  /* USER CODE BEGIN 2 */
  uart2.AssignUart(&huart2);
 8001356:	49d7      	ldr	r1, [pc, #860]	; (80016b4 <main+0x388>)
 8001358:	48d7      	ldr	r0, [pc, #860]	; (80016b8 <main+0x38c>)
 800135a:	f000 ffa4 	bl	80022a6 <_ZN10serialPort10AssignUartEP20__UART_HandleTypeDef>

  HAL_Delay(1000);
 800135e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001362:	f001 fb9b 	bl	8002a9c <HAL_Delay>
  MPU9050 imu(0x68, &hi2c1);
 8001366:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800136a:	4ad4      	ldr	r2, [pc, #848]	; (80016bc <main+0x390>)
 800136c:	2168      	movs	r1, #104	; 0x68
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fea5 	bl	80010be <_ZN7MPU9050C1EhP17I2C_HandleTypeDef>

  if(imu.Init() != 1)
 8001374:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff feba 	bl	80010f2 <_ZN7MPU90504InitEv>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d028      	beq.n	80013e0 <main+0xb4>
  {
	  std::string error_msg("IMU init error.\n");
 800138e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001392:	4618      	mov	r0, r3
 8001394:	f007 fdf0 	bl	8008f78 <_ZNSaIcEC1Ev>
 8001398:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800139c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013a0:	49c7      	ldr	r1, [pc, #796]	; (80016c0 <main+0x394>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f008 f8a4 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013ac:	4618      	mov	r0, r3
 80013ae:	f007 fde4 	bl	8008f7a <_ZNSaIcED1Ev>
	  uart2.Send((uint8_t*) error_msg.c_str(), error_msg.size());
 80013b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013b6:	4618      	mov	r0, r3
 80013b8:	f008 f870 	bl	800949c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80013bc:	4604      	mov	r4, r0
 80013be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 ff72 	bl	80092ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4621      	mov	r1, r4
 80013ce:	48ba      	ldr	r0, [pc, #744]	; (80016b8 <main+0x38c>)
 80013d0:	f000 ff9d 	bl	800230e <_ZN10serialPort4SendEPhj>
	  std::string error_msg("IMU init error.\n");
 80013d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d8:	4618      	mov	r0, r3
 80013da:	f007 ff61 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013de:	e027      	b.n	8001430 <main+0x104>
  }
  else
  {
	  std::string succeed_msg("IMU init succeeded.");
 80013e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013e4:	4618      	mov	r0, r3
 80013e6:	f007 fdc7 	bl	8008f78 <_ZNSaIcEC1Ev>
 80013ea:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80013ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013f2:	49b4      	ldr	r1, [pc, #720]	; (80016c4 <main+0x398>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f008 f87b 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 fdbb 	bl	8008f7a <_ZNSaIcED1Ev>
	  uart2.Send((uint8_t*) succeed_msg.c_str(), succeed_msg.size());
 8001404:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001408:	4618      	mov	r0, r3
 800140a:	f008 f847 	bl	800949c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800140e:	4604      	mov	r4, r0
 8001410:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001414:	4618      	mov	r0, r3
 8001416:	f007 ff49 	bl	80092ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4621      	mov	r1, r4
 8001420:	48a5      	ldr	r0, [pc, #660]	; (80016b8 <main+0x38c>)
 8001422:	f000 ff74 	bl	800230e <_ZN10serialPort4SendEPhj>
	  std::string succeed_msg("IMU init succeeded.");
 8001426:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800142a:	4618      	mov	r0, r3
 800142c:	f007 ff38 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
          }
      }
      HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000); */


  uint32_t prevTime = HAL_GetTick();
 8001430:	f001 fb28 	bl	8002a84 <HAL_GetTick>
 8001434:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  uint32_t prevTime_imu = HAL_GetTick();
 8001438:	f001 fb24 	bl	8002a84 <HAL_GetTick>
 800143c:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(uart2.Available())
 8001440:	489d      	ldr	r0, [pc, #628]	; (80016b8 <main+0x38c>)
 8001442:	f000 ff76 	bl	8002332 <_ZN10serialPort9AvailableEv>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d017      	beq.n	8001486 <main+0x15a>
	  {
		  uint8_t buffer_out = 0;
 8001456:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800145a:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
		  uart2.Read(&buffer_out, 1);
 8001462:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8001466:	2201      	movs	r2, #1
 8001468:	4619      	mov	r1, r3
 800146a:	4893      	ldr	r0, [pc, #588]	; (80016b8 <main+0x38c>)
 800146c:	f000 ff3e 	bl	80022ec <_ZN10serialPort4ReadEPhj>
		  uart2.Send(&buffer_out, 1);
 8001470:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8001474:	2201      	movs	r2, #1
 8001476:	4619      	mov	r1, r3
 8001478:	488f      	ldr	r0, [pc, #572]	; (80016b8 <main+0x38c>)
 800147a:	f000 ff48 	bl	800230e <_ZN10serialPort4SendEPhj>
		  HAL_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f001 fb0c 	bl	8002a9c <HAL_Delay>
	  while(uart2.Available())
 8001484:	e7dc      	b.n	8001440 <main+0x114>
	  }

	  if(HAL_GetTick() - prevTime > 5000)
 8001486:	f001 fafd 	bl	8002a84 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	bf8c      	ite	hi
 800149a:	2301      	movhi	r3, #1
 800149c:	2300      	movls	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d02b      	beq.n	80014fc <main+0x1d0>
	  {
		  std::string periodic_msg = "This is a periodic 5s message.\n";
 80014a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 fd65 	bl	8008f78 <_ZNSaIcEC1Ev>
 80014ae:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80014b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b6:	4984      	ldr	r1, [pc, #528]	; (80016c8 <main+0x39c>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f008 f819 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80014be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f007 fd59 	bl	8008f7a <_ZNSaIcED1Ev>
		  uart2.Send((uint8_t*)periodic_msg.c_str(), periodic_msg.size());
 80014c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014cc:	4618      	mov	r0, r3
 80014ce:	f007 ffe5 	bl	800949c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80014d2:	4604      	mov	r4, r0
 80014d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d8:	4618      	mov	r0, r3
 80014da:	f007 fee7 	bl	80092ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4621      	mov	r1, r4
 80014e4:	4874      	ldr	r0, [pc, #464]	; (80016b8 <main+0x38c>)
 80014e6:	f000 ff12 	bl	800230e <_ZN10serialPort4SendEPhj>
		  prevTime = HAL_GetTick();
 80014ea:	f001 facb 	bl	8002a84 <HAL_GetTick>
 80014ee:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
		  std::string periodic_msg = "This is a periodic 5s message.\n";
 80014f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f6:	4618      	mov	r0, r3
 80014f8:	f007 fed2 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  }

	  if(HAL_GetTick() - prevTime_imu > 1000)
 80014fc:	f001 fac2 	bl	8002a84 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800150c:	bf8c      	ite	hi
 800150e:	2301      	movhi	r3, #1
 8001510:	2300      	movls	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d093      	beq.n	8001440 <main+0x114>
	  {
		  std::string periodic_acc_msg = "IMU data.\n";
 8001518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800151c:	4618      	mov	r0, r3
 800151e:	f007 fd2b 	bl	8008f78 <_ZNSaIcEC1Ev>
 8001522:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152a:	4968      	ldr	r1, [pc, #416]	; (80016cc <main+0x3a0>)
 800152c:	4618      	mov	r0, r3
 800152e:	f007 ffdf 	bl	80094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001536:	4618      	mov	r0, r3
 8001538:	f007 fd1f 	bl	8008f7a <_ZNSaIcED1Ev>
		  uart2.Send((uint8_t*)periodic_acc_msg.c_str(), periodic_acc_msg.size());
 800153c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001540:	4618      	mov	r0, r3
 8001542:	f007 ffab 	bl	800949c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001546:	4604      	mov	r4, r0
 8001548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154c:	4618      	mov	r0, r3
 800154e:	f007 fead 	bl	80092ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4621      	mov	r1, r4
 8001558:	4857      	ldr	r0, [pc, #348]	; (80016b8 <main+0x38c>)
 800155a:	f000 fed8 	bl	800230e <_ZN10serialPort4SendEPhj>

		  float Ax, Ay, Az;
		  imu.ReadAccel(Ax, Ay, Az);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	f107 0220 	add.w	r2, r7, #32
 8001566:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800156a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800156e:	f7ff fe37 	bl	80011e0 <_ZN7MPU90509ReadAccelERfS0_S0_>
		  std::string acc_msg = "X " + std::to_string(Ax) + " | Y " + std::to_string(Ay) + " | Az " + std::to_string(Az) + "\n";
 8001572:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001576:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff feb2 	bl	80012f0 <_ZNSt7__cxx119to_stringEf>
 800158c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001590:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001594:	494e      	ldr	r1, [pc, #312]	; (80016d0 <main+0x3a4>)
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fc8c 	bl	8001eb4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800159c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015a0:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80015a4:	4a4b      	ldr	r2, [pc, #300]	; (80016d4 <main+0x3a8>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fc9c 	bl	8001ee4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80015ac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80015b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fe95 	bl	80012f0 <_ZNSt7__cxx119to_stringEf>
 80015c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015ca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80015ce:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fca8 	bl	8001f28 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 80015d8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015dc:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80015e0:	4a3d      	ldr	r2, [pc, #244]	; (80016d8 <main+0x3ac>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fc7e 	bl	8001ee4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80015e8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80015ec:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80015f8:	eeb0 0a67 	vmov.f32	s0, s15
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fe77 	bl	80012f0 <_ZNSt7__cxx119to_stringEf>
 8001602:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001606:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800160a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fc8a 	bl	8001f28 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001614:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001618:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800161c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001620:	4a2e      	ldr	r2, [pc, #184]	; (80016dc <main+0x3b0>)
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fc5e 	bl	8001ee4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001628:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800162c:	4618      	mov	r0, r3
 800162e:	f007 fe37 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001632:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001636:	4618      	mov	r0, r3
 8001638:	f007 fe32 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800163c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001640:	4618      	mov	r0, r3
 8001642:	f007 fe2d 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001646:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fe28 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001650:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001654:	4618      	mov	r0, r3
 8001656:	f007 fe23 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800165a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800165e:	4618      	mov	r0, r3
 8001660:	f007 fe1e 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001668:	4618      	mov	r0, r3
 800166a:	f007 fe19 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800166e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001672:	4618      	mov	r0, r3
 8001674:	f007 fe14 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  uart2.Send((uint8_t*)acc_msg.c_str(), acc_msg.size());
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f007 ff0e 	bl	800949c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001680:	4604      	mov	r4, r0
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4618      	mov	r0, r3
 8001686:	f007 fe11 	bl	80092ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4621      	mov	r1, r4
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <main+0x38c>)
 8001692:	f000 fe3c 	bl	800230e <_ZN10serialPort4SendEPhj>
		  prevTime_imu = HAL_GetTick();
 8001696:	f001 f9f5 	bl	8002a84 <HAL_GetTick>
 800169a:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
		  std::string acc_msg = "X " + std::to_string(Ax) + " | Y " + std::to_string(Ay) + " | Az " + std::to_string(Az) + "\n";
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4618      	mov	r0, r3
 80016a2:	f007 fdfd 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  std::string periodic_acc_msg = "IMU data.\n";
 80016a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016aa:	4618      	mov	r0, r3
 80016ac:	f007 fdf8 	bl	80092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  }
  }
 80016b0:	e6c6      	b.n	8001440 <main+0x114>
 80016b2:	bf00      	nop
 80016b4:	20000324 	.word	0x20000324
 80016b8:	20000428 	.word	0x20000428
 80016bc:	200001f8 	.word	0x200001f8
 80016c0:	0800c3fc 	.word	0x0800c3fc
 80016c4:	0800c410 	.word	0x0800c410
 80016c8:	0800c424 	.word	0x0800c424
 80016cc:	0800c444 	.word	0x0800c444
 80016d0:	0800c450 	.word	0x0800c450
 80016d4:	0800c454 	.word	0x0800c454
 80016d8:	0800c45c 	.word	0x0800c45c
 80016dc:	0800c464 	.word	0x0800c464

080016e0 <HAL_UART_RxHalfCpltCallback>:
}

// CALLBACKS //

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <HAL_UART_RxHalfCpltCallback+0x24>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d104      	bne.n	80016fc <HAL_UART_RxHalfCpltCallback+0x1c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80016f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f6:	4804      	ldr	r0, [pc, #16]	; (8001708 <HAL_UART_RxHalfCpltCallback+0x28>)
 80016f8:	f002 f8cb 	bl	8003892 <HAL_GPIO_TogglePin>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40004400 	.word	0x40004400
 8001708:	40020c00 	.word	0x40020c00

0800170c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_UART_RxCpltCallback+0x2c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d107      	bne.n	800172e <HAL_UART_RxCpltCallback+0x22>
	{
		uart2.Receive();
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <HAL_UART_RxCpltCallback+0x30>)
 8001720:	f000 fdd0 	bl	80022c4 <_ZN10serialPort7ReceiveEv>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_UART_RxCpltCallback+0x34>)
 800172a:	f002 f8b2 	bl	8003892 <HAL_GPIO_TogglePin>
	}
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	20000428 	.word	0x20000428
 8001740:	40020c00 	.word	0x40020c00

08001744 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <HAL_UART_TxHalfCpltCallback+0x24>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d104      	bne.n	8001760 <HAL_UART_TxHalfCpltCallback+0x1c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	4804      	ldr	r0, [pc, #16]	; (800176c <HAL_UART_TxHalfCpltCallback+0x28>)
 800175c:	f002 f899 	bl	8003892 <HAL_GPIO_TogglePin>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40004400 	.word	0x40004400
 800176c:	40020c00 	.word	0x40020c00

08001770 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <HAL_UART_TxCpltCallback+0x24>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d104      	bne.n	800178c <HAL_UART_TxCpltCallback+0x1c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <HAL_UART_TxCpltCallback+0x28>)
 8001788:	f002 f883 	bl	8003892 <HAL_GPIO_TogglePin>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40004400 	.word	0x40004400
 8001798:	40020c00 	.word	0x40020c00

0800179c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	// From which slave
	switch(hi2c->Devaddress)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	3b40      	subs	r3, #64	; 0x40
 80017aa:	2b29      	cmp	r3, #41	; 0x29
 80017ac:	d856      	bhi.n	800185c <HAL_I2C_MasterRxCpltCallback+0xc0>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <HAL_I2C_MasterRxCpltCallback+0x18>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	0800185d 	.word	0x0800185d
 80017b8:	0800185d 	.word	0x0800185d
 80017bc:	0800185d 	.word	0x0800185d
 80017c0:	0800185d 	.word	0x0800185d
 80017c4:	0800185d 	.word	0x0800185d
 80017c8:	0800185d 	.word	0x0800185d
 80017cc:	0800185d 	.word	0x0800185d
 80017d0:	0800185d 	.word	0x0800185d
 80017d4:	0800185d 	.word	0x0800185d
 80017d8:	0800185d 	.word	0x0800185d
 80017dc:	0800185d 	.word	0x0800185d
 80017e0:	0800185d 	.word	0x0800185d
 80017e4:	0800185d 	.word	0x0800185d
 80017e8:	0800185d 	.word	0x0800185d
 80017ec:	0800185d 	.word	0x0800185d
 80017f0:	0800185d 	.word	0x0800185d
 80017f4:	0800185d 	.word	0x0800185d
 80017f8:	0800185d 	.word	0x0800185d
 80017fc:	0800185d 	.word	0x0800185d
 8001800:	0800185d 	.word	0x0800185d
 8001804:	0800185d 	.word	0x0800185d
 8001808:	0800185d 	.word	0x0800185d
 800180c:	0800185d 	.word	0x0800185d
 8001810:	0800185d 	.word	0x0800185d
 8001814:	0800185d 	.word	0x0800185d
 8001818:	0800185d 	.word	0x0800185d
 800181c:	0800185d 	.word	0x0800185d
 8001820:	0800185d 	.word	0x0800185d
 8001824:	0800185d 	.word	0x0800185d
 8001828:	0800185d 	.word	0x0800185d
 800182c:	0800185d 	.word	0x0800185d
 8001830:	0800185d 	.word	0x0800185d
 8001834:	0800185d 	.word	0x0800185d
 8001838:	0800185d 	.word	0x0800185d
 800183c:	0800185d 	.word	0x0800185d
 8001840:	0800185d 	.word	0x0800185d
 8001844:	0800185d 	.word	0x0800185d
 8001848:	0800185d 	.word	0x0800185d
 800184c:	0800185d 	.word	0x0800185d
 8001850:	0800185d 	.word	0x0800185d
 8001854:	0800185d 	.word	0x0800185d
 8001858:	0800185d 	.word	0x0800185d
		case 0x69:
			//do frame imu
			break;
		default:
			//not implemented
			break;
 800185c:	bf00      	nop
	}
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b094      	sub	sp, #80	; 0x50
 8001870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	2230      	movs	r2, #48	; 0x30
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f007 fed2 	bl	8009624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <_Z18SystemClock_Configv+0xe0>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	4a2c      	ldr	r2, [pc, #176]	; (800194c <_Z18SystemClock_Configv+0xe0>)
 800189a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189e:	6413      	str	r3, [r2, #64]	; 0x40
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <_Z18SystemClock_Configv+0xe0>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <_Z18SystemClock_Configv+0xe4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a26      	ldr	r2, [pc, #152]	; (8001950 <_Z18SystemClock_Configv+0xe4>)
 80018b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <_Z18SystemClock_Configv+0xe4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d2:	2302      	movs	r3, #2
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018dc:	2308      	movs	r3, #8
 80018de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e6:	2302      	movs	r3, #2
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018ea:	2307      	movs	r3, #7
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 fda6 	bl	8006444 <HAL_RCC_OscConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8001908:	f000 fa98 	bl	8001e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190c:	230f      	movs	r3, #15
 800190e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001910:	2302      	movs	r3, #2
 8001912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800191c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2105      	movs	r1, #5
 800192a:	4618      	mov	r0, r3
 800192c:	f005 f802 	bl	8006934 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001940:	f000 fa7c 	bl	8001e3c <Error_Handler>
  }
}
 8001944:	bf00      	nop
 8001946:	3750      	adds	r7, #80	; 0x50
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000

08001954 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <_ZL12MX_I2C1_Initv+0x60>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001960:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <_ZL12MX_I2C1_Initv+0x64>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001992:	f001 ff99 	bl	80038c8 <HAL_I2C_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80019a6:	f000 fa49 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200001f8 	.word	0x200001f8
 80019b4:	40005400 	.word	0x40005400
 80019b8:	000186a0 	.word	0x000186a0

080019bc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b096      	sub	sp, #88	; 0x58
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2220      	movs	r2, #32
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f007 fe15 	bl	8009624 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019fa:	4b5e      	ldr	r3, [pc, #376]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 80019fc:	4a5e      	ldr	r2, [pc, #376]	; (8001b78 <_ZL12MX_TIM1_Initv+0x1bc>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a00:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7637-1;
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a0e:	f641 52d4 	movw	r2, #7636	; 0x1dd4
 8001a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a26:	4853      	ldr	r0, [pc, #332]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a28:	f005 f9a4 	bl	8006d74 <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001a3c:	f000 f9fe 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4849      	ldr	r0, [pc, #292]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a4e:	f005 fc03 	bl	8007258 <HAL_TIM_ConfigClockSource>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8001a62:	f000 f9eb 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a66:	4843      	ldr	r0, [pc, #268]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a68:	f005 f9d3 	bl	8006e12 <HAL_TIM_PWM_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001a7c:	f000 f9de 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4839      	ldr	r0, [pc, #228]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001a90:	f005 ffc6 	bl	8007a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8001aa4:	f000 f9ca 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa8:	2360      	movs	r3, #96	; 0x60
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4829      	ldr	r0, [pc, #164]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001ace:	f005 fb01 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8001ae2:	f000 f9ab 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	2204      	movs	r2, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4821      	ldr	r0, [pc, #132]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001af0:	f005 faf0 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf14      	ite	ne
 8001afa:	2301      	movne	r3, #1
 8001afc:	2300      	moveq	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8001b04:	f000 f99a 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4818      	ldr	r0, [pc, #96]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001b12:	f005 fadf 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8001b26:	f000 f989 	bl	8001e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4809      	ldr	r0, [pc, #36]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001b4e:	f005 ffe3 	bl	8007b18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZL12MX_TIM1_Initv+0x1aa>
  {
    Error_Handler();
 8001b62:	f000 f96b 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b66:	4803      	ldr	r0, [pc, #12]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001b68:	f000 fce6 	bl	8002538 <HAL_TIM_MspPostInit>

}
 8001b6c:	bf00      	nop
 8001b6e:	3758      	adds	r7, #88	; 0x58
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2000024c 	.word	0x2000024c
 8001b78:	40010000 	.word	0x40010000

08001b7c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <_ZL12MX_TIM6_Initv+0x78>)
 8001b8c:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <_ZL12MX_TIM6_Initv+0x7c>)
 8001b8e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3;
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <_ZL12MX_TIM6_Initv+0x78>)
 8001b92:	2203      	movs	r2, #3
 8001b94:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <_ZL12MX_TIM6_Initv+0x78>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 56000;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_ZL12MX_TIM6_Initv+0x78>)
 8001b9e:	f64d 22c0 	movw	r2, #56000	; 0xdac0
 8001ba2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <_ZL12MX_TIM6_Initv+0x78>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <_ZL12MX_TIM6_Initv+0x78>)
 8001bac:	f005 f8e2 	bl	8006d74 <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8001bc0:	f000 f93c 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4808      	ldr	r0, [pc, #32]	; (8001bf4 <_ZL12MX_TIM6_Initv+0x78>)
 8001bd2:	f005 ff25 	bl	8007a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8001be6:	f000 f929 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000294 	.word	0x20000294
 8001bf8:	40001000 	.word	0x40001000

08001bfc <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <_ZL12MX_TIM7_Initv+0x78>)
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <_ZL12MX_TIM7_Initv+0x7c>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 26;
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <_ZL12MX_TIM7_Initv+0x78>)
 8001c12:	221a      	movs	r2, #26
 8001c14:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <_ZL12MX_TIM7_Initv+0x78>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <_ZL12MX_TIM7_Initv+0x78>)
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <_ZL12MX_TIM7_Initv+0x78>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c2a:	4812      	ldr	r0, [pc, #72]	; (8001c74 <_ZL12MX_TIM7_Initv+0x78>)
 8001c2c:	f005 f8a2 	bl	8006d74 <HAL_TIM_Base_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8001c40:	f000 f8fc 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4808      	ldr	r0, [pc, #32]	; (8001c74 <_ZL12MX_TIM7_Initv+0x78>)
 8001c52:	f005 fee5 	bl	8007a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8001c66:	f000 f8e9 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200002dc 	.word	0x200002dc
 8001c78:	40001400 	.word	0x40001400

08001c7c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <_ZL11MX_DMA_Initv+0x4c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <_ZL11MX_DMA_Initv+0x4c>)
 8001c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <_ZL11MX_DMA_Initv+0x4c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream5_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2010      	movs	r0, #16
 8001ca4:	f000 fff9 	bl	8002c9a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ca8:	2010      	movs	r0, #16
 8001caa:	f001 f812 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Stream6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2011      	movs	r0, #17
 8001cb4:	f000 fff1 	bl	8002c9a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001cb8:	2011      	movs	r0, #17
 8001cba:	f001 f80a 	bl	8002cd2 <HAL_NVIC_EnableIRQ>

}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d04:	f005 ff6e 	bl	8007be4 <HAL_UART_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf14      	ite	ne
 8001d0e:	2301      	movne	r3, #1
 8001d10:	2300      	moveq	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001d18:	f000 f890 	bl	8001e3c <Error_Handler>

  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000324 	.word	0x20000324
 8001d24:	40004400 	.word	0x40004400

08001d28 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_ZL12MX_GPIO_Initv+0x108>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001dec:	4811      	ldr	r0, [pc, #68]	; (8001e34 <_ZL12MX_GPIO_Initv+0x10c>)
 8001dee:	f001 fd37 	bl	8003860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001df2:	2304      	movs	r3, #4
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <_ZL12MX_GPIO_Initv+0x110>)
 8001e06:	f001 fb8f 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin PD13 LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin;
 8001e0a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	4619      	mov	r1, r3
 8001e22:	4804      	ldr	r0, [pc, #16]	; (8001e34 <_ZL12MX_GPIO_Initv+0x10c>)
 8001e24:	f001 fb80 	bl	8003528 <HAL_GPIO_Init>

}
 8001e28:	bf00      	nop
 8001e2a:	3730      	adds	r7, #48	; 0x30
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40020400 	.word	0x40020400

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>

08001e46 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8001e46:	b408      	push	{r3}
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3307      	adds	r3, #7
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	ebad 0d03 	sub.w	sp, sp, r3
 8001e60:	466b      	mov	r3, sp
 8001e62:	3307      	adds	r3, #7
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8001e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e6e:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001e70:	68bc      	ldr	r4, [r7, #8]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	69f8      	ldr	r0, [r7, #28]
 8001e7a:	47a0      	blx	r4
 8001e7c:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	18d4      	adds	r4, r2, r3
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f007 f875 	bl	8008f78 <_ZNSaIcEC1Ev>
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4622      	mov	r2, r4
 8001e94:	69f9      	ldr	r1, [r7, #28]
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f8c1 	bl	800201e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f007 f86a 	bl	8008f7a <_ZNSaIcED1Ev>
    }
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001eb0:	b001      	add	sp, #4
 8001eb2:	4770      	bx	lr

08001eb4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f007 fa9b 	bl	8009400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f8c1 	bl	8002054 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f007 f9c8 	bl	800926c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f007 fabc 	bl	8009470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f8aa 	bl	8002054 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4619      	mov	r1, r3
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f007 f9b1 	bl	800926c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b08b      	sub	sp, #44	; 0x2c
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ffe7 	bl	8001f12 <_ZNKSt17integral_constantIbLb1EEcvbEv>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f50:	e024      	b.n	8001f9c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 8001f52:	f107 0318 	add.w	r3, r7, #24
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f007 faa1 	bl	80094a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 fa9b 	bl	80094a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8001f6a:	f107 021c 	add.w	r2, r7, #28
 8001f6e:	f107 0318 	add.w	r3, r7, #24
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f878 	bl	800206a <_ZSteqRKSaIcES1_>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461c      	mov	r4, r3
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4618      	mov	r0, r3
 8001f84:	f006 fff9 	bl	8008f7a <_ZNSaIcED1Ev>
 8001f88:	f107 0318 	add.w	r3, r7, #24
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f006 fff4 	bl	8008f7a <_ZNSaIcED1Ev>
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d002      	beq.n	8001f9c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 8001f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02b      	beq.n	8001ffc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 8001fa4:	68b8      	ldr	r0, [r7, #8]
 8001fa6:	f007 f981 	bl	80092ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001faa:	4604      	mov	r4, r0
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f007 f97d 	bl	80092ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4423      	add	r3, r4
 8001fb6:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 8001fb8:	68b8      	ldr	r0, [r7, #8]
 8001fba:	f007 f979 	bl	80092b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d908      	bls.n	8001fd8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f007 f972 	bl	80092b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d801      	bhi.n	8001fd8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00e      	beq.n	8001ffc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f007 fa02 	bl	80093ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f832 	bl	8002054 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f007 f939 	bl	800926c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001ffa:	e00c      	b.n	8002016 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68b8      	ldr	r0, [r7, #8]
 8002000:	f007 fa30 	bl	8009464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8002004:	4603      	mov	r3, r0
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f824 	bl	8002054 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800200c:	4603      	mov	r3, r0
 800200e:	4619      	mov	r1, r3
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f007 f92b 	bl	800926c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	372c      	adds	r7, #44	; 0x2c
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}

0800201e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800201e:	b590      	push	{r4, r7, lr}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800202c:	68fc      	ldr	r4, [r7, #12]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f007 f865 	bl	80090fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002034:	4603      	mov	r3, r0
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	4620      	mov	r0, r4
 800203c:	f007 fa31 	bl	80094a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f81c 	bl	8002082 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}

08002054 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_ZSteqRKSaIcES1_>:
	  __allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
      { return true; }
 8002074:	2301      	movs	r3, #1
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f804 	bl	80020a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80020ae:	4623      	mov	r3, r4
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f805 	bl	80020c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}
	...

080020c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80020d2:	68b8      	ldr	r0, [r7, #8]
 80020d4:	f000 f83e 	bl	8002154 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d001      	beq.n	80020ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80020f0:	4817      	ldr	r0, [pc, #92]	; (8002150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80020f2:	f006 ff46 	bl	8008f82 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	f000 f83b 	bl	8002174 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80020fe:	4603      	mov	r3, r0
 8002100:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d910      	bls.n	800212a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f006 fffd 	bl	8009110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002116:	4603      	mov	r3, r0
 8002118:	4619      	mov	r1, r3
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f006 ffeb 	bl	80090f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	4619      	mov	r1, r3
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f006 ffec 	bl	8009102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f006 ffe5 	bl	80090fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002130:	4603      	mov	r3, r0
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	4618      	mov	r0, r3
 8002138:	f007 f852 	bl	80091e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4619      	mov	r1, r3
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f006 ffe0 	bl	8009106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	0800c468 	.word	0x0800c468

08002154 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800217e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f80a 	bl	800219c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8002188:	462a      	mov	r2, r5
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	4620      	mov	r0, r4
 800218e:	f000 f810 	bl	80021b2 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8002192:	4603      	mov	r3, r0
    }
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bdb0      	pop	{r4, r5, r7, pc}

0800219c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80021a4:	bf00      	nop
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
    }
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d107      	bne.n	80021f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d102      	bne.n	80021f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
serialPort uart2;
 80021ea:	4809      	ldr	r0, [pc, #36]	; (8002210 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80021ec:	f000 f822 	bl	8002234 <_ZN10serialPortC1Ev>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d107      	bne.n	8002206 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d102      	bne.n	8002206 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002202:	f000 f82b 	bl	800225c <_ZN10serialPortD1Ev>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000428 	.word	0x20000428

08002214 <_GLOBAL__sub_I_hi2c1>:
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
 8002218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800221c:	2001      	movs	r0, #1
 800221e:	f7ff ffd7 	bl	80021d0 <_Z41__static_initialization_and_destruction_0ii>
 8002222:	bd80      	pop	{r7, pc}

08002224 <_GLOBAL__sub_D_hi2c1>:
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
 8002228:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff ffcf 	bl	80021d0 <_Z41__static_initialization_and_destruction_0ii>
 8002232:	bd80      	pop	{r7, pc}

08002234 <_ZN10serialPortC1Ev>:
 */

#include <serialPort.h>


serialPort::serialPort()
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <_ZN10serialPortC1Ev+0x24>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	330c      	adds	r3, #12
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fe80 	bl	8000f4c <_ZN10CircBufferC1Ev>
{
	//empty
}
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	0800c4ac 	.word	0x0800c4ac

0800225c <_ZN10serialPortD1Ev>:
serialPort::serialPort(UART_HandleTypeDef* _uart) {
	this->uart = _uart;
	enableRxIT();
}

serialPort::~serialPort() {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	4a06      	ldr	r2, [pc, #24]	; (8002280 <_ZN10serialPortD1Ev+0x24>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	330c      	adds	r3, #12
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fe86 	bl	8000f80 <_ZN10CircBufferD1Ev>
	// TODO Auto-generated destructor stub
}
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	0800c4ac 	.word	0x0800c4ac

08002284 <_ZN10serialPortD0Ev>:
serialPort::~serialPort() {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
}
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe5 	bl	800225c <_ZN10serialPortD1Ev>
 8002292:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f006 fe6c 	bl	8008f74 <_ZdlPvj>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_ZN10serialPort10AssignUartEP20__UART_HandleTypeDef>:


void serialPort::AssignUart(UART_HandleTypeDef* _uart)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
	this->uart = _uart;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	605a      	str	r2, [r3, #4]
	enableRxIT();
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f849 	bl	800234e <_ZN10serialPort10enableRxITEv>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN10serialPort7ReceiveEv>:

void serialPort::Receive()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	rxBuffer.Write(&readByte, 1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f103 000c 	add.w	r0, r3, #12
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3308      	adds	r3, #8
 80022d6:	2201      	movs	r2, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fea3 	bl	8001024 <_ZN10CircBuffer5WriteEPhj>
	enableRxIT();
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f835 	bl	800234e <_ZN10serialPort10enableRxITEv>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZN10serialPort4ReadEPhj>:


void serialPort::Read(uint8_t* data, size_t len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
	rxBuffer.Read(data, len);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	330c      	adds	r3, #12
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fe5e 	bl	8000fc2 <_ZN10CircBuffer4ReadEPhj>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_ZN10serialPort4SendEPhj>:

void serialPort::Send(uint8_t* data, size_t len)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(uart, data, len);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	b292      	uxth	r2, r2
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	4618      	mov	r0, r3
 8002326:	f005 fcab 	bl	8007c80 <HAL_UART_Transmit_DMA>
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_ZN10serialPort9AvailableEv>:
{
	rxBuffer.Peak(data, len);
}

size_t serialPort::Available()
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	return rxBuffer.Available();
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	330c      	adds	r3, #12
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fe9a 	bl	8001078 <_ZN10CircBuffer9AvailableEv>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_ZN10serialPort10enableRxITEv>:


// Private

void serialPort::enableRxIT()
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart, &readByte, 1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6858      	ldr	r0, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3308      	adds	r3, #8
 800235e:	2201      	movs	r2, #1
 8002360:	4619      	mov	r1, r3
 8002362:	f005 fd0b 	bl	8007d7c <HAL_UART_Receive_DMA>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_MspInit+0x4c>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <HAL_MspInit+0x4c>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002384:	6453      	str	r3, [r2, #68]	; 0x44
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_MspInit+0x4c>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_MspInit+0x4c>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_MspInit+0x4c>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_MspInit+0x4c>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023ae:	2007      	movs	r0, #7
 80023b0:	f000 fc68 	bl	8002c84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800

080023c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a21      	ldr	r2, [pc, #132]	; (8002464 <HAL_I2C_MspInit+0xa4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d13b      	bne.n	800245a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_I2C_MspInit+0xa8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_I2C_MspInit+0xa8>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_I2C_MspInit+0xa8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80023fe:	23c0      	movs	r3, #192	; 0xc0
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002402:	2312      	movs	r3, #18
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002406:	2301      	movs	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800240e:	2304      	movs	r3, #4
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4814      	ldr	r0, [pc, #80]	; (800246c <HAL_I2C_MspInit+0xac>)
 800241a:	f001 f885 	bl	8003528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_I2C_MspInit+0xa8>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a10      	ldr	r2, [pc, #64]	; (8002468 <HAL_I2C_MspInit+0xa8>)
 8002428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_I2C_MspInit+0xa8>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	201f      	movs	r0, #31
 8002440:	f000 fc2b 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002444:	201f      	movs	r0, #31
 8002446:	f000 fc44 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2020      	movs	r0, #32
 8002450:	f000 fc23 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002454:	2020      	movs	r0, #32
 8002456:	f000 fc3c 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800245a:	bf00      	nop
 800245c:	3728      	adds	r7, #40	; 0x28
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40005400 	.word	0x40005400
 8002468:	40023800 	.word	0x40023800
 800246c:	40020400 	.word	0x40020400

08002470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <HAL_TIM_Base_MspInit+0xb8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d116      	bne.n	80024b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2019      	movs	r0, #25
 80024a4:	f000 fbf9 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024a8:	2019      	movs	r0, #25
 80024aa:	f000 fc12 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80024ae:	e036      	b.n	800251e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_TIM_Base_MspInit+0xc0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d116      	bne.n	80024e8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a1a      	ldr	r2, [pc, #104]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 80024c4:	f043 0310 	orr.w	r3, r3, #16
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2036      	movs	r0, #54	; 0x36
 80024dc:	f000 fbdd 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024e0:	2036      	movs	r0, #54	; 0x36
 80024e2:	f000 fbf6 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
}
 80024e6:	e01a      	b.n	800251e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_TIM_Base_MspInit+0xc4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d115      	bne.n	800251e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a0c      	ldr	r2, [pc, #48]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 80024fc:	f043 0320 	orr.w	r3, r3, #32
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_TIM_Base_MspInit+0xbc>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	2037      	movs	r0, #55	; 0x37
 8002514:	f000 fbc1 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002518:	2037      	movs	r0, #55	; 0x37
 800251a:	f000 fbda 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40010000 	.word	0x40010000
 800252c:	40023800 	.word	0x40023800
 8002530:	40001000 	.word	0x40001000
 8002534:	40001400 	.word	0x40001400

08002538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <HAL_TIM_MspPostInit+0x68>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d11e      	bne.n	8002598 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_TIM_MspPostInit+0x6c>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_TIM_MspPostInit+0x6c>)
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_TIM_MspPostInit+0x6c>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002576:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800257a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002588:	2301      	movs	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	4619      	mov	r1, r3
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <HAL_TIM_MspPostInit+0x70>)
 8002594:	f000 ffc8 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a51      	ldr	r2, [pc, #324]	; (8002710 <HAL_UART_MspInit+0x164>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f040 809b 	bne.w	8002706 <HAL_UART_MspInit+0x15a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	4b4f      	ldr	r3, [pc, #316]	; (8002714 <HAL_UART_MspInit+0x168>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a4e      	ldr	r2, [pc, #312]	; (8002714 <HAL_UART_MspInit+0x168>)
 80025da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025de:	6413      	str	r3, [r2, #64]	; 0x40
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_UART_MspInit+0x168>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_UART_MspInit+0x168>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_UART_MspInit+0x168>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <HAL_UART_MspInit+0x168>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002608:	230c      	movs	r3, #12
 800260a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002618:	2307      	movs	r3, #7
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	483d      	ldr	r0, [pc, #244]	; (8002718 <HAL_UART_MspInit+0x16c>)
 8002624:	f000 ff80 	bl	8003528 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002628:	4b3c      	ldr	r3, [pc, #240]	; (800271c <HAL_UART_MspInit+0x170>)
 800262a:	4a3d      	ldr	r2, [pc, #244]	; (8002720 <HAL_UART_MspInit+0x174>)
 800262c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_UART_MspInit+0x170>)
 8002630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002634:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_UART_MspInit+0x170>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800263c:	4b37      	ldr	r3, [pc, #220]	; (800271c <HAL_UART_MspInit+0x170>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002642:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_UART_MspInit+0x170>)
 8002644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002648:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800264a:	4b34      	ldr	r3, [pc, #208]	; (800271c <HAL_UART_MspInit+0x170>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_UART_MspInit+0x170>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_UART_MspInit+0x170>)
 8002658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_UART_MspInit+0x170>)
 8002660:	2200      	movs	r2, #0
 8002662:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_UART_MspInit+0x170>)
 8002666:	2200      	movs	r2, #0
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800266a:	482c      	ldr	r0, [pc, #176]	; (800271c <HAL_UART_MspInit+0x170>)
 800266c:	f000 fb4c 	bl	8002d08 <HAL_DMA_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 8002680:	f7ff fbdc 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a25      	ldr	r2, [pc, #148]	; (800271c <HAL_UART_MspInit+0x170>)
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
 800268a:	4a24      	ldr	r2, [pc, #144]	; (800271c <HAL_UART_MspInit+0x170>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_UART_MspInit+0x178>)
 8002692:	4a25      	ldr	r2, [pc, #148]	; (8002728 <HAL_UART_MspInit+0x17c>)
 8002694:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_UART_MspInit+0x178>)
 8002698:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800269c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026a0:	2240      	movs	r2, #64	; 0x40
 80026a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80026d0:	4814      	ldr	r0, [pc, #80]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026d2:	f000 fb19 	bl	8002d08 <HAL_DMA_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2300      	moveq	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80026e6:	f7ff fba9 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34
 80026f0:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_UART_MspInit+0x178>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2026      	movs	r0, #38	; 0x26
 80026fc:	f000 facd 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002700:	2026      	movs	r0, #38	; 0x26
 8002702:	f000 fae6 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40004400 	.word	0x40004400
 8002714:	40023800 	.word	0x40023800
 8002718:	40020000 	.word	0x40020000
 800271c:	20000368 	.word	0x20000368
 8002720:	40026088 	.word	0x40026088
 8002724:	200003c8 	.word	0x200003c8
 8002728:	400260a0 	.word	0x400260a0

0800272c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <NMI_Handler+0x4>

08002732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <HardFault_Handler+0x4>

08002738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <MemManage_Handler+0x4>

0800273e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <UsageFault_Handler+0x4>

0800274a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002778:	f000 f970 	bl	8002a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <DMA1_Stream5_IRQHandler+0x10>)
 8002786:	f000 fc57 	bl	8003038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000368 	.word	0x20000368

08002794 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <DMA1_Stream6_IRQHandler+0x10>)
 800279a:	f000 fc4d 	bl	8003038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200003c8 	.word	0x200003c8

080027a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027ae:	f004 fb89 	bl	8006ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2000024c 	.word	0x2000024c

080027bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <I2C1_EV_IRQHandler+0x10>)
 80027c2:	f001 fe13 	bl	80043ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200001f8 	.word	0x200001f8

080027d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <I2C1_ER_IRQHandler+0x10>)
 80027d6:	f001 ff7a 	bl	80046ce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200001f8 	.word	0x200001f8

080027e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <USART2_IRQHandler+0x10>)
 80027ea:	f005 faf7 	bl	8007ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000324 	.word	0x20000324

080027f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <TIM6_DAC_IRQHandler+0x10>)
 80027fe:	f004 fb61 	bl	8006ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000294 	.word	0x20000294

0800280c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <TIM7_IRQHandler+0x10>)
 8002812:	f004 fb57 	bl	8006ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200002dc 	.word	0x200002dc

08002820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	return 1;
 8002824:	2301      	movs	r3, #1
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <_kill>:

int _kill(int pid, int sig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800283a:	f006 fe91 	bl	8009560 <__errno>
 800283e:	4603      	mov	r3, r0
 8002840:	2216      	movs	r2, #22
 8002842:	601a      	str	r2, [r3, #0]
	return -1;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_exit>:

void _exit (int status)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ffe7 	bl	8002830 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002862:	e7fe      	b.n	8002862 <_exit+0x12>

08002864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e00a      	b.n	800288c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002876:	f3af 8000 	nop.w
 800287a:	4601      	mov	r1, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	60ba      	str	r2, [r7, #8]
 8002882:	b2ca      	uxtb	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	dbf0      	blt.n	8002876 <_read+0x12>
	}

return len;
 8002894:	687b      	ldr	r3, [r7, #4]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e009      	b.n	80028c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbf1      	blt.n	80028b0 <_write+0x12>
	}
	return len;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_close>:

int _close(int file)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	return -1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_isatty>:

int _isatty(int file)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	return 1;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
	return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <SystemInit+0x20>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	4a05      	ldr	r2, [pc, #20]	; (8002960 <SystemInit+0x20>)
 800294c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800299c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002968:	480d      	ldr	r0, [pc, #52]	; (80029a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800296a:	490e      	ldr	r1, [pc, #56]	; (80029a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002970:	e002      	b.n	8002978 <LoopCopyDataInit>

08002972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002976:	3304      	adds	r3, #4

08002978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800297c:	d3f9      	bcc.n	8002972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002980:	4c0b      	ldr	r4, [pc, #44]	; (80029b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002984:	e001      	b.n	800298a <LoopFillZerobss>

08002986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002988:	3204      	adds	r2, #4

0800298a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800298c:	d3fb      	bcc.n	8002986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800298e:	f7ff ffd7 	bl	8002940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002992:	f006 fdeb 	bl	800956c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002996:	f7fe fcc9 	bl	800132c <main>
  bx  lr    
 800299a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800299c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80029a8:	0800c9fc 	.word	0x0800c9fc
  ldr r2, =_sbss
 80029ac:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80029b0:	2000085c 	.word	0x2000085c

080029b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC_IRQHandler>
	...

080029b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_Init+0x40>)
 80029c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_Init+0x40>)
 80029ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_Init+0x40>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e0:	2003      	movs	r0, #3
 80029e2:	f000 f94f 	bl	8002c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f000 f808 	bl	80029fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ec:	f7ff fcc0 	bl	8002370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023c00 	.word	0x40023c00

080029fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_InitTick+0x54>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_InitTick+0x58>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f967 	bl	8002cee <HAL_SYSTICK_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00e      	b.n	8002a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	d80a      	bhi.n	8002a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a30:	2200      	movs	r2, #0
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a38:	f000 f92f 	bl	8002c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a3c:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <HAL_InitTick+0x5c>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000008 	.word	0x20000008
 8002a58:	20000004 	.word	0x20000004

08002a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_IncTick+0x20>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_IncTick+0x24>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_IncTick+0x24>)
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000008 	.word	0x20000008
 8002a80:	20000840 	.word	0x20000840

08002a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return uwTick;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_GetTick+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000840 	.word	0x20000840

08002a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff ffee 	bl	8002a84 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab4:	d005      	beq.n	8002ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_Delay+0x44>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ac2:	bf00      	nop
 8002ac4:	f7ff ffde 	bl	8002a84 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d8f7      	bhi.n	8002ac4 <HAL_Delay+0x28>
  {
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000008 	.word	0x20000008

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	; (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c50:	d301      	bcc.n	8002c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00f      	b.n	8002c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <SysTick_Config+0x40>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5e:	210f      	movs	r1, #15
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c64:	f7ff ff8e 	bl	8002b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <SysTick_Config+0x40>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <SysTick_Config+0x40>)
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010

08002c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ff29 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cac:	f7ff ff3e 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	6978      	ldr	r0, [r7, #20]
 8002cb8:	f7ff ff8e 	bl	8002bd8 <NVIC_EncodePriority>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff5d 	bl	8002b84 <__NVIC_SetPriority>
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff31 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffa2 	bl	8002c40 <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff feb6 	bl	8002a84 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e099      	b.n	8002e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d44:	e00f      	b.n	8002d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d46:	f7ff fe9d 	bl	8002a84 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d908      	bls.n	8002d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e078      	b.n	8002e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e8      	bne.n	8002d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_DMA_Init+0x158>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d107      	bne.n	8002dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0307 	bic.w	r3, r3, #7
 8002de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d117      	bne.n	8002e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fb0f 	bl	8003430 <DMA_CheckFifoParam>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2240      	movs	r2, #64	; 0x40
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e26:	2301      	movs	r3, #1
 8002e28:	e016      	b.n	8002e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fac6 	bl	80033c4 <DMA_CalcBaseAndBitshift>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	223f      	movs	r2, #63	; 0x3f
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	f010803f 	.word	0xf010803f

08002e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_DMA_Start_IT+0x26>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e040      	b.n	8002f0c <HAL_DMA_Start_IT+0xa8>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d12f      	bne.n	8002efe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fa58 	bl	8003368 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	223f      	movs	r2, #63	; 0x3f
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0216 	orr.w	r2, r2, #22
 8002ed2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0208 	orr.w	r2, r2, #8
 8002eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e005      	b.n	8002f0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f22:	f7ff fdaf 	bl	8002a84 <HAL_GetTick>
 8002f26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d008      	beq.n	8002f46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e052      	b.n	8002fec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0216 	bic.w	r2, r2, #22
 8002f54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <HAL_DMA_Abort+0x62>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0208 	bic.w	r2, r2, #8
 8002f84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0201 	bic.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f96:	e013      	b.n	8002fc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f98:	f7ff fd74 	bl	8002a84 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d90c      	bls.n	8002fc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e015      	b.n	8002fec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e4      	bne.n	8002f98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	223f      	movs	r2, #63	; 0x3f
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d004      	beq.n	8003012 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e00c      	b.n	800302c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2205      	movs	r2, #5
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003044:	4b8e      	ldr	r3, [pc, #568]	; (8003280 <HAL_DMA_IRQHandler+0x248>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a8e      	ldr	r2, [pc, #568]	; (8003284 <HAL_DMA_IRQHandler+0x24c>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	2208      	movs	r2, #8
 8003064:	409a      	lsls	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01a      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0204 	bic.w	r2, r2, #4
 800308a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	2208      	movs	r2, #8
 8003092:	409a      	lsls	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	2201      	movs	r2, #1
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d012      	beq.n	80030da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	2201      	movs	r2, #1
 80030c8:	409a      	lsls	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	2204      	movs	r2, #4
 80030e0:	409a      	lsls	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d012      	beq.n	8003110 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2204      	movs	r2, #4
 80030fe:	409a      	lsls	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	2210      	movs	r2, #16
 8003116:	409a      	lsls	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d043      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d03c      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2210      	movs	r2, #16
 8003134:	409a      	lsls	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d018      	beq.n	800317a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d108      	bne.n	8003168 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d024      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4798      	blx	r3
 8003166:	e01f      	b.n	80031a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01b      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e016      	b.n	80031a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0208 	bic.w	r2, r2, #8
 8003196:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2220      	movs	r2, #32
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 808f 	beq.w	80032d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8087 	beq.w	80032d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	2220      	movs	r2, #32
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d136      	bne.n	8003250 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0216 	bic.w	r2, r2, #22
 80031f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003200:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <HAL_DMA_IRQHandler+0x1da>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0208 	bic.w	r2, r2, #8
 8003220:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	223f      	movs	r2, #63	; 0x3f
 8003228:	409a      	lsls	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	2b00      	cmp	r3, #0
 8003244:	d07e      	beq.n	8003344 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
        }
        return;
 800324e:	e079      	b.n	8003344 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01d      	beq.n	800329a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	2b00      	cmp	r3, #0
 8003272:	d031      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
 800327c:	e02c      	b.n	80032d8 <HAL_DMA_IRQHandler+0x2a0>
 800327e:	bf00      	nop
 8003280:	20000000 	.word	0x20000000
 8003284:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d023      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
 8003298:	e01e      	b.n	80032d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10f      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0210 	bic.w	r2, r2, #16
 80032b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d032      	beq.n	8003346 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d022      	beq.n	8003332 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2205      	movs	r2, #5
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3301      	adds	r3, #1
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	d307      	bcc.n	8003320 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f2      	bne.n	8003304 <HAL_DMA_IRQHandler+0x2cc>
 800331e:	e000      	b.n	8003322 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003320:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
 8003342:	e000      	b.n	8003346 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003344:	bf00      	nop
    }
  }
}
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335a:	b2db      	uxtb	r3, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003384:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d108      	bne.n	80033a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033a6:	e007      	b.n	80033b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3b10      	subs	r3, #16
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <DMA_CalcBaseAndBitshift+0x64>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033de:	4a13      	ldr	r2, [pc, #76]	; (800342c <DMA_CalcBaseAndBitshift+0x68>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d909      	bls.n	8003406 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	1d1a      	adds	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	659a      	str	r2, [r3, #88]	; 0x58
 8003404:	e007      	b.n	8003416 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	aaaaaaab 	.word	0xaaaaaaab
 800342c:	0800c4cc 	.word	0x0800c4cc

08003430 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11f      	bne.n	800348a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d856      	bhi.n	80034fe <DMA_CheckFifoParam+0xce>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <DMA_CheckFifoParam+0x28>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	08003469 	.word	0x08003469
 800345c:	0800347b 	.word	0x0800347b
 8003460:	08003469 	.word	0x08003469
 8003464:	080034ff 	.word	0x080034ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d046      	beq.n	8003502 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e043      	b.n	8003502 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003482:	d140      	bne.n	8003506 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003488:	e03d      	b.n	8003506 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	d121      	bne.n	80034d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d837      	bhi.n	800350a <DMA_CheckFifoParam+0xda>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <DMA_CheckFifoParam+0x70>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b7 	.word	0x080034b7
 80034a8:	080034b1 	.word	0x080034b1
 80034ac:	080034c9 	.word	0x080034c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e030      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d025      	beq.n	800350e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c6:	e022      	b.n	800350e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d0:	d11f      	bne.n	8003512 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034d6:	e01c      	b.n	8003512 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d903      	bls.n	80034e6 <DMA_CheckFifoParam+0xb6>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d003      	beq.n	80034ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034e4:	e018      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
      break;
 80034ea:	e015      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e00b      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;
 80034fe:	bf00      	nop
 8003500:	e00a      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003502:	bf00      	nop
 8003504:	e008      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
 8003508:	e006      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;   
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003516:	bf00      	nop
    }
  } 
  
  return status; 
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e16b      	b.n	800381c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003544:	2201      	movs	r2, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	f040 815a 	bne.w	8003816 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d005      	beq.n	800357a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003576:	2b02      	cmp	r3, #2
 8003578:	d130      	bne.n	80035dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	2203      	movs	r2, #3
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 0201 	and.w	r2, r3, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d017      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d123      	bne.n	800366c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	08da      	lsrs	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3208      	adds	r2, #8
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80b4 	beq.w	8003816 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b60      	ldr	r3, [pc, #384]	; (8003834 <HAL_GPIO_Init+0x30c>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	4a5f      	ldr	r2, [pc, #380]	; (8003834 <HAL_GPIO_Init+0x30c>)
 80036b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036bc:	6453      	str	r3, [r2, #68]	; 0x44
 80036be:	4b5d      	ldr	r3, [pc, #372]	; (8003834 <HAL_GPIO_Init+0x30c>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ca:	4a5b      	ldr	r2, [pc, #364]	; (8003838 <HAL_GPIO_Init+0x310>)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	3302      	adds	r3, #2
 80036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	220f      	movs	r2, #15
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_GPIO_Init+0x314>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02b      	beq.n	800374e <HAL_GPIO_Init+0x226>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a51      	ldr	r2, [pc, #324]	; (8003840 <HAL_GPIO_Init+0x318>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d025      	beq.n	800374a <HAL_GPIO_Init+0x222>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a50      	ldr	r2, [pc, #320]	; (8003844 <HAL_GPIO_Init+0x31c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01f      	beq.n	8003746 <HAL_GPIO_Init+0x21e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4f      	ldr	r2, [pc, #316]	; (8003848 <HAL_GPIO_Init+0x320>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d019      	beq.n	8003742 <HAL_GPIO_Init+0x21a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4e      	ldr	r2, [pc, #312]	; (800384c <HAL_GPIO_Init+0x324>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_GPIO_Init+0x216>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4d      	ldr	r2, [pc, #308]	; (8003850 <HAL_GPIO_Init+0x328>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00d      	beq.n	800373a <HAL_GPIO_Init+0x212>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4c      	ldr	r2, [pc, #304]	; (8003854 <HAL_GPIO_Init+0x32c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <HAL_GPIO_Init+0x20e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4b      	ldr	r2, [pc, #300]	; (8003858 <HAL_GPIO_Init+0x330>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_GPIO_Init+0x20a>
 800372e:	2307      	movs	r3, #7
 8003730:	e00e      	b.n	8003750 <HAL_GPIO_Init+0x228>
 8003732:	2308      	movs	r3, #8
 8003734:	e00c      	b.n	8003750 <HAL_GPIO_Init+0x228>
 8003736:	2306      	movs	r3, #6
 8003738:	e00a      	b.n	8003750 <HAL_GPIO_Init+0x228>
 800373a:	2305      	movs	r3, #5
 800373c:	e008      	b.n	8003750 <HAL_GPIO_Init+0x228>
 800373e:	2304      	movs	r3, #4
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x228>
 8003742:	2303      	movs	r3, #3
 8003744:	e004      	b.n	8003750 <HAL_GPIO_Init+0x228>
 8003746:	2302      	movs	r3, #2
 8003748:	e002      	b.n	8003750 <HAL_GPIO_Init+0x228>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_GPIO_Init+0x228>
 800374e:	2300      	movs	r3, #0
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f002 0203 	and.w	r2, r2, #3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4093      	lsls	r3, r2
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003760:	4935      	ldr	r1, [pc, #212]	; (8003838 <HAL_GPIO_Init+0x310>)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_GPIO_Init+0x334>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003792:	4a32      	ldr	r2, [pc, #200]	; (800385c <HAL_GPIO_Init+0x334>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003798:	4b30      	ldr	r3, [pc, #192]	; (800385c <HAL_GPIO_Init+0x334>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037bc:	4a27      	ldr	r2, [pc, #156]	; (800385c <HAL_GPIO_Init+0x334>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <HAL_GPIO_Init+0x334>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e6:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_GPIO_Init+0x334>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_GPIO_Init+0x334>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003810:	4a12      	ldr	r2, [pc, #72]	; (800385c <HAL_GPIO_Init+0x334>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	f67f ae90 	bls.w	8003544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40020800 	.word	0x40020800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40021000 	.word	0x40021000
 8003850:	40021400 	.word	0x40021400
 8003854:	40021800 	.word	0x40021800
 8003858:	40021c00 	.word	0x40021c00
 800385c:	40013c00 	.word	0x40013c00

08003860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
 800386c:	4613      	mov	r3, r2
 800386e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003870:	787b      	ldrb	r3, [r7, #1]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800387c:	e003      	b.n	8003886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	041a      	lsls	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	619a      	str	r2, [r3, #24]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038a4:	887a      	ldrh	r2, [r7, #2]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	041a      	lsls	r2, r3, #16
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	400b      	ands	r3, r1
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	619a      	str	r2, [r3, #24]
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e12b      	b.n	8003b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fe fd66 	bl	80023c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800392a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800392c:	f003 f9fa 	bl	8006d24 <HAL_RCC_GetPCLK1Freq>
 8003930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a81      	ldr	r2, [pc, #516]	; (8003b3c <HAL_I2C_Init+0x274>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d807      	bhi.n	800394c <HAL_I2C_Init+0x84>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a80      	ldr	r2, [pc, #512]	; (8003b40 <HAL_I2C_Init+0x278>)
 8003940:	4293      	cmp	r3, r2
 8003942:	bf94      	ite	ls
 8003944:	2301      	movls	r3, #1
 8003946:	2300      	movhi	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e006      	b.n	800395a <HAL_I2C_Init+0x92>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <HAL_I2C_Init+0x27c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0e7      	b.n	8003b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a78      	ldr	r2, [pc, #480]	; (8003b48 <HAL_I2C_Init+0x280>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0c9b      	lsrs	r3, r3, #18
 800396c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a6a      	ldr	r2, [pc, #424]	; (8003b3c <HAL_I2C_Init+0x274>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d802      	bhi.n	800399c <HAL_I2C_Init+0xd4>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	3301      	adds	r3, #1
 800399a:	e009      	b.n	80039b0 <HAL_I2C_Init+0xe8>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	4a69      	ldr	r2, [pc, #420]	; (8003b4c <HAL_I2C_Init+0x284>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	099b      	lsrs	r3, r3, #6
 80039ae:	3301      	adds	r3, #1
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	495c      	ldr	r1, [pc, #368]	; (8003b3c <HAL_I2C_Init+0x274>)
 80039cc:	428b      	cmp	r3, r1
 80039ce:	d819      	bhi.n	8003a04 <HAL_I2C_Init+0x13c>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e59      	subs	r1, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fbb1 f3f3 	udiv	r3, r1, r3
 80039de:	1c59      	adds	r1, r3, #1
 80039e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039e4:	400b      	ands	r3, r1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_I2C_Init+0x138>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e59      	subs	r1, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fe:	e051      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a00:	2304      	movs	r3, #4
 8003a02:	e04f      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d111      	bne.n	8003a30 <HAL_I2C_Init+0x168>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e012      	b.n	8003a56 <HAL_I2C_Init+0x18e>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1e58      	subs	r0, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	0099      	lsls	r1, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Init+0x196>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e022      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <HAL_I2C_Init+0x1bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e58      	subs	r0, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	440b      	add	r3, r1
 8003a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	e00f      	b.n	8003aa4 <HAL_I2C_Init+0x1dc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e58      	subs	r0, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	0099      	lsls	r1, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6809      	ldr	r1, [r1, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6911      	ldr	r1, [r2, #16]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	000186a0 	.word	0x000186a0
 8003b40:	001e847f 	.word	0x001e847f
 8003b44:	003d08ff 	.word	0x003d08ff
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	10624dd3 	.word	0x10624dd3

08003b50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	4608      	mov	r0, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	817b      	strh	r3, [r7, #10]
 8003b62:	460b      	mov	r3, r1
 8003b64:	813b      	strh	r3, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b6a:	f7fe ff8b 	bl	8002a84 <HAL_GetTick>
 8003b6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	f040 80d9 	bne.w	8003d30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2319      	movs	r3, #25
 8003b84:	2201      	movs	r2, #1
 8003b86:	496d      	ldr	r1, [pc, #436]	; (8003d3c <HAL_I2C_Mem_Write+0x1ec>)
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f002 fa31 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
 8003b96:	e0cc      	b.n	8003d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2C_Mem_Write+0x56>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e0c5      	b.n	8003d32 <HAL_I2C_Mem_Write+0x1e2>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d007      	beq.n	8003bcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2221      	movs	r2, #33	; 0x21
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2240      	movs	r2, #64	; 0x40
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a4d      	ldr	r2, [pc, #308]	; (8003d40 <HAL_I2C_Mem_Write+0x1f0>)
 8003c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c0e:	88f8      	ldrh	r0, [r7, #6]
 8003c10:	893a      	ldrh	r2, [r7, #8]
 8003c12:	8979      	ldrh	r1, [r7, #10]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f001 ffc0 	bl	8005ba4 <I2C_RequestMemoryWrite>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d052      	beq.n	8003cd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e081      	b.n	8003d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f002 fab2 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00d      	beq.n	8003c5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d107      	bne.n	8003c56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e06b      	b.n	8003d32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	781a      	ldrb	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d11b      	bne.n	8003cd0 <HAL_I2C_Mem_Write+0x180>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d017      	beq.n	8003cd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	781a      	ldrb	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1aa      	bne.n	8003c2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f002 fa9e 	bl	800621e <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e016      	b.n	8003d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	00100002 	.word	0x00100002
 8003d40:	ffff0000 	.word	0xffff0000

08003d44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08c      	sub	sp, #48	; 0x30
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	817b      	strh	r3, [r7, #10]
 8003d56:	460b      	mov	r3, r1
 8003d58:	813b      	strh	r3, [r7, #8]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d5e:	f7fe fe91 	bl	8002a84 <HAL_GetTick>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	f040 8208 	bne.w	8004182 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2319      	movs	r3, #25
 8003d78:	2201      	movs	r2, #1
 8003d7a:	497b      	ldr	r1, [pc, #492]	; (8003f68 <HAL_I2C_Mem_Read+0x224>)
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f002 f937 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e1fb      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_I2C_Mem_Read+0x56>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e1f4      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d007      	beq.n	8003dc0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2222      	movs	r2, #34	; 0x22
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a5b      	ldr	r2, [pc, #364]	; (8003f6c <HAL_I2C_Mem_Read+0x228>)
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e02:	88f8      	ldrh	r0, [r7, #6]
 8003e04:	893a      	ldrh	r2, [r7, #8]
 8003e06:	8979      	ldrh	r1, [r7, #10]
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	4603      	mov	r3, r0
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f001 ff5c 	bl	8005cd0 <I2C_RequestMemoryRead>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e1b0      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d113      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e184      	b.n	800415c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d11b      	bne.n	8003e92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e164      	b.n	800415c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d11b      	bne.n	8003ed2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	e144      	b.n	800415c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ee8:	e138      	b.n	800415c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	f200 80f1 	bhi.w	80040d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d123      	bne.n	8003f44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f002 f9ff 	bl	8006304 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e139      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f42:	e10b      	b.n	800415c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d14e      	bne.n	8003fea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	2200      	movs	r2, #0
 8003f54:	4906      	ldr	r1, [pc, #24]	; (8003f70 <HAL_I2C_Mem_Read+0x22c>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f002 f84a 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e10e      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
 8003f66:	bf00      	nop
 8003f68:	00100002 	.word	0x00100002
 8003f6c:	ffff0000 	.word	0xffff0000
 8003f70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fe8:	e0b8      	b.n	800415c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4966      	ldr	r1, [pc, #408]	; (800418c <HAL_I2C_Mem_Read+0x448>)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f001 fffb 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0bf      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2200      	movs	r2, #0
 800404e:	494f      	ldr	r1, [pc, #316]	; (800418c <HAL_I2C_Mem_Read+0x448>)
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f001 ffcd 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e091      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d4:	e042      	b.n	800415c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f002 f912 	bl	8006304 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e04c      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b04      	cmp	r3, #4
 8004128:	d118      	bne.n	800415c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	f47f aec2 	bne.w	8003eea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3728      	adds	r7, #40	; 0x28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	00010004 	.word	0x00010004

08004190 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	460b      	mov	r3, r1
 800419e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7fe fc70 	bl	8002a84 <HAL_GetTick>
 80041a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	f040 8111 	bne.w	80043da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2319      	movs	r3, #25
 80041be:	2201      	movs	r2, #1
 80041c0:	4988      	ldr	r1, [pc, #544]	; (80043e4 <HAL_I2C_IsDeviceReady+0x254>)
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f001 ff14 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	e104      	b.n	80043dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_I2C_IsDeviceReady+0x50>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0fd      	b.n	80043dc <HAL_I2C_IsDeviceReady+0x24c>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d007      	beq.n	8004206 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004214:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2224      	movs	r2, #36	; 0x24
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a70      	ldr	r2, [pc, #448]	; (80043e8 <HAL_I2C_IsDeviceReady+0x258>)
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004238:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2200      	movs	r2, #0
 8004242:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f001 fed2 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004260:	d103      	bne.n	800426a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e0b6      	b.n	80043dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800427c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800427e:	f7fe fc01 	bl	8002a84 <HAL_GetTick>
 8004282:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042b2:	e025      	b.n	8004300 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042b4:	f7fe fbe6 	bl	8002a84 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <HAL_I2C_IsDeviceReady+0x13a>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	22a0      	movs	r2, #160	; 0xa0
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2ba0      	cmp	r3, #160	; 0xa0
 800430a:	d005      	beq.n	8004318 <HAL_I2C_IsDeviceReady+0x188>
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <HAL_I2C_IsDeviceReady+0x188>
 8004312:	7dbb      	ldrb	r3, [r7, #22]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0cd      	beq.n	80042b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d129      	bne.n	8004382 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2319      	movs	r3, #25
 800435a:	2201      	movs	r2, #1
 800435c:	4921      	ldr	r1, [pc, #132]	; (80043e4 <HAL_I2C_IsDeviceReady+0x254>)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f001 fe46 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e036      	b.n	80043dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e02c      	b.n	80043dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004390:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800439a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2319      	movs	r3, #25
 80043a2:	2201      	movs	r2, #1
 80043a4:	490f      	ldr	r1, [pc, #60]	; (80043e4 <HAL_I2C_IsDeviceReady+0x254>)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f001 fe22 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e012      	b.n	80043dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	f4ff af32 	bcc.w	800422a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	00100002 	.word	0x00100002
 80043e8:	ffff0000 	.word	0xffff0000

080043ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b10      	cmp	r3, #16
 800441a:	d003      	beq.n	8004424 <HAL_I2C_EV_IRQHandler+0x38>
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b40      	cmp	r3, #64	; 0x40
 8004420:	f040 80c1 	bne.w	80045a6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_I2C_EV_IRQHandler+0x6e>
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004444:	d003      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x62>
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800444c:	d101      	bne.n	8004452 <HAL_I2C_EV_IRQHandler+0x66>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <HAL_I2C_EV_IRQHandler+0x68>
 8004452:	2300      	movs	r3, #0
 8004454:	2b01      	cmp	r3, #1
 8004456:	f000 8132 	beq.w	80046be <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00c      	beq.n	800447e <HAL_I2C_EV_IRQHandler+0x92>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	0a5b      	lsrs	r3, r3, #9
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f001 ffcc 	bl	800640e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fd79 	bl	8004f6e <I2C_Master_SB>
 800447c:	e092      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	08db      	lsrs	r3, r3, #3
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_I2C_EV_IRQHandler+0xb2>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	0a5b      	lsrs	r3, r3, #9
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fdef 	bl	800507a <I2C_Master_ADD10>
 800449c:	e082      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d009      	beq.n	80044be <HAL_I2C_EV_IRQHandler+0xd2>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	0a5b      	lsrs	r3, r3, #9
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fe09 	bl	80050ce <I2C_Master_ADDR>
 80044bc:	e072      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03b      	beq.n	8004542 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d8:	f000 80f3 	beq.w	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	09db      	lsrs	r3, r3, #7
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00f      	beq.n	8004508 <HAL_I2C_EV_IRQHandler+0x11c>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	0a9b      	lsrs	r3, r3, #10
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_I2C_EV_IRQHandler+0x11c>
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f9e9 	bl	80048d8 <I2C_MasterTransmit_TXE>
 8004506:	e04d      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	089b      	lsrs	r3, r3, #2
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80d6 	beq.w	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	0a5b      	lsrs	r3, r3, #9
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80cf 	beq.w	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004524:	7bbb      	ldrb	r3, [r7, #14]
 8004526:	2b21      	cmp	r3, #33	; 0x21
 8004528:	d103      	bne.n	8004532 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa70 	bl	8004a10 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004530:	e0c7      	b.n	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	f040 80c4 	bne.w	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fade 	bl	8004afc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004540:	e0bf      	b.n	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004550:	f000 80b7 	beq.w	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00f      	beq.n	8004580 <HAL_I2C_EV_IRQHandler+0x194>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_I2C_EV_IRQHandler+0x194>
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fb53 	bl	8004c24 <I2C_MasterReceive_RXNE>
 800457e:	e011      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 809a 	beq.w	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8093 	beq.w	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fbfc 	bl	8004d9a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a2:	e08e      	b.n	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80045a4:	e08d      	b.n	80046c2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	e007      	b.n	80045c8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <HAL_I2C_EV_IRQHandler+0x20e>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	0a5b      	lsrs	r3, r3, #9
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00c      	beq.n	80045fa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80045f0:	69b9      	ldr	r1, [r7, #24]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 ffba 	bl	800556c <I2C_Slave_ADDR>
 80045f8:	e066      	b.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <HAL_I2C_EV_IRQHandler+0x22e>
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	0a5b      	lsrs	r3, r3, #9
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fff4 	bl	8005600 <I2C_Slave_STOPF>
 8004618:	e056      	b.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800461a:	7bbb      	ldrb	r3, [r7, #14]
 800461c:	2b21      	cmp	r3, #33	; 0x21
 800461e:	d002      	beq.n	8004626 <HAL_I2C_EV_IRQHandler+0x23a>
 8004620:	7bbb      	ldrb	r3, [r7, #14]
 8004622:	2b29      	cmp	r3, #41	; 0x29
 8004624:	d125      	bne.n	8004672 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	09db      	lsrs	r3, r3, #7
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00f      	beq.n	8004652 <HAL_I2C_EV_IRQHandler+0x266>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	0a9b      	lsrs	r3, r3, #10
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_I2C_EV_IRQHandler+0x266>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fed0 	bl	80053f0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004650:	e039      	b.n	80046c6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d033      	beq.n	80046c6 <HAL_I2C_EV_IRQHandler+0x2da>
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	0a5b      	lsrs	r3, r3, #9
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d02d      	beq.n	80046c6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fefd 	bl	800546a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004670:	e029      	b.n	80046c6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	099b      	lsrs	r3, r3, #6
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00f      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x2b2>
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	0a9b      	lsrs	r3, r3, #10
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x2b2>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	089b      	lsrs	r3, r3, #2
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 ff08 	bl	80054ac <I2C_SlaveReceive_RXNE>
 800469c:	e014      	b.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	0a5b      	lsrs	r3, r3, #9
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 ff36 	bl	8005528 <I2C_SlaveReceive_BTF>
 80046bc:	e004      	b.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b08a      	sub	sp, #40	; 0x28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00e      	beq.n	800471c <HAL_I2C_ER_IRQHandler+0x4e>
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	0a1b      	lsrs	r3, r3, #8
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800471a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	0a5b      	lsrs	r3, r3, #9
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <HAL_I2C_ER_IRQHandler+0x78>
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	f043 0302 	orr.w	r3, r3, #2
 800473a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004744:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	0a9b      	lsrs	r3, r3, #10
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d03f      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0x104>
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d039      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800475e:	7efb      	ldrb	r3, [r7, #27]
 8004760:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004770:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004778:	7ebb      	ldrb	r3, [r7, #26]
 800477a:	2b20      	cmp	r3, #32
 800477c:	d112      	bne.n	80047a4 <HAL_I2C_ER_IRQHandler+0xd6>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10f      	bne.n	80047a4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	2b21      	cmp	r3, #33	; 0x21
 8004788:	d008      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800478a:	7cfb      	ldrb	r3, [r7, #19]
 800478c:	2b29      	cmp	r3, #41	; 0x29
 800478e:	d005      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0xce>
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	2b28      	cmp	r3, #40	; 0x28
 8004794:	d106      	bne.n	80047a4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b21      	cmp	r3, #33	; 0x21
 800479a:	d103      	bne.n	80047a4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 f85f 	bl	8005860 <I2C_Slave_AF>
 80047a2:	e016      	b.n	80047d2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047b6:	7efb      	ldrb	r3, [r7, #27]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d002      	beq.n	80047c2 <HAL_I2C_ER_IRQHandler+0xf4>
 80047bc:	7efb      	ldrb	r3, [r7, #27]
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d107      	bne.n	80047d2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	0adb      	lsrs	r3, r3, #11
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00e      	beq.n	80047fc <HAL_I2C_ER_IRQHandler+0x12e>
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	0a1b      	lsrs	r3, r3, #8
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	f043 0308 	orr.w	r3, r3, #8
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80047fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 f896 	bl	8005940 <I2C_ITError>
  }
}
 8004814:	bf00      	nop
 8004816:	3728      	adds	r7, #40	; 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
 8004864:	4613      	mov	r3, r2
 8004866:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d150      	bne.n	80049a0 <I2C_MasterTransmit_TXE+0xc8>
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	2b21      	cmp	r3, #33	; 0x21
 8004902:	d14d      	bne.n	80049a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b08      	cmp	r3, #8
 8004908:	d01d      	beq.n	8004946 <I2C_MasterTransmit_TXE+0x6e>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b20      	cmp	r3, #32
 800490e:	d01a      	beq.n	8004946 <I2C_MasterTransmit_TXE+0x6e>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004916:	d016      	beq.n	8004946 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004926:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2211      	movs	r2, #17
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ff6c 	bl	800481c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004944:	e060      	b.n	8004a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004954:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004964:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d107      	bne.n	8004990 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff7d 	bl	8004888 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800498e:	e03b      	b.n	8004a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff3f 	bl	800481c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800499e:	e033      	b.n	8004a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b21      	cmp	r3, #33	; 0x21
 80049a4:	d005      	beq.n	80049b2 <I2C_MasterTransmit_TXE+0xda>
 80049a6:	7bbb      	ldrb	r3, [r7, #14]
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d12d      	bne.n	8004a08 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b22      	cmp	r3, #34	; 0x22
 80049b0:	d12a      	bne.n	8004a08 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d108      	bne.n	80049ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049cc:	e01c      	b.n	8004a08 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d103      	bne.n	80049e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f88e 	bl	8004afc <I2C_MemoryTransmit_TXE_BTF>
}
 80049e0:	e012      	b.n	8004a08 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a06:	e7ff      	b.n	8004a08 <I2C_MasterTransmit_TXE+0x130>
 8004a08:	bf00      	nop
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b21      	cmp	r3, #33	; 0x21
 8004a28:	d164      	bne.n	8004af4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d012      	beq.n	8004a5a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a58:	e04c      	b.n	8004af4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d01d      	beq.n	8004a9c <I2C_MasterTransmit_BTF+0x8c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d01a      	beq.n	8004a9c <I2C_MasterTransmit_BTF+0x8c>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a6c:	d016      	beq.n	8004a9c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a7c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2211      	movs	r2, #17
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fec1 	bl	800481c <HAL_I2C_MasterTxCpltCallback>
}
 8004a9a:	e02b      	b.n	8004af4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aaa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d107      	bne.n	8004ae6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fed2 	bl	8004888 <HAL_I2C_MemTxCpltCallback>
}
 8004ae4:	e006      	b.n	8004af4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fe94 	bl	800481c <HAL_I2C_MasterTxCpltCallback>
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d11d      	bne.n	8004b50 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10b      	bne.n	8004b34 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b32:	e073      	b.n	8004c1c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	121b      	asrs	r3, r3, #8
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b4e:	e065      	b.n	8004c1c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10b      	bne.n	8004b70 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b6e:	e055      	b.n	8004c1c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d151      	bne.n	8004c1c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b22      	cmp	r3, #34	; 0x22
 8004b7c:	d10d      	bne.n	8004b9a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b8c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b98:	e040      	b.n	8004c1c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d015      	beq.n	8004bd0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b21      	cmp	r3, #33	; 0x21
 8004ba8:	d112      	bne.n	8004bd0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bce:	e025      	b.n	8004c1c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d120      	bne.n	8004c1c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b21      	cmp	r3, #33	; 0x21
 8004bde:	d11d      	bne.n	8004c1c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fe36 	bl	8004888 <HAL_I2C_MemTxCpltCallback>
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b22      	cmp	r3, #34	; 0x22
 8004c36:	f040 80ac 	bne.w	8004d92 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d921      	bls.n	8004c8c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	f040 808c 	bne.w	8004d92 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c88:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004c8a:	e082      	b.n	8004d92 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d075      	beq.n	8004d80 <I2C_MasterReceive_RXNE+0x15c>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d002      	beq.n	8004ca0 <I2C_MasterReceive_RXNE+0x7c>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d16f      	bne.n	8004d80 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fafd 	bl	80062a0 <I2C_WaitOnSTOPRequestThroughIT>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d142      	bne.n	8004d32 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d10a      	bne.n	8004d1c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fdc1 	bl	800489c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d1a:	e03a      	b.n	8004d92 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2212      	movs	r2, #18
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fd36 	bl	800179c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d30:	e02f      	b.n	8004d92 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fd99 	bl	80048b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d7e:	e008      	b.n	8004d92 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8e:	605a      	str	r2, [r3, #4]
}
 8004d90:	e7ff      	b.n	8004d92 <I2C_MasterReceive_RXNE+0x16e>
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d11b      	bne.n	8004dea <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004de8:	e0bd      	b.n	8004f66 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d129      	bne.n	8004e48 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e02:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d00a      	beq.n	8004e20 <I2C_MasterReceive_BTF+0x86>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d007      	beq.n	8004e20 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e46:	e08e      	b.n	8004f66 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d176      	bne.n	8004f40 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d002      	beq.n	8004e5e <I2C_MasterReceive_BTF+0xc4>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d108      	bne.n	8004e70 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e019      	b.n	8004ea4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d002      	beq.n	8004e7c <I2C_MasterReceive_BTF+0xe2>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d108      	bne.n	8004e8e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e00a      	b.n	8004ea4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d007      	beq.n	8004ea4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004efe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d10a      	bne.n	8004f2a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fcba 	bl	800489c <HAL_I2C_MemRxCpltCallback>
}
 8004f28:	e01d      	b.n	8004f66 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2212      	movs	r2, #18
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fc fc2f 	bl	800179c <HAL_I2C_MasterRxCpltCallback>
}
 8004f3e:	e012      	b.n	8004f66 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d117      	bne.n	8004fb2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f9a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004f9c:	e067      	b.n	800506e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	611a      	str	r2, [r3, #16]
}
 8004fb0:	e05d      	b.n	800506e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fba:	d133      	bne.n	8005024 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b21      	cmp	r3, #33	; 0x21
 8004fc6:	d109      	bne.n	8004fdc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd8:	611a      	str	r2, [r3, #16]
 8004fda:	e008      	b.n	8004fee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d004      	beq.n	8005000 <I2C_Master_SB+0x92>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d108      	bne.n	8005012 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d032      	beq.n	800506e <I2C_Master_SB+0x100>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d02d      	beq.n	800506e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005020:	605a      	str	r2, [r3, #4]
}
 8005022:	e024      	b.n	800506e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10e      	bne.n	800504a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	b29b      	uxth	r3, r3
 8005032:	11db      	asrs	r3, r3, #7
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0306 	and.w	r3, r3, #6
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f063 030f 	orn	r3, r3, #15
 8005040:	b2da      	uxtb	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	611a      	str	r2, [r3, #16]
}
 8005048:	e011      	b.n	800506e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10d      	bne.n	800506e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	b29b      	uxth	r3, r3
 8005058:	11db      	asrs	r3, r3, #7
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f003 0306 	and.w	r3, r3, #6
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f063 030e 	orn	r3, r3, #14
 8005066:	b2da      	uxtb	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	611a      	str	r2, [r3, #16]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <I2C_Master_ADD10+0x26>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d108      	bne.n	80050b2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00c      	beq.n	80050c2 <I2C_Master_ADD10+0x48>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c0:	605a      	str	r2, [r3, #4]
  }
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b091      	sub	sp, #68	; 0x44
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b22      	cmp	r3, #34	; 0x22
 80050f6:	f040 8169 	bne.w	80053cc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <I2C_Master_ADDR+0x54>
 8005102:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d10b      	bne.n	8005122 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510a:	2300      	movs	r3, #0
 800510c:	633b      	str	r3, [r7, #48]	; 0x30
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	633b      	str	r3, [r7, #48]	; 0x30
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	633b      	str	r3, [r7, #48]	; 0x30
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	e160      	b.n	80053e4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11d      	bne.n	8005166 <I2C_Master_ADDR+0x98>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005132:	d118      	bne.n	8005166 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005134:	2300      	movs	r3, #0
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005158:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	651a      	str	r2, [r3, #80]	; 0x50
 8005164:	e13e      	b.n	80053e4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d113      	bne.n	8005198 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005170:	2300      	movs	r3, #0
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e115      	b.n	80053c4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b01      	cmp	r3, #1
 80051a0:	f040 808a 	bne.w	80052b8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051aa:	d137      	bne.n	800521c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ca:	d113      	bne.n	80051f4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051da:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051dc:	2300      	movs	r3, #0
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	e0e7      	b.n	80053c4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f4:	2300      	movs	r3, #0
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	623b      	str	r3, [r7, #32]
 8005208:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e0d3      	b.n	80053c4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b08      	cmp	r3, #8
 8005220:	d02e      	beq.n	8005280 <I2C_Master_ADDR+0x1b2>
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	2b20      	cmp	r3, #32
 8005226:	d02b      	beq.n	8005280 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522a:	2b12      	cmp	r3, #18
 800522c:	d102      	bne.n	8005234 <I2C_Master_ADDR+0x166>
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	2b01      	cmp	r3, #1
 8005232:	d125      	bne.n	8005280 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	2b04      	cmp	r3, #4
 8005238:	d00e      	beq.n	8005258 <I2C_Master_ADDR+0x18a>
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	2b02      	cmp	r3, #2
 800523e:	d00b      	beq.n	8005258 <I2C_Master_ADDR+0x18a>
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	2b10      	cmp	r3, #16
 8005244:	d008      	beq.n	8005258 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e007      	b.n	8005268 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005266:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	e0a1      	b.n	80053c4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005290:	2300      	movs	r3, #0
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e085      	b.n	80053c4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d14d      	bne.n	800535e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d016      	beq.n	80052f6 <I2C_Master_ADDR+0x228>
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d013      	beq.n	80052f6 <I2C_Master_ADDR+0x228>
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d010      	beq.n	80052f6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e007      	b.n	8005306 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005304:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005314:	d117      	bne.n	8005346 <I2C_Master_ADDR+0x278>
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800531c:	d00b      	beq.n	8005336 <I2C_Master_ADDR+0x268>
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	2b01      	cmp	r3, #1
 8005322:	d008      	beq.n	8005336 <I2C_Master_ADDR+0x268>
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	2b08      	cmp	r3, #8
 8005328:	d005      	beq.n	8005336 <I2C_Master_ADDR+0x268>
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	2b10      	cmp	r3, #16
 800532e:	d002      	beq.n	8005336 <I2C_Master_ADDR+0x268>
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	2b20      	cmp	r3, #32
 8005334:	d107      	bne.n	8005346 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005344:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	e032      	b.n	80053c4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800536c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537c:	d117      	bne.n	80053ae <I2C_Master_ADDR+0x2e0>
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005384:	d00b      	beq.n	800539e <I2C_Master_ADDR+0x2d0>
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b01      	cmp	r3, #1
 800538a:	d008      	beq.n	800539e <I2C_Master_ADDR+0x2d0>
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	2b08      	cmp	r3, #8
 8005390:	d005      	beq.n	800539e <I2C_Master_ADDR+0x2d0>
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	2b10      	cmp	r3, #16
 8005396:	d002      	beq.n	800539e <I2C_Master_ADDR+0x2d0>
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	2b20      	cmp	r3, #32
 800539c:	d107      	bne.n	80053ae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80053ca:	e00b      	b.n	80053e4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
}
 80053e2:	e7ff      	b.n	80053e4 <I2C_Master_ADDR+0x316>
 80053e4:	bf00      	nop
 80053e6:	3744      	adds	r7, #68	; 0x44
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d02b      	beq.n	8005462 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	781a      	ldrb	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d114      	bne.n	8005462 <I2C_SlaveTransmit_TXE+0x72>
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b29      	cmp	r3, #41	; 0x29
 800543c:	d111      	bne.n	8005462 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2221      	movs	r2, #33	; 0x21
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2228      	movs	r2, #40	; 0x28
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff f9e7 	bl	8004830 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d011      	beq.n	80054a0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	781a      	ldrb	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d02c      	beq.n	8005520 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d114      	bne.n	8005520 <I2C_SlaveReceive_RXNE+0x74>
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b2a      	cmp	r3, #42	; 0x2a
 80054fa:	d111      	bne.n	8005520 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2222      	movs	r2, #34	; 0x22
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2228      	movs	r2, #40	; 0x28
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff f992 	bl	8004844 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d012      	beq.n	8005560 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005586:	2b28      	cmp	r3, #40	; 0x28
 8005588:	d127      	bne.n	80055da <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	09db      	lsrs	r3, r3, #7
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	81bb      	strh	r3, [r7, #12]
 80055bc:	e002      	b.n	80055c4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80055cc:	89ba      	ldrh	r2, [r7, #12]
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff f940 	bl	8004858 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055d8:	e00e      	b.n	80055f8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80055f8:	bf00      	nop
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800561e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565c:	d172      	bne.n	8005744 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b22      	cmp	r3, #34	; 0x22
 8005662:	d002      	beq.n	800566a <I2C_Slave_STOPF+0x6a>
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b2a      	cmp	r3, #42	; 0x2a
 8005668:	d135      	bne.n	80056d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0204 	orr.w	r2, r3, #4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800569c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fd fe52 	bl	800334c <HAL_DMA_GetState>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d049      	beq.n	8005742 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	4a69      	ldr	r2, [pc, #420]	; (8005858 <I2C_Slave_STOPF+0x258>)
 80056b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fd fc9a 	bl	8002ff4 <HAL_DMA_Abort_IT>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d03d      	beq.n	8005742 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056d0:	4610      	mov	r0, r2
 80056d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056d4:	e035      	b.n	8005742 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0204 	orr.w	r2, r3, #4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005708:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	4618      	mov	r0, r3
 8005710:	f7fd fe1c 	bl	800334c <HAL_DMA_GetState>
 8005714:	4603      	mov	r3, r0
 8005716:	2b01      	cmp	r3, #1
 8005718:	d014      	beq.n	8005744 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	4a4e      	ldr	r2, [pc, #312]	; (8005858 <I2C_Slave_STOPF+0x258>)
 8005720:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	4618      	mov	r0, r3
 8005728:	f7fd fc64 	bl	8002ff4 <HAL_DMA_Abort_IT>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
 8005740:	e000      	b.n	8005744 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005742:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d03e      	beq.n	80057cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d112      	bne.n	8005782 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d112      	bne.n	80057b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	f043 0204 	orr.w	r2, r3, #4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8b3 	bl	8005940 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057da:	e039      	b.n	8005850 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b2a      	cmp	r3, #42	; 0x2a
 80057e0:	d109      	bne.n	80057f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2228      	movs	r2, #40	; 0x28
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff f827 	bl	8004844 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b28      	cmp	r3, #40	; 0x28
 8005800:	d111      	bne.n	8005826 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <I2C_Slave_STOPF+0x25c>)
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff f828 	bl	8004874 <HAL_I2C_ListenCpltCallback>
}
 8005824:	e014      	b.n	8005850 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	2b22      	cmp	r3, #34	; 0x22
 800582c:	d002      	beq.n	8005834 <I2C_Slave_STOPF+0x234>
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b22      	cmp	r3, #34	; 0x22
 8005832:	d10d      	bne.n	8005850 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fe fffa 	bl	8004844 <HAL_I2C_SlaveRxCpltCallback>
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	08005ea1 	.word	0x08005ea1
 800585c:	ffff0000 	.word	0xffff0000

08005860 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d002      	beq.n	8005882 <I2C_Slave_AF+0x22>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b20      	cmp	r3, #32
 8005880:	d129      	bne.n	80058d6 <I2C_Slave_AF+0x76>
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b28      	cmp	r3, #40	; 0x28
 8005886:	d126      	bne.n	80058d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <I2C_Slave_AF+0xdc>)
 800588c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800589c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fe ffd0 	bl	8004874 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058d4:	e02e      	b.n	8005934 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b21      	cmp	r3, #33	; 0x21
 80058da:	d126      	bne.n	800592a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <I2C_Slave_AF+0xdc>)
 80058e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2221      	movs	r2, #33	; 0x21
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005906:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005910:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005920:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fe ff84 	bl	8004830 <HAL_I2C_SlaveTxCpltCallback>
}
 8005928:	e004      	b.n	8005934 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005932:	615a      	str	r2, [r3, #20]
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	ffff0000 	.word	0xffff0000

08005940 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005956:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005958:	7bbb      	ldrb	r3, [r7, #14]
 800595a:	2b10      	cmp	r3, #16
 800595c:	d002      	beq.n	8005964 <I2C_ITError+0x24>
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d10a      	bne.n	800597a <I2C_ITError+0x3a>
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b22      	cmp	r3, #34	; 0x22
 8005968:	d107      	bne.n	800597a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005978:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005980:	2b28      	cmp	r3, #40	; 0x28
 8005982:	d107      	bne.n	8005994 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2228      	movs	r2, #40	; 0x28
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005992:	e015      	b.n	80059c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a2:	d00a      	beq.n	80059ba <I2C_ITError+0x7a>
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b60      	cmp	r3, #96	; 0x60
 80059a8:	d007      	beq.n	80059ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ce:	d162      	bne.n	8005a96 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d020      	beq.n	8005a30 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	4a6a      	ldr	r2, [pc, #424]	; (8005b9c <I2C_ITError+0x25c>)
 80059f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fd fafa 	bl	8002ff4 <HAL_DMA_Abort_IT>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 8089 	beq.w	8005b1a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4798      	blx	r3
 8005a2e:	e074      	b.n	8005b1a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	4a59      	ldr	r2, [pc, #356]	; (8005b9c <I2C_ITError+0x25c>)
 8005a36:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fd fad9 	bl	8002ff4 <HAL_DMA_Abort_IT>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d068      	beq.n	8005b1a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d10b      	bne.n	8005a6e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a90:	4610      	mov	r0, r2
 8005a92:	4798      	blx	r3
 8005a94:	e041      	b.n	8005b1a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b60      	cmp	r3, #96	; 0x60
 8005aa0:	d125      	bne.n	8005aee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d10b      	bne.n	8005ad6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fe feec 	bl	80048c4 <HAL_I2C_AbortCpltCallback>
 8005aec:	e015      	b.n	8005b1a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d10b      	bne.n	8005b14 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fe fecb 	bl	80048b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10e      	bne.n	8005b48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b56:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d113      	bne.n	8005b94 <I2C_ITError+0x254>
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b28      	cmp	r3, #40	; 0x28
 8005b70:	d110      	bne.n	8005b94 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <I2C_ITError+0x260>)
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fe fe70 	bl	8004874 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	08005ea1 	.word	0x08005ea1
 8005ba0:	ffff0000 	.word	0xffff0000

08005ba4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	4608      	mov	r0, r1
 8005bae:	4611      	mov	r1, r2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	817b      	strh	r3, [r7, #10]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	813b      	strh	r3, [r7, #8]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fa08 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf4:	d103      	bne.n	8005bfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e05f      	b.n	8005cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c02:	897b      	ldrh	r3, [r7, #10]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	492d      	ldr	r1, [pc, #180]	; (8005ccc <I2C_RequestMemoryWrite+0x128>)
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fa40 	bl	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e04c      	b.n	8005cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c40:	6a39      	ldr	r1, [r7, #32]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 faaa 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00d      	beq.n	8005c6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d107      	bne.n	8005c66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e02b      	b.n	8005cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d105      	bne.n	8005c7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	e021      	b.n	8005cc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c7c:	893b      	ldrh	r3, [r7, #8]
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8c:	6a39      	ldr	r1, [r7, #32]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fa84 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00d      	beq.n	8005cb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d107      	bne.n	8005cb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e005      	b.n	8005cc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cb6:	893b      	ldrh	r3, [r7, #8]
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	00010002 	.word	0x00010002

08005cd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	817b      	strh	r3, [r7, #10]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	813b      	strh	r3, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f96a 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d30:	d103      	bne.n	8005d3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e0aa      	b.n	8005e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d3e:	897b      	ldrh	r3, [r7, #10]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	4952      	ldr	r1, [pc, #328]	; (8005e9c <I2C_RequestMemoryRead+0x1cc>)
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f9a2 	bl	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e097      	b.n	8005e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7c:	6a39      	ldr	r1, [r7, #32]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fa0c 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d107      	bne.n	8005da2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e076      	b.n	8005e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d105      	bne.n	8005db8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	611a      	str	r2, [r3, #16]
 8005db6:	e021      	b.n	8005dfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005db8:	893b      	ldrh	r3, [r7, #8]
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc8:	6a39      	ldr	r1, [r7, #32]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f9e6 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00d      	beq.n	8005df2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d107      	bne.n	8005dee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e050      	b.n	8005e94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005df2:	893b      	ldrh	r3, [r7, #8]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfe:	6a39      	ldr	r1, [r7, #32]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f9cb 	bl	800619c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00d      	beq.n	8005e28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d107      	bne.n	8005e24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e035      	b.n	8005e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f8d3 	bl	8005ff0 <I2C_WaitOnFlagUntilTimeout>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00d      	beq.n	8005e6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5e:	d103      	bne.n	8005e68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e013      	b.n	8005e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e6c:	897b      	ldrh	r3, [r7, #10]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	6a3a      	ldr	r2, [r7, #32]
 8005e80:	4906      	ldr	r1, [pc, #24]	; (8005e9c <I2C_RequestMemoryRead+0x1cc>)
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f90b 	bl	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	00010002 	.word	0x00010002

08005ea0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005eba:	4b4b      	ldr	r3, [pc, #300]	; (8005fe8 <I2C_DMAAbort+0x148>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	08db      	lsrs	r3, r3, #3
 8005ec0:	4a4a      	ldr	r2, [pc, #296]	; (8005fec <I2C_DMAAbort+0x14c>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	0a1a      	lsrs	r2, r3, #8
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	00da      	lsls	r2, r3, #3
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005ee6:	e00a      	b.n	8005efe <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efc:	d0ea      	beq.n	8005ed4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f40:	2200      	movs	r2, #0
 8005f42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	2200      	movs	r2, #0
 8005f52:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0201 	bic.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b60      	cmp	r3, #96	; 0x60
 8005f6e:	d10e      	bne.n	8005f8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2200      	movs	r2, #0
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f86:	6978      	ldr	r0, [r7, #20]
 8005f88:	f7fe fc9c 	bl	80048c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f8c:	e027      	b.n	8005fde <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f8e:	7cfb      	ldrb	r3, [r7, #19]
 8005f90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f94:	2b28      	cmp	r3, #40	; 0x28
 8005f96:	d117      	bne.n	8005fc8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2228      	movs	r2, #40	; 0x28
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fc6:	e007      	b.n	8005fd8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	f7fe fc69 	bl	80048b0 <HAL_I2C_ErrorCallback>
}
 8005fde:	bf00      	nop
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000000 	.word	0x20000000
 8005fec:	14f8b589 	.word	0x14f8b589

08005ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006000:	e025      	b.n	800604e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006008:	d021      	beq.n	800604e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600a:	f7fc fd3b 	bl	8002a84 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d302      	bcc.n	8006020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d116      	bne.n	800604e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f043 0220 	orr.w	r2, r3, #32
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e023      	b.n	8006096 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	0c1b      	lsrs	r3, r3, #16
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d10d      	bne.n	8006074 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	bf0c      	ite	eq
 800606a:	2301      	moveq	r3, #1
 800606c:	2300      	movne	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	e00c      	b.n	800608e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	43da      	mvns	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	429a      	cmp	r2, r3
 8006092:	d0b6      	beq.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ac:	e051      	b.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060bc:	d123      	bne.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0204 	orr.w	r2, r3, #4
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e046      	b.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800610c:	d021      	beq.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fc fcb9 	bl	8002a84 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d116      	bne.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f043 0220 	orr.w	r2, r3, #32
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e020      	b.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	d10c      	bne.n	8006176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	43da      	mvns	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	bf14      	ite	ne
 800616e:	2301      	movne	r3, #1
 8006170:	2300      	moveq	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	e00b      	b.n	800618e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	43da      	mvns	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4013      	ands	r3, r2
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	bf14      	ite	ne
 8006188:	2301      	movne	r3, #1
 800618a:	2300      	moveq	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d18d      	bne.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a8:	e02d      	b.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f900 	bl	80063b0 <I2C_IsAcknowledgeFailed>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e02d      	b.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c0:	d021      	beq.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fc fc5f 	bl	8002a84 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d116      	bne.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e007      	b.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d1ca      	bne.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800622a:	e02d      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f8bf 	bl	80063b0 <I2C_IsAcknowledgeFailed>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e02d      	b.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006242:	d021      	beq.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006244:	f7fc fc1e 	bl	8002a84 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d116      	bne.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	f043 0220 	orr.w	r2, r3, #32
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e007      	b.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	2b04      	cmp	r3, #4
 8006294:	d1ca      	bne.n	800622c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80062ac:	4b13      	ldr	r3, [pc, #76]	; (80062fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	08db      	lsrs	r3, r3, #3
 80062b2:	4a13      	ldr	r2, [pc, #76]	; (8006300 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062b4:	fba2 2303 	umull	r2, r3, r2, r3
 80062b8:	0a1a      	lsrs	r2, r3, #8
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f043 0220 	orr.w	r2, r3, #32
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e008      	b.n	80062f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ec:	d0e9      	beq.n	80062c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000000 	.word	0x20000000
 8006300:	14f8b589 	.word	0x14f8b589

08006304 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006310:	e042      	b.n	8006398 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b10      	cmp	r3, #16
 800631e:	d119      	bne.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0210 	mvn.w	r2, #16
 8006328:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e029      	b.n	80063a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006354:	f7fc fb96 	bl	8002a84 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	429a      	cmp	r2, r3
 8006362:	d302      	bcc.n	800636a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d116      	bne.n	8006398 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	f043 0220 	orr.w	r2, r3, #32
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e007      	b.n	80063a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d1b5      	bne.n	8006312 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c6:	d11b      	bne.n	8006400 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	f043 0204 	orr.w	r2, r3, #4
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800641e:	d103      	bne.n	8006428 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006426:	e007      	b.n	8006438 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006430:	d102      	bne.n	8006438 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2208      	movs	r2, #8
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e267      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d075      	beq.n	800654e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006462:	4b88      	ldr	r3, [pc, #544]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	2b04      	cmp	r3, #4
 800646c:	d00c      	beq.n	8006488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800646e:	4b85      	ldr	r3, [pc, #532]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006476:	2b08      	cmp	r3, #8
 8006478:	d112      	bne.n	80064a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800647a:	4b82      	ldr	r3, [pc, #520]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006486:	d10b      	bne.n	80064a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006488:	4b7e      	ldr	r3, [pc, #504]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d05b      	beq.n	800654c <HAL_RCC_OscConfig+0x108>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d157      	bne.n	800654c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e242      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a8:	d106      	bne.n	80064b8 <HAL_RCC_OscConfig+0x74>
 80064aa:	4b76      	ldr	r3, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a75      	ldr	r2, [pc, #468]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e01d      	b.n	80064f4 <HAL_RCC_OscConfig+0xb0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c0:	d10c      	bne.n	80064dc <HAL_RCC_OscConfig+0x98>
 80064c2:	4b70      	ldr	r3, [pc, #448]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a6f      	ldr	r2, [pc, #444]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b6d      	ldr	r3, [pc, #436]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a6c      	ldr	r2, [pc, #432]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e00b      	b.n	80064f4 <HAL_RCC_OscConfig+0xb0>
 80064dc:	4b69      	ldr	r3, [pc, #420]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a68      	ldr	r2, [pc, #416]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	4b66      	ldr	r3, [pc, #408]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a65      	ldr	r2, [pc, #404]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fc:	f7fc fac2 	bl	8002a84 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006504:	f7fc fabe 	bl	8002a84 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	; 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e207      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006516:	4b5b      	ldr	r3, [pc, #364]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0xc0>
 8006522:	e014      	b.n	800654e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006524:	f7fc faae 	bl	8002a84 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800652c:	f7fc faaa 	bl	8002a84 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	; 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e1f3      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800653e:	4b51      	ldr	r3, [pc, #324]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0xe8>
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d063      	beq.n	8006622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800655a:	4b4a      	ldr	r3, [pc, #296]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 030c 	and.w	r3, r3, #12
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006566:	4b47      	ldr	r3, [pc, #284]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800656e:	2b08      	cmp	r3, #8
 8006570:	d11c      	bne.n	80065ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006572:	4b44      	ldr	r3, [pc, #272]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d116      	bne.n	80065ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657e:	4b41      	ldr	r3, [pc, #260]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_RCC_OscConfig+0x152>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d001      	beq.n	8006596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e1c7      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006596:	4b3b      	ldr	r3, [pc, #236]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4937      	ldr	r1, [pc, #220]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065aa:	e03a      	b.n	8006622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d020      	beq.n	80065f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b4:	4b34      	ldr	r3, [pc, #208]	; (8006688 <HAL_RCC_OscConfig+0x244>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ba:	f7fc fa63 	bl	8002a84 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065c2:	f7fc fa5f 	bl	8002a84 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e1a8      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d4:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e0:	4b28      	ldr	r3, [pc, #160]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	4925      	ldr	r1, [pc, #148]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	600b      	str	r3, [r1, #0]
 80065f4:	e015      	b.n	8006622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <HAL_RCC_OscConfig+0x244>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fc fa42 	bl	8002a84 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006604:	f7fc fa3e 	bl	8002a84 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e187      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006616:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d036      	beq.n	800669c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d016      	beq.n	8006664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006636:	4b15      	ldr	r3, [pc, #84]	; (800668c <HAL_RCC_OscConfig+0x248>)
 8006638:	2201      	movs	r2, #1
 800663a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7fc fa22 	bl	8002a84 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006644:	f7fc fa1e 	bl	8002a84 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e167      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0x200>
 8006662:	e01b      	b.n	800669c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <HAL_RCC_OscConfig+0x248>)
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800666a:	f7fc fa0b 	bl	8002a84 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006670:	e00e      	b.n	8006690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006672:	f7fc fa07 	bl	8002a84 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d907      	bls.n	8006690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e150      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
 8006684:	40023800 	.word	0x40023800
 8006688:	42470000 	.word	0x42470000
 800668c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006690:	4b88      	ldr	r3, [pc, #544]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1ea      	bne.n	8006672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8097 	beq.w	80067d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ae:	4b81      	ldr	r3, [pc, #516]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10f      	bne.n	80066da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	4b7d      	ldr	r3, [pc, #500]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	4a7c      	ldr	r2, [pc, #496]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80066c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ca:	4b7a      	ldr	r3, [pc, #488]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d2:	60bb      	str	r3, [r7, #8]
 80066d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066d6:	2301      	movs	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066da:	4b77      	ldr	r3, [pc, #476]	; (80068b8 <HAL_RCC_OscConfig+0x474>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d118      	bne.n	8006718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066e6:	4b74      	ldr	r3, [pc, #464]	; (80068b8 <HAL_RCC_OscConfig+0x474>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a73      	ldr	r2, [pc, #460]	; (80068b8 <HAL_RCC_OscConfig+0x474>)
 80066ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066f2:	f7fc f9c7 	bl	8002a84 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066fa:	f7fc f9c3 	bl	8002a84 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e10c      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670c:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCC_OscConfig+0x474>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0f0      	beq.n	80066fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d106      	bne.n	800672e <HAL_RCC_OscConfig+0x2ea>
 8006720:	4b64      	ldr	r3, [pc, #400]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006724:	4a63      	ldr	r2, [pc, #396]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	6713      	str	r3, [r2, #112]	; 0x70
 800672c:	e01c      	b.n	8006768 <HAL_RCC_OscConfig+0x324>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b05      	cmp	r3, #5
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0x30c>
 8006736:	4b5f      	ldr	r3, [pc, #380]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	4a5e      	ldr	r2, [pc, #376]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 800673c:	f043 0304 	orr.w	r3, r3, #4
 8006740:	6713      	str	r3, [r2, #112]	; 0x70
 8006742:	4b5c      	ldr	r3, [pc, #368]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006746:	4a5b      	ldr	r2, [pc, #364]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	6713      	str	r3, [r2, #112]	; 0x70
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0x324>
 8006750:	4b58      	ldr	r3, [pc, #352]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	4a57      	ldr	r2, [pc, #348]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	6713      	str	r3, [r2, #112]	; 0x70
 800675c:	4b55      	ldr	r3, [pc, #340]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	4a54      	ldr	r2, [pc, #336]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006762:	f023 0304 	bic.w	r3, r3, #4
 8006766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006770:	f7fc f988 	bl	8002a84 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006776:	e00a      	b.n	800678e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006778:	f7fc f984 	bl	8002a84 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	; 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e0cb      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678e:	4b49      	ldr	r3, [pc, #292]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0ee      	beq.n	8006778 <HAL_RCC_OscConfig+0x334>
 800679a:	e014      	b.n	80067c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679c:	f7fc f972 	bl	8002a84 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a2:	e00a      	b.n	80067ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a4:	f7fc f96e 	bl	8002a84 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e0b5      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ba:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1ee      	bne.n	80067a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d105      	bne.n	80067d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067cc:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	4a38      	ldr	r2, [pc, #224]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80067d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80a1 	beq.w	8006924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067e2:	4b34      	ldr	r3, [pc, #208]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d05c      	beq.n	80068a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d141      	bne.n	800687a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f6:	4b31      	ldr	r3, [pc, #196]	; (80068bc <HAL_RCC_OscConfig+0x478>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fc:	f7fc f942 	bl	8002a84 <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006804:	f7fc f93e 	bl	8002a84 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e087      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006816:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	019b      	lsls	r3, r3, #6
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	3b01      	subs	r3, #1
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	491b      	ldr	r1, [pc, #108]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006848:	4313      	orrs	r3, r2
 800684a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <HAL_RCC_OscConfig+0x478>)
 800684e:	2201      	movs	r2, #1
 8006850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006852:	f7fc f917 	bl	8002a84 <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800685a:	f7fc f913 	bl	8002a84 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e05c      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800686c:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCC_OscConfig+0x416>
 8006878:	e054      	b.n	8006924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800687a:	4b10      	ldr	r3, [pc, #64]	; (80068bc <HAL_RCC_OscConfig+0x478>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006880:	f7fc f900 	bl	8002a84 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006888:	f7fc f8fc 	bl	8002a84 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e045      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800689a:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x444>
 80068a6:	e03d      	b.n	8006924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d107      	bne.n	80068c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e038      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
 80068b4:	40023800 	.word	0x40023800
 80068b8:	40007000 	.word	0x40007000
 80068bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068c0:	4b1b      	ldr	r3, [pc, #108]	; (8006930 <HAL_RCC_OscConfig+0x4ec>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d028      	beq.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068d8:	429a      	cmp	r2, r3
 80068da:	d121      	bne.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d11a      	bne.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068f0:	4013      	ands	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d111      	bne.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	3b01      	subs	r3, #1
 800690a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800690c:	429a      	cmp	r2, r3
 800690e:	d107      	bne.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d001      	beq.n	8006924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40023800 	.word	0x40023800

08006934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0cc      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006948:	4b68      	ldr	r3, [pc, #416]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d90c      	bls.n	8006970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006956:	4b65      	ldr	r3, [pc, #404]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800695e:	4b63      	ldr	r3, [pc, #396]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d001      	beq.n	8006970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0b8      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d020      	beq.n	80069be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006988:	4b59      	ldr	r3, [pc, #356]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4a58      	ldr	r2, [pc, #352]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069a0:	4b53      	ldr	r3, [pc, #332]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	4a52      	ldr	r2, [pc, #328]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ac:	4b50      	ldr	r3, [pc, #320]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	494d      	ldr	r1, [pc, #308]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d044      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d107      	bne.n	80069e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069d2:	4b47      	ldr	r3, [pc, #284]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d119      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e07f      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d003      	beq.n	80069f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d107      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f2:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e06f      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a02:	4b3b      	ldr	r3, [pc, #236]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e067      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a12:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f023 0203 	bic.w	r2, r3, #3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	4934      	ldr	r1, [pc, #208]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a24:	f7fc f82e 	bl	8002a84 <HAL_GetTick>
 8006a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2a:	e00a      	b.n	8006a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a2c:	f7fc f82a 	bl	8002a84 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e04f      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a42:	4b2b      	ldr	r3, [pc, #172]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 020c 	and.w	r2, r3, #12
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d1eb      	bne.n	8006a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a54:	4b25      	ldr	r3, [pc, #148]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d20c      	bcs.n	8006a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a62:	4b22      	ldr	r3, [pc, #136]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6a:	4b20      	ldr	r3, [pc, #128]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e032      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a88:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4916      	ldr	r1, [pc, #88]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	490e      	ldr	r1, [pc, #56]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aba:	f000 f821 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	091b      	lsrs	r3, r3, #4
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	490a      	ldr	r1, [pc, #40]	; (8006af4 <HAL_RCC_ClockConfig+0x1c0>)
 8006acc:	5ccb      	ldrb	r3, [r1, r3]
 8006ace:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad2:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ad6:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fb ff8e 	bl	80029fc <HAL_InitTick>

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	40023c00 	.word	0x40023c00
 8006af0:	40023800 	.word	0x40023800
 8006af4:	0800c4b4 	.word	0x0800c4b4
 8006af8:	20000000 	.word	0x20000000
 8006afc:	20000004 	.word	0x20000004

08006b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b04:	b094      	sub	sp, #80	; 0x50
 8006b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b10:	2300      	movs	r3, #0
 8006b12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b18:	4b79      	ldr	r3, [pc, #484]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 030c 	and.w	r3, r3, #12
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d00d      	beq.n	8006b40 <HAL_RCC_GetSysClockFreq+0x40>
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	f200 80e1 	bhi.w	8006cec <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0x34>
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d003      	beq.n	8006b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8006b32:	e0db      	b.n	8006cec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b34:	4b73      	ldr	r3, [pc, #460]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b38:	e0db      	b.n	8006cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b3a:	4b73      	ldr	r3, [pc, #460]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b3e:	e0d8      	b.n	8006cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b40:	4b6f      	ldr	r3, [pc, #444]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b4a:	4b6d      	ldr	r3, [pc, #436]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d063      	beq.n	8006c1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b56:	4b6a      	ldr	r3, [pc, #424]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	099b      	lsrs	r3, r3, #6
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b68:	633b      	str	r3, [r7, #48]	; 0x30
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b72:	4622      	mov	r2, r4
 8006b74:	462b      	mov	r3, r5
 8006b76:	f04f 0000 	mov.w	r0, #0
 8006b7a:	f04f 0100 	mov.w	r1, #0
 8006b7e:	0159      	lsls	r1, r3, #5
 8006b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b84:	0150      	lsls	r0, r2, #5
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	1a51      	subs	r1, r2, r1
 8006b8e:	6139      	str	r1, [r7, #16]
 8006b90:	4629      	mov	r1, r5
 8006b92:	eb63 0301 	sbc.w	r3, r3, r1
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	018b      	lsls	r3, r1, #6
 8006ba8:	4651      	mov	r1, sl
 8006baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bae:	4651      	mov	r1, sl
 8006bb0:	018a      	lsls	r2, r1, #6
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	ebb2 0801 	subs.w	r8, r2, r1
 8006bb8:	4659      	mov	r1, fp
 8006bba:	eb63 0901 	sbc.w	r9, r3, r1
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	f04f 0300 	mov.w	r3, #0
 8006bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bd2:	4690      	mov	r8, r2
 8006bd4:	4699      	mov	r9, r3
 8006bd6:	4623      	mov	r3, r4
 8006bd8:	eb18 0303 	adds.w	r3, r8, r3
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	462b      	mov	r3, r5
 8006be0:	eb49 0303 	adc.w	r3, r9, r3
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	024b      	lsls	r3, r1, #9
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	024a      	lsls	r2, r1, #9
 8006c00:	4610      	mov	r0, r2
 8006c02:	4619      	mov	r1, r3
 8006c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c06:	2200      	movs	r2, #0
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c10:	f7fa f81a 	bl	8000c48 <__aeabi_uldivmod>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4613      	mov	r3, r2
 8006c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c1c:	e058      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c1e:	4b38      	ldr	r3, [pc, #224]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	099b      	lsrs	r3, r3, #6
 8006c24:	2200      	movs	r2, #0
 8006c26:	4618      	mov	r0, r3
 8006c28:	4611      	mov	r1, r2
 8006c2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c2e:	623b      	str	r3, [r7, #32]
 8006c30:	2300      	movs	r3, #0
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
 8006c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	f04f 0000 	mov.w	r0, #0
 8006c40:	f04f 0100 	mov.w	r1, #0
 8006c44:	0159      	lsls	r1, r3, #5
 8006c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c4a:	0150      	lsls	r0, r2, #5
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4641      	mov	r1, r8
 8006c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c56:	4649      	mov	r1, r9
 8006c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c70:	ebb2 040a 	subs.w	r4, r2, sl
 8006c74:	eb63 050b 	sbc.w	r5, r3, fp
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	00eb      	lsls	r3, r5, #3
 8006c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c86:	00e2      	lsls	r2, r4, #3
 8006c88:	4614      	mov	r4, r2
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	4643      	mov	r3, r8
 8006c8e:	18e3      	adds	r3, r4, r3
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	464b      	mov	r3, r9
 8006c94:	eb45 0303 	adc.w	r3, r5, r3
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	f04f 0200 	mov.w	r2, #0
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	028b      	lsls	r3, r1, #10
 8006caa:	4621      	mov	r1, r4
 8006cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	028a      	lsls	r2, r1, #10
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cba:	2200      	movs	r2, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	61fa      	str	r2, [r7, #28]
 8006cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cc4:	f7f9 ffc0 	bl	8000c48 <__aeabi_uldivmod>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4613      	mov	r3, r2
 8006cce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	0c1b      	lsrs	r3, r3, #16
 8006cd6:	f003 0303 	and.w	r3, r3, #3
 8006cda:	3301      	adds	r3, #1
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cea:	e002      	b.n	8006cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3750      	adds	r7, #80	; 0x50
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cfe:	bf00      	nop
 8006d00:	40023800 	.word	0x40023800
 8006d04:	00f42400 	.word	0x00f42400
 8006d08:	007a1200 	.word	0x007a1200

08006d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d10:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d12:	681b      	ldr	r3, [r3, #0]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000000 	.word	0x20000000

08006d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d28:	f7ff fff0 	bl	8006d0c <HAL_RCC_GetHCLKFreq>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	0a9b      	lsrs	r3, r3, #10
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	4903      	ldr	r1, [pc, #12]	; (8006d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d3a:	5ccb      	ldrb	r3, [r1, r3]
 8006d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40023800 	.word	0x40023800
 8006d48:	0800c4c4 	.word	0x0800c4c4

08006d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d50:	f7ff ffdc 	bl	8006d0c <HAL_RCC_GetHCLKFreq>
 8006d54:	4602      	mov	r2, r0
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	0b5b      	lsrs	r3, r3, #13
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	4903      	ldr	r1, [pc, #12]	; (8006d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d62:	5ccb      	ldrb	r3, [r1, r3]
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	0800c4c4 	.word	0x0800c4c4

08006d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e041      	b.n	8006e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fb fb68 	bl	8002470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f000 fb4a 	bl	800744c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e041      	b.n	8006ea8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f839 	bl	8006eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4610      	mov	r0, r2
 8006e52:	f000 fafb 	bl	800744c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d122      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d11b      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0202 	mvn.w	r2, #2
 8006ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa81 	bl	800740e <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa73 	bl	80073fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fa84 	bl	8007422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0304 	and.w	r3, r3, #4
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d122      	bne.n	8006f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d11b      	bne.n	8006f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0204 	mvn.w	r2, #4
 8006f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa57 	bl	800740e <HAL_TIM_IC_CaptureCallback>
 8006f60:	e005      	b.n	8006f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa49 	bl	80073fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa5a 	bl	8007422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d122      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d11b      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0208 	mvn.w	r2, #8
 8006f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa2d 	bl	800740e <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa1f 	bl	80073fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fa30 	bl	8007422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b10      	cmp	r3, #16
 8006fd4:	d122      	bne.n	800701c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d11b      	bne.n	800701c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0210 	mvn.w	r2, #16
 8006fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa03 	bl	800740e <HAL_TIM_IC_CaptureCallback>
 8007008:	e005      	b.n	8007016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f9f5 	bl	80073fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fa06 	bl	8007422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b01      	cmp	r3, #1
 8007028:	d10e      	bne.n	8007048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d107      	bne.n	8007048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0201 	mvn.w	r2, #1
 8007040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f9cf 	bl	80073e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d10e      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007060:	2b80      	cmp	r3, #128	; 0x80
 8007062:	d107      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fdae 	bl	8007bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d10e      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b40      	cmp	r3, #64	; 0x40
 800708e:	d107      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f9cb 	bl	8007436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d10e      	bne.n	80070cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d107      	bne.n	80070cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f06f 0220 	mvn.w	r2, #32
 80070c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fd78 	bl	8007bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e0ae      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b0c      	cmp	r3, #12
 80070fe:	f200 809f 	bhi.w	8007240 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	0800713d 	.word	0x0800713d
 800710c:	08007241 	.word	0x08007241
 8007110:	08007241 	.word	0x08007241
 8007114:	08007241 	.word	0x08007241
 8007118:	0800717d 	.word	0x0800717d
 800711c:	08007241 	.word	0x08007241
 8007120:	08007241 	.word	0x08007241
 8007124:	08007241 	.word	0x08007241
 8007128:	080071bf 	.word	0x080071bf
 800712c:	08007241 	.word	0x08007241
 8007130:	08007241 	.word	0x08007241
 8007134:	08007241 	.word	0x08007241
 8007138:	080071ff 	.word	0x080071ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fa22 	bl	800758c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0208 	orr.w	r2, r2, #8
 8007156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0204 	bic.w	r2, r2, #4
 8007166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6999      	ldr	r1, [r3, #24]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	619a      	str	r2, [r3, #24]
      break;
 800717a:	e064      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fa72 	bl	800766c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	619a      	str	r2, [r3, #24]
      break;
 80071bc:	e043      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fac7 	bl	8007758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0208 	orr.w	r2, r2, #8
 80071d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0204 	bic.w	r2, r2, #4
 80071e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69d9      	ldr	r1, [r3, #28]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	61da      	str	r2, [r3, #28]
      break;
 80071fc:	e023      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fb1b 	bl	8007840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69d9      	ldr	r1, [r3, #28]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	021a      	lsls	r2, r3, #8
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	61da      	str	r2, [r3, #28]
      break;
 800723e:	e002      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
      break;
 8007244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIM_ConfigClockSource+0x1c>
 8007270:	2302      	movs	r3, #2
 8007272:	e0b4      	b.n	80073de <HAL_TIM_ConfigClockSource+0x186>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ac:	d03e      	beq.n	800732c <HAL_TIM_ConfigClockSource+0xd4>
 80072ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b2:	f200 8087 	bhi.w	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ba:	f000 8086 	beq.w	80073ca <HAL_TIM_ConfigClockSource+0x172>
 80072be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c2:	d87f      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072c4:	2b70      	cmp	r3, #112	; 0x70
 80072c6:	d01a      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0xa6>
 80072c8:	2b70      	cmp	r3, #112	; 0x70
 80072ca:	d87b      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072cc:	2b60      	cmp	r3, #96	; 0x60
 80072ce:	d050      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x11a>
 80072d0:	2b60      	cmp	r3, #96	; 0x60
 80072d2:	d877      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072d4:	2b50      	cmp	r3, #80	; 0x50
 80072d6:	d03c      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0xfa>
 80072d8:	2b50      	cmp	r3, #80	; 0x50
 80072da:	d873      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072dc:	2b40      	cmp	r3, #64	; 0x40
 80072de:	d058      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x13a>
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d86f      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e4:	2b30      	cmp	r3, #48	; 0x30
 80072e6:	d064      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072e8:	2b30      	cmp	r3, #48	; 0x30
 80072ea:	d86b      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d060      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d867      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d05c      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d05a      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072fc:	e062      	b.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f000 fb67 	bl	80079e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	609a      	str	r2, [r3, #8]
      break;
 800732a:	e04f      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6899      	ldr	r1, [r3, #8]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f000 fb50 	bl	80079e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800734e:	609a      	str	r2, [r3, #8]
      break;
 8007350:	e03c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	461a      	mov	r2, r3
 8007360:	f000 fac4 	bl	80078ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2150      	movs	r1, #80	; 0x50
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fb1d 	bl	80079aa <TIM_ITRx_SetConfig>
      break;
 8007370:	e02c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fae3 	bl	800794a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2160      	movs	r1, #96	; 0x60
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fb0d 	bl	80079aa <TIM_ITRx_SetConfig>
      break;
 8007390:	e01c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	461a      	mov	r2, r3
 80073a0:	f000 faa4 	bl	80078ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2140      	movs	r1, #64	; 0x40
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fafd 	bl	80079aa <TIM_ITRx_SetConfig>
      break;
 80073b0:	e00c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f000 faf4 	bl	80079aa <TIM_ITRx_SetConfig>
      break;
 80073c2:	e003      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	e000      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
	...

0800744c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a40      	ldr	r2, [pc, #256]	; (8007560 <TIM_Base_SetConfig+0x114>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d013      	beq.n	800748c <TIM_Base_SetConfig+0x40>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746a:	d00f      	beq.n	800748c <TIM_Base_SetConfig+0x40>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a3d      	ldr	r2, [pc, #244]	; (8007564 <TIM_Base_SetConfig+0x118>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00b      	beq.n	800748c <TIM_Base_SetConfig+0x40>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a3c      	ldr	r2, [pc, #240]	; (8007568 <TIM_Base_SetConfig+0x11c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d007      	beq.n	800748c <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a3b      	ldr	r2, [pc, #236]	; (800756c <TIM_Base_SetConfig+0x120>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d003      	beq.n	800748c <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a3a      	ldr	r2, [pc, #232]	; (8007570 <TIM_Base_SetConfig+0x124>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d108      	bne.n	800749e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2f      	ldr	r2, [pc, #188]	; (8007560 <TIM_Base_SetConfig+0x114>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d02b      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ac:	d027      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2c      	ldr	r2, [pc, #176]	; (8007564 <TIM_Base_SetConfig+0x118>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d023      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a2b      	ldr	r2, [pc, #172]	; (8007568 <TIM_Base_SetConfig+0x11c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01f      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2a      	ldr	r2, [pc, #168]	; (800756c <TIM_Base_SetConfig+0x120>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01b      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a29      	ldr	r2, [pc, #164]	; (8007570 <TIM_Base_SetConfig+0x124>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d017      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a28      	ldr	r2, [pc, #160]	; (8007574 <TIM_Base_SetConfig+0x128>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d013      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a27      	ldr	r2, [pc, #156]	; (8007578 <TIM_Base_SetConfig+0x12c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00f      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a26      	ldr	r2, [pc, #152]	; (800757c <TIM_Base_SetConfig+0x130>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00b      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a25      	ldr	r2, [pc, #148]	; (8007580 <TIM_Base_SetConfig+0x134>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d007      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a24      	ldr	r2, [pc, #144]	; (8007584 <TIM_Base_SetConfig+0x138>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d003      	beq.n	80074fe <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a23      	ldr	r2, [pc, #140]	; (8007588 <TIM_Base_SetConfig+0x13c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d108      	bne.n	8007510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4313      	orrs	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a0a      	ldr	r2, [pc, #40]	; (8007560 <TIM_Base_SetConfig+0x114>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d003      	beq.n	8007544 <TIM_Base_SetConfig+0xf8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a0c      	ldr	r2, [pc, #48]	; (8007570 <TIM_Base_SetConfig+0x124>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d103      	bne.n	800754c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	615a      	str	r2, [r3, #20]
}
 8007552:	bf00      	nop
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40010000 	.word	0x40010000
 8007564:	40000400 	.word	0x40000400
 8007568:	40000800 	.word	0x40000800
 800756c:	40000c00 	.word	0x40000c00
 8007570:	40010400 	.word	0x40010400
 8007574:	40014000 	.word	0x40014000
 8007578:	40014400 	.word	0x40014400
 800757c:	40014800 	.word	0x40014800
 8007580:	40001800 	.word	0x40001800
 8007584:	40001c00 	.word	0x40001c00
 8007588:	40002000 	.word	0x40002000

0800758c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	f023 0201 	bic.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0303 	bic.w	r3, r3, #3
 80075c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f023 0302 	bic.w	r3, r3, #2
 80075d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a20      	ldr	r2, [pc, #128]	; (8007664 <TIM_OC1_SetConfig+0xd8>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <TIM_OC1_SetConfig+0x64>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a1f      	ldr	r2, [pc, #124]	; (8007668 <TIM_OC1_SetConfig+0xdc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d10c      	bne.n	800760a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f023 0308 	bic.w	r3, r3, #8
 80075f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f023 0304 	bic.w	r3, r3, #4
 8007608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <TIM_OC1_SetConfig+0xd8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <TIM_OC1_SetConfig+0x8e>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a14      	ldr	r2, [pc, #80]	; (8007668 <TIM_OC1_SetConfig+0xdc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d111      	bne.n	800763e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	4313      	orrs	r3, r2
 800763c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	621a      	str	r2, [r3, #32]
}
 8007658:	bf00      	nop
 800765a:	371c      	adds	r7, #28
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40010000 	.word	0x40010000
 8007668:	40010400 	.word	0x40010400

0800766c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f023 0210 	bic.w	r2, r3, #16
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0320 	bic.w	r3, r3, #32
 80076b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a22      	ldr	r2, [pc, #136]	; (8007750 <TIM_OC2_SetConfig+0xe4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_OC2_SetConfig+0x68>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a21      	ldr	r2, [pc, #132]	; (8007754 <TIM_OC2_SetConfig+0xe8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d10d      	bne.n	80076f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a17      	ldr	r2, [pc, #92]	; (8007750 <TIM_OC2_SetConfig+0xe4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_OC2_SetConfig+0x94>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a16      	ldr	r2, [pc, #88]	; (8007754 <TIM_OC2_SetConfig+0xe8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d113      	bne.n	8007728 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800770e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	621a      	str	r2, [r3, #32]
}
 8007742:	bf00      	nop
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40010000 	.word	0x40010000
 8007754:	40010400 	.word	0x40010400

08007758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a21      	ldr	r2, [pc, #132]	; (8007838 <TIM_OC3_SetConfig+0xe0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_OC3_SetConfig+0x66>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a20      	ldr	r2, [pc, #128]	; (800783c <TIM_OC3_SetConfig+0xe4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d10d      	bne.n	80077da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a16      	ldr	r2, [pc, #88]	; (8007838 <TIM_OC3_SetConfig+0xe0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_OC3_SetConfig+0x92>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a15      	ldr	r2, [pc, #84]	; (800783c <TIM_OC3_SetConfig+0xe4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d113      	bne.n	8007812 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	4313      	orrs	r3, r2
 8007804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	621a      	str	r2, [r3, #32]
}
 800782c:	bf00      	nop
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	40010000 	.word	0x40010000
 800783c:	40010400 	.word	0x40010400

08007840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800788a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	031b      	lsls	r3, r3, #12
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a12      	ldr	r2, [pc, #72]	; (80078e4 <TIM_OC4_SetConfig+0xa4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d003      	beq.n	80078a8 <TIM_OC4_SetConfig+0x68>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a11      	ldr	r2, [pc, #68]	; (80078e8 <TIM_OC4_SetConfig+0xa8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d109      	bne.n	80078bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	019b      	lsls	r3, r3, #6
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	621a      	str	r2, [r3, #32]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40010400 	.word	0x40010400

080078ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f023 0201 	bic.w	r2, r3, #1
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f023 030a 	bic.w	r3, r3, #10
 8007928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4313      	orrs	r3, r2
 8007930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800794a:	b480      	push	{r7}
 800794c:	b087      	sub	sp, #28
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f023 0210 	bic.w	r2, r3, #16
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	031b      	lsls	r3, r3, #12
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	621a      	str	r2, [r3, #32]
}
 800799e:	bf00      	nop
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f043 0307 	orr.w	r3, r3, #7
 80079cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	609a      	str	r2, [r3, #8]
}
 80079d4:	bf00      	nop
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	021a      	lsls	r2, r3, #8
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	431a      	orrs	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	609a      	str	r2, [r3, #8]
}
 8007a14:	bf00      	nop
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e05a      	b.n	8007aee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a21      	ldr	r2, [pc, #132]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d022      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a84:	d01d      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a1d      	ldr	r2, [pc, #116]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d018      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a1b      	ldr	r2, [pc, #108]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d013      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1a      	ldr	r2, [pc, #104]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d00e      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d009      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d004      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d10c      	bne.n	8007adc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40010000 	.word	0x40010000
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800
 8007b08:	40000c00 	.word	0x40000c00
 8007b0c:	40010400 	.word	0x40010400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	40001800 	.word	0x40001800

08007b18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e03d      	b.n	8007bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e03f      	b.n	8007c76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fa fcce 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2224      	movs	r2, #36	; 0x24
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 ff2f 	bl	8008a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695a      	ldr	r2, [r3, #20]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08c      	sub	sp, #48	; 0x30
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d165      	bne.n	8007d66 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_UART_Transmit_DMA+0x26>
 8007ca0:	88fb      	ldrh	r3, [r7, #6]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e05e      	b.n	8007d68 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_UART_Transmit_DMA+0x38>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e057      	b.n	8007d68 <HAL_UART_Transmit_DMA+0xe8>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2221      	movs	r2, #33	; 0x21
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	4a22      	ldr	r2, [pc, #136]	; (8007d70 <HAL_UART_Transmit_DMA+0xf0>)
 8007ce6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cec:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <HAL_UART_Transmit_DMA+0xf4>)
 8007cee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf4:	4a20      	ldr	r2, [pc, #128]	; (8007d78 <HAL_UART_Transmit_DMA+0xf8>)
 8007cf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d00:	f107 0308 	add.w	r3, r7, #8
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3304      	adds	r3, #4
 8007d14:	461a      	mov	r2, r3
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	f7fb f8a4 	bl	8002e64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d24:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3314      	adds	r3, #20
 8007d34:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3314      	adds	r3, #20
 8007d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4e:	627a      	str	r2, [r7, #36]	; 0x24
 8007d50:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6a39      	ldr	r1, [r7, #32]
 8007d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e5      	bne.n	8007d2e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e000      	b.n	8007d68 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007d66:	2302      	movs	r3, #2
  }
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3730      	adds	r7, #48	; 0x30
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	08008325 	.word	0x08008325
 8007d74:	080083bf 	.word	0x080083bf
 8007d78:	08008537 	.word	0x08008537

08007d7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d11d      	bne.n	8007dd2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_UART_Receive_DMA+0x26>
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e016      	b.n	8007dd4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_UART_Receive_DMA+0x38>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e00f      	b.n	8007dd4 <HAL_UART_Receive_DMA+0x58>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fbff 	bl	80085cc <UART_Start_Receive_DMA>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	e000      	b.n	8007dd4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
  }
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b0ba      	sub	sp, #232	; 0xe8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10f      	bne.n	8007e42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <HAL_UART_IRQHandler+0x66>
 8007e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fd6b 	bl	8008916 <UART_Receive_IT>
      return;
 8007e40:	e256      	b.n	80082f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 80de 	beq.w	8008008 <HAL_UART_IRQHandler+0x22c>
 8007e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80d1 	beq.w	8008008 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <HAL_UART_IRQHandler+0xae>
 8007e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	f043 0201 	orr.w	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <HAL_UART_IRQHandler+0xd2>
 8007e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	f043 0202 	orr.w	r2, r3, #2
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <HAL_UART_IRQHandler+0xf6>
 8007eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	f043 0204 	orr.w	r2, r3, #4
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed6:	f003 0308 	and.w	r3, r3, #8
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d011      	beq.n	8007f02 <HAL_UART_IRQHandler+0x126>
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d105      	bne.n	8007ef6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	f043 0208 	orr.w	r2, r3, #8
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 81ed 	beq.w	80082e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f10:	f003 0320 	and.w	r3, r3, #32
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d008      	beq.n	8007f2a <HAL_UART_IRQHandler+0x14e>
 8007f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fcf6 	bl	8008916 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f34:	2b40      	cmp	r3, #64	; 0x40
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d103      	bne.n	8007f56 <HAL_UART_IRQHandler+0x17a>
 8007f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d04f      	beq.n	8007ff6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fbfe 	bl	8008758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f66:	2b40      	cmp	r3, #64	; 0x40
 8007f68:	d141      	bne.n	8007fee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3314      	adds	r3, #20
 8007f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3314      	adds	r3, #20
 8007f92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1d9      	bne.n	8007f6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d013      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	4a7d      	ldr	r2, [pc, #500]	; (80081b8 <HAL_UART_IRQHandler+0x3dc>)
 8007fc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fb f812 	bl	8002ff4 <HAL_DMA_Abort_IT>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d016      	beq.n	8008004 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	e00e      	b.n	8008004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f986 	bl	80082f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	e00a      	b.n	8008004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f982 	bl	80082f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff4:	e006      	b.n	8008004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f97e 	bl	80082f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008002:	e170      	b.n	80082e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008004:	bf00      	nop
    return;
 8008006:	e16e      	b.n	80082e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800c:	2b01      	cmp	r3, #1
 800800e:	f040 814a 	bne.w	80082a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 8143 	beq.w	80082a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 813c 	beq.w	80082a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	60bb      	str	r3, [r7, #8]
 8008042:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	f040 80b4 	bne.w	80081bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008060:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 8140 	beq.w	80082ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800806e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008072:	429a      	cmp	r2, r3
 8008074:	f080 8139 	bcs.w	80082ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800807e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808a:	f000 8088 	beq.w	800819e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	330c      	adds	r3, #12
 80080b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1d9      	bne.n	800808e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3314      	adds	r3, #20
 80080e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3314      	adds	r3, #20
 80080fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008102:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008106:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e1      	bne.n	80080da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3314      	adds	r3, #20
 800811c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800812c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3314      	adds	r3, #20
 8008136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800813a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800813c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008140:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e3      	bne.n	8008116 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	330c      	adds	r3, #12
 8008162:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800816c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800816e:	f023 0310 	bic.w	r3, r3, #16
 8008172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	330c      	adds	r3, #12
 800817c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008180:	65ba      	str	r2, [r7, #88]	; 0x58
 8008182:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008184:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008186:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008188:	e841 2300 	strex	r3, r2, [r1]
 800818c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800818e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e3      	bne.n	800815c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	4618      	mov	r0, r3
 800819a:	f7fa febb 	bl	8002f14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f8ac 	bl	800830c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081b4:	e099      	b.n	80082ea <HAL_UART_IRQHandler+0x50e>
 80081b6:	bf00      	nop
 80081b8:	0800881f 	.word	0x0800881f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 808b 	beq.w	80082ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 8086 	beq.w	80082ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	330c      	adds	r3, #12
 8008202:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008206:	647a      	str	r2, [r7, #68]	; 0x44
 8008208:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800820c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e3      	bne.n	80081e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3314      	adds	r3, #20
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	623b      	str	r3, [r7, #32]
   return(result);
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3314      	adds	r3, #20
 800823a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800823e:	633a      	str	r2, [r7, #48]	; 0x30
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e3      	bne.n	800821a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	e853 3f00 	ldrex	r3, [r3]
 800826e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 0310 	bic.w	r3, r3, #16
 8008276:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	330c      	adds	r3, #12
 8008280:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008284:	61fa      	str	r2, [r7, #28]
 8008286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	69b9      	ldr	r1, [r7, #24]
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	e841 2300 	strex	r3, r2, [r1]
 8008290:	617b      	str	r3, [r7, #20]
   return(result);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e3      	bne.n	8008260 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f834 	bl	800830c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082a4:	e023      	b.n	80082ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d009      	beq.n	80082c6 <HAL_UART_IRQHandler+0x4ea>
 80082b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fac1 	bl	8008846 <UART_Transmit_IT>
    return;
 80082c4:	e014      	b.n	80082f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <HAL_UART_IRQHandler+0x514>
 80082d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fb01 	bl	80088e6 <UART_EndTransmit_IT>
    return;
 80082e4:	e004      	b.n	80082f0 <HAL_UART_IRQHandler+0x514>
    return;
 80082e6:	bf00      	nop
 80082e8:	e002      	b.n	80082f0 <HAL_UART_IRQHandler+0x514>
      return;
 80082ea:	bf00      	nop
 80082ec:	e000      	b.n	80082f0 <HAL_UART_IRQHandler+0x514>
      return;
 80082ee:	bf00      	nop
  }
}
 80082f0:	37e8      	adds	r7, #232	; 0xe8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop

080082f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b090      	sub	sp, #64	; 0x40
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833c:	2b00      	cmp	r3, #0
 800833e:	d137      	bne.n	80083b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008342:	2200      	movs	r2, #0
 8008344:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3314      	adds	r3, #20
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	623b      	str	r3, [r7, #32]
   return(result);
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800835c:	63bb      	str	r3, [r7, #56]	; 0x38
 800835e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3314      	adds	r3, #20
 8008364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008366:	633a      	str	r2, [r7, #48]	; 0x30
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800836c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e5      	bne.n	8008346 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800837a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	330c      	adds	r3, #12
 8008380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	60fb      	str	r3, [r7, #12]
   return(result);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
 8008392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800839a:	61fa      	str	r2, [r7, #28]
 800839c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	69b9      	ldr	r1, [r7, #24]
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	617b      	str	r3, [r7, #20]
   return(result);
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e5      	bne.n	800837a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083ae:	e002      	b.n	80083b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80083b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80083b2:	f7f9 f9dd 	bl	8001770 <HAL_UART_TxCpltCallback>
}
 80083b6:	bf00      	nop
 80083b8:	3740      	adds	r7, #64	; 0x40
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7f9 f9b9 	bl	8001744 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b09c      	sub	sp, #112	; 0x70
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d172      	bne.n	80084dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80083f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f8:	2200      	movs	r2, #0
 80083fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	330c      	adds	r3, #12
 8008402:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800840c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800840e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008412:	66bb      	str	r3, [r7, #104]	; 0x68
 8008414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	330c      	adds	r3, #12
 800841a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800841c:	65ba      	str	r2, [r7, #88]	; 0x58
 800841e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800842a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e5      	bne.n	80083fc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3314      	adds	r3, #20
 8008436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008442:	f023 0301 	bic.w	r3, r3, #1
 8008446:	667b      	str	r3, [r7, #100]	; 0x64
 8008448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3314      	adds	r3, #20
 800844e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008450:	647a      	str	r2, [r7, #68]	; 0x44
 8008452:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800845e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e5      	bne.n	8008430 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3314      	adds	r3, #20
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	623b      	str	r3, [r7, #32]
   return(result);
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800847a:	663b      	str	r3, [r7, #96]	; 0x60
 800847c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3314      	adds	r3, #20
 8008482:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008484:	633a      	str	r2, [r7, #48]	; 0x30
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800848a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e5      	bne.n	8008464 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d119      	bne.n	80084dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0310 	bic.w	r3, r3, #16
 80084be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084c8:	61fa      	str	r2, [r7, #28]
 80084ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	69b9      	ldr	r1, [r7, #24]
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	617b      	str	r3, [r7, #20]
   return(result);
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e5      	bne.n	80084a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d106      	bne.n	80084f2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084e8:	4619      	mov	r1, r3
 80084ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084ec:	f7ff ff0e 	bl	800830c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084f0:	e002      	b.n	80084f8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80084f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084f4:	f7f9 f90a 	bl	800170c <HAL_UART_RxCpltCallback>
}
 80084f8:	bf00      	nop
 80084fa:	3770      	adds	r7, #112	; 0x70
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	2b01      	cmp	r3, #1
 8008514:	d108      	bne.n	8008528 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800851a:	085b      	lsrs	r3, r3, #1
 800851c:	b29b      	uxth	r3, r3
 800851e:	4619      	mov	r1, r3
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7ff fef3 	bl	800830c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008526:	e002      	b.n	800852e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7f9 f8d9 	bl	80016e0 <HAL_UART_RxHalfCpltCallback>
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008552:	2b80      	cmp	r3, #128	; 0x80
 8008554:	bf0c      	ite	eq
 8008556:	2301      	moveq	r3, #1
 8008558:	2300      	movne	r3, #0
 800855a:	b2db      	uxtb	r3, r3
 800855c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b21      	cmp	r3, #33	; 0x21
 8008568:	d108      	bne.n	800857c <UART_DMAError+0x46>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008576:	68b8      	ldr	r0, [r7, #8]
 8008578:	f000 f8c6 	bl	8008708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	bf0c      	ite	eq
 800858a:	2301      	moveq	r3, #1
 800858c:	2300      	movne	r3, #0
 800858e:	b2db      	uxtb	r3, r3
 8008590:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b22      	cmp	r3, #34	; 0x22
 800859c:	d108      	bne.n	80085b0 <UART_DMAError+0x7a>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2200      	movs	r2, #0
 80085a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80085aa:	68b8      	ldr	r0, [r7, #8]
 80085ac:	f000 f8d4 	bl	8008758 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b4:	f043 0210 	orr.w	r2, r3, #16
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085bc:	68b8      	ldr	r0, [r7, #8]
 80085be:	f7ff fe9b 	bl	80082f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b098      	sub	sp, #96	; 0x60
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	88fa      	ldrh	r2, [r7, #6]
 80085e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2222      	movs	r2, #34	; 0x22
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f8:	4a40      	ldr	r2, [pc, #256]	; (80086fc <UART_Start_Receive_DMA+0x130>)
 80085fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	4a3f      	ldr	r2, [pc, #252]	; (8008700 <UART_Start_Receive_DMA+0x134>)
 8008602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	4a3e      	ldr	r2, [pc, #248]	; (8008704 <UART_Start_Receive_DMA+0x138>)
 800860a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	2200      	movs	r2, #0
 8008612:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008614:	f107 0308 	add.w	r3, r7, #8
 8008618:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3304      	adds	r3, #4
 8008624:	4619      	mov	r1, r3
 8008626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	88fb      	ldrh	r3, [r7, #6]
 800862c:	f7fa fc1a 	bl	8002e64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008630:	2300      	movs	r3, #0
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	613b      	str	r3, [r7, #16]
 8008644:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d019      	beq.n	800868a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	330c      	adds	r3, #12
 800865c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800866c:	65bb      	str	r3, [r7, #88]	; 0x58
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	330c      	adds	r3, #12
 8008674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008676:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008678:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800867c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3314      	adds	r3, #20
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	657b      	str	r3, [r7, #84]	; 0x54
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3314      	adds	r3, #20
 80086a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e5      	bne.n	800868a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3314      	adds	r3, #20
 80086c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	617b      	str	r3, [r7, #20]
   return(result);
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d4:	653b      	str	r3, [r7, #80]	; 0x50
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3314      	adds	r3, #20
 80086dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086de:	627a      	str	r2, [r7, #36]	; 0x24
 80086e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6a39      	ldr	r1, [r7, #32]
 80086e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e5      	bne.n	80086be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3760      	adds	r7, #96	; 0x60
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	080083db 	.word	0x080083db
 8008700:	08008501 	.word	0x08008501
 8008704:	08008537 	.word	0x08008537

08008708 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b089      	sub	sp, #36	; 0x24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	e853 3f00 	ldrex	r3, [r3]
 800871e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008726:	61fb      	str	r3, [r7, #28]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	330c      	adds	r3, #12
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	61ba      	str	r2, [r7, #24]
 8008732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6979      	ldr	r1, [r7, #20]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	613b      	str	r3, [r7, #16]
   return(result);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e5      	bne.n	8008710 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800874c:	bf00      	nop
 800874e:	3724      	adds	r7, #36	; 0x24
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b095      	sub	sp, #84	; 0x54
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	330c      	adds	r3, #12
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	330c      	adds	r3, #12
 800877e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008780:	643a      	str	r2, [r7, #64]	; 0x40
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e5      	bne.n	8008760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3314      	adds	r3, #20
 800879a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	f023 0301 	bic.w	r3, r3, #1
 80087aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3314      	adds	r3, #20
 80087b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e5      	bne.n	8008794 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d119      	bne.n	8008804 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	330c      	adds	r3, #12
 80087d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f023 0310 	bic.w	r3, r3, #16
 80087e6:	647b      	str	r3, [r7, #68]	; 0x44
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	330c      	adds	r3, #12
 80087ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f0:	61ba      	str	r2, [r7, #24]
 80087f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6979      	ldr	r1, [r7, #20]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	613b      	str	r3, [r7, #16]
   return(result);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e5      	bne.n	80087d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008812:	bf00      	nop
 8008814:	3754      	adds	r7, #84	; 0x54
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7ff fd5d 	bl	80082f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008846:	b480      	push	{r7}
 8008848:	b085      	sub	sp, #20
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b21      	cmp	r3, #33	; 0x21
 8008858:	d13e      	bne.n	80088d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008862:	d114      	bne.n	800888e <UART_Transmit_IT+0x48>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d110      	bne.n	800888e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008880:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	1c9a      	adds	r2, r3, #2
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	621a      	str	r2, [r3, #32]
 800888c:	e008      	b.n	80088a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	1c59      	adds	r1, r3, #1
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6211      	str	r1, [r2, #32]
 8008898:	781a      	ldrb	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4619      	mov	r1, r3
 80088ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10f      	bne.n	80088d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e000      	b.n	80088da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088d8:	2302      	movs	r3, #2
  }
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7f8 ff32 	bl	8001770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b08c      	sub	sp, #48	; 0x30
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b22      	cmp	r3, #34	; 0x22
 8008928:	f040 80ab 	bne.w	8008a82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008934:	d117      	bne.n	8008966 <UART_Receive_IT+0x50>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d113      	bne.n	8008966 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008954:	b29a      	uxth	r2, r3
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	1c9a      	adds	r2, r3, #2
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	629a      	str	r2, [r3, #40]	; 0x28
 8008964:	e026      	b.n	80089b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800896c:	2300      	movs	r3, #0
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008978:	d007      	beq.n	800898a <UART_Receive_IT+0x74>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <UART_Receive_IT+0x82>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	b2da      	uxtb	r2, r3
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e008      	b.n	80089aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29b      	uxth	r3, r3
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	4619      	mov	r1, r3
 80089c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d15a      	bne.n	8008a7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0220 	bic.w	r2, r2, #32
 80089d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0201 	bic.w	r2, r2, #1
 80089f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d135      	bne.n	8008a74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f023 0310 	bic.w	r3, r3, #16
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2e:	623a      	str	r2, [r7, #32]
 8008a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	69f9      	ldr	r1, [r7, #28]
 8008a34:	6a3a      	ldr	r2, [r7, #32]
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e5      	bne.n	8008a0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0310 	and.w	r3, r3, #16
 8008a4c:	2b10      	cmp	r3, #16
 8008a4e:	d10a      	bne.n	8008a66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff fc4d 	bl	800830c <HAL_UARTEx_RxEventCallback>
 8008a72:	e002      	b.n	8008a7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7f8 fe49 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e002      	b.n	8008a84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e000      	b.n	8008a84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
  }
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3730      	adds	r7, #48	; 0x30
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a90:	b0c0      	sub	sp, #256	; 0x100
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	68d9      	ldr	r1, [r3, #12]
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	ea40 0301 	orr.w	r3, r0, r1
 8008ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ae4:	f021 010c 	bic.w	r1, r1, #12
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008af2:	430b      	orrs	r3, r1
 8008af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b06:	6999      	ldr	r1, [r3, #24]
 8008b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	ea40 0301 	orr.w	r3, r0, r1
 8008b12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	4b8f      	ldr	r3, [pc, #572]	; (8008d58 <UART_SetConfig+0x2cc>)
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d005      	beq.n	8008b2c <UART_SetConfig+0xa0>
 8008b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	4b8d      	ldr	r3, [pc, #564]	; (8008d5c <UART_SetConfig+0x2d0>)
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d104      	bne.n	8008b36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b2c:	f7fe f90e 	bl	8006d4c <HAL_RCC_GetPCLK2Freq>
 8008b30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b34:	e003      	b.n	8008b3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b36:	f7fe f8f5 	bl	8006d24 <HAL_RCC_GetPCLK1Freq>
 8008b3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b48:	f040 810c 	bne.w	8008d64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	1891      	adds	r1, r2, r2
 8008b64:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b66:	415b      	adcs	r3, r3
 8008b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b6e:	4621      	mov	r1, r4
 8008b70:	eb12 0801 	adds.w	r8, r2, r1
 8008b74:	4629      	mov	r1, r5
 8008b76:	eb43 0901 	adc.w	r9, r3, r1
 8008b7a:	f04f 0200 	mov.w	r2, #0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b8e:	4690      	mov	r8, r2
 8008b90:	4699      	mov	r9, r3
 8008b92:	4623      	mov	r3, r4
 8008b94:	eb18 0303 	adds.w	r3, r8, r3
 8008b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	eb49 0303 	adc.w	r3, r9, r3
 8008ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bba:	460b      	mov	r3, r1
 8008bbc:	18db      	adds	r3, r3, r3
 8008bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	eb42 0303 	adc.w	r3, r2, r3
 8008bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8008bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bd0:	f7f8 f83a 	bl	8000c48 <__aeabi_uldivmod>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4b61      	ldr	r3, [pc, #388]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008bda:	fba3 2302 	umull	r2, r3, r3, r2
 8008bde:	095b      	lsrs	r3, r3, #5
 8008be0:	011c      	lsls	r4, r3, #4
 8008be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008bf4:	4642      	mov	r2, r8
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	1891      	adds	r1, r2, r2
 8008bfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8008bfc:	415b      	adcs	r3, r3
 8008bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c04:	4641      	mov	r1, r8
 8008c06:	eb12 0a01 	adds.w	sl, r2, r1
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	eb43 0b01 	adc.w	fp, r3, r1
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c24:	4692      	mov	sl, r2
 8008c26:	469b      	mov	fp, r3
 8008c28:	4643      	mov	r3, r8
 8008c2a:	eb1a 0303 	adds.w	r3, sl, r3
 8008c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c32:	464b      	mov	r3, r9
 8008c34:	eb4b 0303 	adc.w	r3, fp, r3
 8008c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c50:	460b      	mov	r3, r1
 8008c52:	18db      	adds	r3, r3, r3
 8008c54:	643b      	str	r3, [r7, #64]	; 0x40
 8008c56:	4613      	mov	r3, r2
 8008c58:	eb42 0303 	adc.w	r3, r2, r3
 8008c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c66:	f7f7 ffef 	bl	8000c48 <__aeabi_uldivmod>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4b3b      	ldr	r3, [pc, #236]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008c72:	fba3 2301 	umull	r2, r3, r3, r1
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	2264      	movs	r2, #100	; 0x64
 8008c7a:	fb02 f303 	mul.w	r3, r2, r3
 8008c7e:	1acb      	subs	r3, r1, r3
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c86:	4b36      	ldr	r3, [pc, #216]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008c88:	fba3 2302 	umull	r2, r3, r3, r2
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c94:	441c      	add	r4, r3
 8008c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ca0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ca8:	4642      	mov	r2, r8
 8008caa:	464b      	mov	r3, r9
 8008cac:	1891      	adds	r1, r2, r2
 8008cae:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cb0:	415b      	adcs	r3, r3
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cb8:	4641      	mov	r1, r8
 8008cba:	1851      	adds	r1, r2, r1
 8008cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	414b      	adcs	r3, r1
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	00cb      	lsls	r3, r1, #3
 8008cd4:	4651      	mov	r1, sl
 8008cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cda:	4651      	mov	r1, sl
 8008cdc:	00ca      	lsls	r2, r1, #3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4642      	mov	r2, r8
 8008ce6:	189b      	adds	r3, r3, r2
 8008ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cec:	464b      	mov	r3, r9
 8008cee:	460a      	mov	r2, r1
 8008cf0:	eb42 0303 	adc.w	r3, r2, r3
 8008cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	18db      	adds	r3, r3, r3
 8008d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d12:	4613      	mov	r3, r2
 8008d14:	eb42 0303 	adc.w	r3, r2, r3
 8008d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d22:	f7f7 ff91 	bl	8000c48 <__aeabi_uldivmod>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d30:	095b      	lsrs	r3, r3, #5
 8008d32:	2164      	movs	r1, #100	; 0x64
 8008d34:	fb01 f303 	mul.w	r3, r1, r3
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	3332      	adds	r3, #50	; 0x32
 8008d3e:	4a08      	ldr	r2, [pc, #32]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008d40:	fba2 2303 	umull	r2, r3, r2, r3
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	f003 0207 	and.w	r2, r3, #7
 8008d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4422      	add	r2, r4
 8008d52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d54:	e105      	b.n	8008f62 <UART_SetConfig+0x4d6>
 8008d56:	bf00      	nop
 8008d58:	40011000 	.word	0x40011000
 8008d5c:	40011400 	.word	0x40011400
 8008d60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	1891      	adds	r1, r2, r2
 8008d7c:	6239      	str	r1, [r7, #32]
 8008d7e:	415b      	adcs	r3, r3
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
 8008d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d86:	4641      	mov	r1, r8
 8008d88:	1854      	adds	r4, r2, r1
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	eb43 0501 	adc.w	r5, r3, r1
 8008d90:	f04f 0200 	mov.w	r2, #0
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	00eb      	lsls	r3, r5, #3
 8008d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d9e:	00e2      	lsls	r2, r4, #3
 8008da0:	4614      	mov	r4, r2
 8008da2:	461d      	mov	r5, r3
 8008da4:	4643      	mov	r3, r8
 8008da6:	18e3      	adds	r3, r4, r3
 8008da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dac:	464b      	mov	r3, r9
 8008dae:	eb45 0303 	adc.w	r3, r5, r3
 8008db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	008b      	lsls	r3, r1, #2
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ddc:	4621      	mov	r1, r4
 8008dde:	008a      	lsls	r2, r1, #2
 8008de0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008de4:	f7f7 ff30 	bl	8000c48 <__aeabi_uldivmod>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4b60      	ldr	r3, [pc, #384]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008dee:	fba3 2302 	umull	r2, r3, r3, r2
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	011c      	lsls	r4, r3, #4
 8008df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	1891      	adds	r1, r2, r2
 8008e0e:	61b9      	str	r1, [r7, #24]
 8008e10:	415b      	adcs	r3, r3
 8008e12:	61fb      	str	r3, [r7, #28]
 8008e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e18:	4641      	mov	r1, r8
 8008e1a:	1851      	adds	r1, r2, r1
 8008e1c:	6139      	str	r1, [r7, #16]
 8008e1e:	4649      	mov	r1, r9
 8008e20:	414b      	adcs	r3, r1
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	f04f 0300 	mov.w	r3, #0
 8008e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e30:	4659      	mov	r1, fp
 8008e32:	00cb      	lsls	r3, r1, #3
 8008e34:	4651      	mov	r1, sl
 8008e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e3a:	4651      	mov	r1, sl
 8008e3c:	00ca      	lsls	r2, r1, #3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4619      	mov	r1, r3
 8008e42:	4603      	mov	r3, r0
 8008e44:	4642      	mov	r2, r8
 8008e46:	189b      	adds	r3, r3, r2
 8008e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	460a      	mov	r2, r1
 8008e50:	eb42 0303 	adc.w	r3, r2, r3
 8008e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e70:	4649      	mov	r1, r9
 8008e72:	008b      	lsls	r3, r1, #2
 8008e74:	4641      	mov	r1, r8
 8008e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e7a:	4641      	mov	r1, r8
 8008e7c:	008a      	lsls	r2, r1, #2
 8008e7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e82:	f7f7 fee1 	bl	8000c48 <__aeabi_uldivmod>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4b39      	ldr	r3, [pc, #228]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	2164      	movs	r1, #100	; 0x64
 8008e94:	fb01 f303 	mul.w	r3, r1, r3
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	3332      	adds	r3, #50	; 0x32
 8008e9e:	4a34      	ldr	r2, [pc, #208]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea4:	095b      	lsrs	r3, r3, #5
 8008ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eaa:	441c      	add	r4, r3
 8008eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8008eb4:	677a      	str	r2, [r7, #116]	; 0x74
 8008eb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008eba:	4642      	mov	r2, r8
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	1891      	adds	r1, r2, r2
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	415b      	adcs	r3, r3
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eca:	4641      	mov	r1, r8
 8008ecc:	1851      	adds	r1, r2, r1
 8008ece:	6039      	str	r1, [r7, #0]
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	414b      	adcs	r3, r1
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ee2:	4659      	mov	r1, fp
 8008ee4:	00cb      	lsls	r3, r1, #3
 8008ee6:	4651      	mov	r1, sl
 8008ee8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eec:	4651      	mov	r1, sl
 8008eee:	00ca      	lsls	r2, r1, #3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	189b      	adds	r3, r3, r2
 8008efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008efc:	464b      	mov	r3, r9
 8008efe:	460a      	mov	r2, r1
 8008f00:	eb42 0303 	adc.w	r3, r2, r3
 8008f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f10:	667a      	str	r2, [r7, #100]	; 0x64
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	f04f 0300 	mov.w	r3, #0
 8008f1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f1e:	4649      	mov	r1, r9
 8008f20:	008b      	lsls	r3, r1, #2
 8008f22:	4641      	mov	r1, r8
 8008f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f28:	4641      	mov	r1, r8
 8008f2a:	008a      	lsls	r2, r1, #2
 8008f2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f30:	f7f7 fe8a 	bl	8000c48 <__aeabi_uldivmod>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	2164      	movs	r1, #100	; 0x64
 8008f42:	fb01 f303 	mul.w	r3, r1, r3
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	3332      	adds	r3, #50	; 0x32
 8008f4c:	4a08      	ldr	r2, [pc, #32]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	f003 020f 	and.w	r2, r3, #15
 8008f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4422      	add	r2, r4
 8008f60:	609a      	str	r2, [r3, #8]
}
 8008f62:	bf00      	nop
 8008f64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f6e:	bf00      	nop
 8008f70:	51eb851f 	.word	0x51eb851f

08008f74 <_ZdlPvj>:
 8008f74:	f000 bad1 	b.w	800951a <_ZdlPv>

08008f78 <_ZNSaIcEC1Ev>:
 8008f78:	4770      	bx	lr

08008f7a <_ZNSaIcED1Ev>:
 8008f7a:	4770      	bx	lr

08008f7c <_ZSt17__throw_bad_allocv>:
 8008f7c:	b508      	push	{r3, lr}
 8008f7e:	f000 fae7 	bl	8009550 <abort>

08008f82 <_ZSt19__throw_logic_errorPKc>:
 8008f82:	b508      	push	{r3, lr}
 8008f84:	f000 fae4 	bl	8009550 <abort>

08008f88 <_ZSt20__throw_length_errorPKc>:
 8008f88:	b508      	push	{r3, lr}
 8008f8a:	f000 fae1 	bl	8009550 <abort>

08008f8e <_ZSt24__throw_out_of_range_fmtPKcz>:
 8008f8e:	b40f      	push	{r0, r1, r2, r3}
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	f107 0418 	add.w	r4, r7, #24
 8008f9a:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f7f7 f965 	bl	8000270 <strlen>
 8008fa6:	f200 2307 	addw	r3, r0, #519	; 0x207
 8008faa:	f023 0307 	bic.w	r3, r3, #7
 8008fae:	ebad 0d03 	sub.w	sp, sp, r3
 8008fb2:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	60fc      	str	r4, [r7, #12]
 8008fba:	4623      	mov	r3, r4
 8008fbc:	4668      	mov	r0, sp
 8008fbe:	f000 f855 	bl	800906c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8008fc2:	f000 fac5 	bl	8009550 <abort>
	...

08008fc8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b09c      	sub	sp, #112	; 0x70
 8008fcc:	4606      	mov	r6, r0
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	1ba4      	subs	r4, r4, r6
 8008fd4:	490e      	ldr	r1, [pc, #56]	; (8009010 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8008fd6:	2269      	movs	r2, #105	; 0x69
 8008fd8:	1d38      	adds	r0, r7, #4
 8008fda:	f000 fafb 	bl	80095d4 <memcpy>
 8008fde:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8008fe2:	f023 0307 	bic.w	r3, r3, #7
 8008fe6:	ebad 0d03 	sub.w	sp, sp, r3
 8008fea:	466d      	mov	r5, sp
 8008fec:	2268      	movs	r2, #104	; 0x68
 8008fee:	1d39      	adds	r1, r7, #4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 faef 	bl	80095d4 <memcpy>
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8008ffe:	442c      	add	r4, r5
 8009000:	f000 fae8 	bl	80095d4 <memcpy>
 8009004:	2300      	movs	r3, #0
 8009006:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800900a:	4628      	mov	r0, r5
 800900c:	f7ff ffb9 	bl	8008f82 <_ZSt19__throw_logic_errorPKc>
 8009010:	0800c4d4 	.word	0x0800c4d4

08009014 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8009014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009018:	af00      	add	r7, sp, #0
 800901a:	b084      	sub	sp, #16
 800901c:	466d      	mov	r5, sp
 800901e:	f105 040c 	add.w	r4, r5, #12
 8009022:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8009068 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8009026:	4623      	mov	r3, r4
 8009028:	f04f 0c0a 	mov.w	ip, #10
 800902c:	fbb2 f6fc 	udiv	r6, r2, ip
 8009030:	fb0c 2e16 	mls	lr, ip, r6, r2
 8009034:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8009038:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800903c:	4696      	mov	lr, r2
 800903e:	f1be 0f09 	cmp.w	lr, #9
 8009042:	4632      	mov	r2, r6
 8009044:	d8f2      	bhi.n	800902c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8009046:	1ae4      	subs	r4, r4, r3
 8009048:	428c      	cmp	r4, r1
 800904a:	d809      	bhi.n	8009060 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800904c:	f1c4 030c 	rsb	r3, r4, #12
 8009050:	4622      	mov	r2, r4
 8009052:	18e9      	adds	r1, r5, r3
 8009054:	f000 fabe 	bl	80095d4 <memcpy>
 8009058:	4620      	mov	r0, r4
 800905a:	46bd      	mov	sp, r7
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009060:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009064:	e7f8      	b.n	8009058 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8009066:	bf00      	nop
 8009068:	0800c53d 	.word	0x0800c53d

0800906c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800906c:	3901      	subs	r1, #1
 800906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009072:	4607      	mov	r7, r0
 8009074:	4615      	mov	r5, r2
 8009076:	eb00 0801 	add.w	r8, r0, r1
 800907a:	4604      	mov	r4, r0
 800907c:	782a      	ldrb	r2, [r5, #0]
 800907e:	b392      	cbz	r2, 80090e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8009080:	4544      	cmp	r4, r8
 8009082:	d22a      	bcs.n	80090da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8009084:	2a25      	cmp	r2, #37	; 0x25
 8009086:	d107      	bne.n	8009098 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8009088:	786a      	ldrb	r2, [r5, #1]
 800908a:	2a73      	cmp	r2, #115	; 0x73
 800908c:	d009      	beq.n	80090a2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800908e:	2a7a      	cmp	r2, #122	; 0x7a
 8009090:	d012      	beq.n	80090b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8009092:	2a25      	cmp	r2, #37	; 0x25
 8009094:	d100      	bne.n	8009098 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8009096:	3501      	adds	r5, #1
 8009098:	f815 2b01 	ldrb.w	r2, [r5], #1
 800909c:	f804 2b01 	strb.w	r2, [r4], #1
 80090a0:	e7ec      	b.n	800907c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80090a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a6:	3a01      	subs	r2, #1
 80090a8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80090ac:	b1c9      	cbz	r1, 80090e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80090ae:	4544      	cmp	r4, r8
 80090b0:	d013      	beq.n	80090da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80090b2:	f804 1b01 	strb.w	r1, [r4], #1
 80090b6:	e7f7      	b.n	80090a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80090b8:	78aa      	ldrb	r2, [r5, #2]
 80090ba:	2a75      	cmp	r2, #117	; 0x75
 80090bc:	d1ec      	bne.n	8009098 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80090be:	461e      	mov	r6, r3
 80090c0:	eba8 0104 	sub.w	r1, r8, r4
 80090c4:	f856 2b04 	ldr.w	r2, [r6], #4
 80090c8:	4620      	mov	r0, r4
 80090ca:	f7ff ffa3 	bl	8009014 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	dd03      	ble.n	80090da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80090d2:	4404      	add	r4, r0
 80090d4:	3503      	adds	r5, #3
 80090d6:	4633      	mov	r3, r6
 80090d8:	e7d0      	b.n	800907c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80090da:	4621      	mov	r1, r4
 80090dc:	4638      	mov	r0, r7
 80090de:	f7ff ff73 	bl	8008fc8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80090e2:	3502      	adds	r5, #2
 80090e4:	e7ca      	b.n	800907c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80090e6:	7022      	strb	r2, [r4, #0]
 80090e8:	1be0      	subs	r0, r4, r7
 80090ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090ee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80090ee:	b10a      	cbz	r2, 80090f4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80090f0:	f000 ba70 	b.w	80095d4 <memcpy>
 80090f4:	4770      	bx	lr

080090f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80090f6:	6001      	str	r1, [r0, #0]
 80090f8:	4770      	bx	lr

080090fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80090fa:	6800      	ldr	r0, [r0, #0]
 80090fc:	4770      	bx	lr

080090fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80090fe:	3008      	adds	r0, #8
 8009100:	4770      	bx	lr

08009102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8009102:	6081      	str	r1, [r0, #8]
 8009104:	4770      	bx	lr

08009106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8009106:	6803      	ldr	r3, [r0, #0]
 8009108:	6041      	str	r1, [r0, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	545a      	strb	r2, [r3, r1]
 800910e:	4770      	bx	lr

08009110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8009110:	b508      	push	{r3, lr}
 8009112:	680b      	ldr	r3, [r1, #0]
 8009114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009118:	d302      	bcc.n	8009120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800911a:	480d      	ldr	r0, [pc, #52]	; (8009150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800911c:	f7ff ff34 	bl	8008f88 <_ZSt20__throw_length_errorPKc>
 8009120:	4293      	cmp	r3, r2
 8009122:	d90b      	bls.n	800913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009124:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009128:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800912c:	d206      	bcs.n	800913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800912e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009132:	bf2a      	itet	cs
 8009134:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009138:	6008      	strcc	r0, [r1, #0]
 800913a:	600b      	strcs	r3, [r1, #0]
 800913c:	6808      	ldr	r0, [r1, #0]
 800913e:	3001      	adds	r0, #1
 8009140:	d501      	bpl.n	8009146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8009142:	f7ff ff1b 	bl	8008f7c <_ZSt17__throw_bad_allocv>
 8009146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800914a:	f000 b9e8 	b.w	800951e <_Znwj>
 800914e:	bf00      	nop
 8009150:	0800c548 	.word	0x0800c548

08009154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009154:	f850 3b08 	ldr.w	r3, [r0], #8
 8009158:	4283      	cmp	r3, r0
 800915a:	d002      	beq.n	8009162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800915c:	4618      	mov	r0, r3
 800915e:	f000 b9dc 	b.w	800951a <_ZdlPv>
 8009162:	4770      	bx	lr

08009164 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8009164:	b508      	push	{r3, lr}
 8009166:	4603      	mov	r3, r0
 8009168:	4608      	mov	r0, r1
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	4298      	cmp	r0, r3
 800916e:	4611      	mov	r1, r2
 8009170:	d903      	bls.n	800917a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8009172:	4602      	mov	r2, r0
 8009174:	4801      	ldr	r0, [pc, #4]	; (800917c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8009176:	f7ff ff0a 	bl	8008f8e <_ZSt24__throw_out_of_range_fmtPKcz>
 800917a:	bd08      	pop	{r3, pc}
 800917c:	0800c560 	.word	0x0800c560

08009180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8009180:	6840      	ldr	r0, [r0, #4]
 8009182:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8009186:	3901      	subs	r1, #1
 8009188:	1a09      	subs	r1, r1, r0
 800918a:	4291      	cmp	r1, r2
 800918c:	b508      	push	{r3, lr}
 800918e:	d202      	bcs.n	8009196 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff fef9 	bl	8008f88 <_ZSt20__throw_length_errorPKc>
 8009196:	bd08      	pop	{r3, pc}

08009198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8009198:	6803      	ldr	r3, [r0, #0]
 800919a:	428b      	cmp	r3, r1
 800919c:	d806      	bhi.n	80091ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800919e:	6840      	ldr	r0, [r0, #4]
 80091a0:	4418      	add	r0, r3
 80091a2:	4281      	cmp	r1, r0
 80091a4:	bf94      	ite	ls
 80091a6:	2000      	movls	r0, #0
 80091a8:	2001      	movhi	r0, #1
 80091aa:	4770      	bx	lr
 80091ac:	2001      	movs	r0, #1
 80091ae:	4770      	bx	lr

080091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80091b0:	2a01      	cmp	r2, #1
 80091b2:	b410      	push	{r4}
 80091b4:	d104      	bne.n	80091c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80091b6:	780a      	ldrb	r2, [r1, #0]
 80091b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091bc:	7002      	strb	r2, [r0, #0]
 80091be:	4770      	bx	lr
 80091c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c4:	f7ff bf93 	b.w	80090ee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080091c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80091c8:	2a01      	cmp	r2, #1
 80091ca:	b430      	push	{r4, r5}
 80091cc:	d103      	bne.n	80091d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80091ce:	780b      	ldrb	r3, [r1, #0]
 80091d0:	7003      	strb	r3, [r0, #0]
 80091d2:	bc30      	pop	{r4, r5}
 80091d4:	4770      	bx	lr
 80091d6:	2a00      	cmp	r2, #0
 80091d8:	d0fb      	beq.n	80091d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80091da:	bc30      	pop	{r4, r5}
 80091dc:	f000 ba08 	b.w	80095f0 <memmove>

080091e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80091e0:	b508      	push	{r3, lr}
 80091e2:	1a52      	subs	r2, r2, r1
 80091e4:	f7ff ffe4 	bl	80091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80091e8:	bd08      	pop	{r3, pc}

080091ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80091ea:	b508      	push	{r3, lr}
 80091ec:	1a52      	subs	r2, r2, r1
 80091ee:	f7ff ffdf 	bl	80091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80091f2:	bd08      	pop	{r3, pc}

080091f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80091f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80091fa:	461f      	mov	r7, r3
 80091fc:	6843      	ldr	r3, [r0, #4]
 80091fe:	eb01 0802 	add.w	r8, r1, r2
 8009202:	1ab2      	subs	r2, r6, r2
 8009204:	441a      	add	r2, r3
 8009206:	eba3 0908 	sub.w	r9, r3, r8
 800920a:	4603      	mov	r3, r0
 800920c:	9201      	str	r2, [sp, #4]
 800920e:	f853 2b08 	ldr.w	r2, [r3], #8
 8009212:	429a      	cmp	r2, r3
 8009214:	bf18      	it	ne
 8009216:	6882      	ldrne	r2, [r0, #8]
 8009218:	460d      	mov	r5, r1
 800921a:	bf08      	it	eq
 800921c:	220f      	moveq	r2, #15
 800921e:	a901      	add	r1, sp, #4
 8009220:	4604      	mov	r4, r0
 8009222:	f7ff ff75 	bl	8009110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009226:	4682      	mov	sl, r0
 8009228:	b11d      	cbz	r5, 8009232 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800922a:	6821      	ldr	r1, [r4, #0]
 800922c:	462a      	mov	r2, r5
 800922e:	f7ff ffbf 	bl	80091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009232:	b137      	cbz	r7, 8009242 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009234:	b12e      	cbz	r6, 8009242 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009236:	4632      	mov	r2, r6
 8009238:	4639      	mov	r1, r7
 800923a:	eb0a 0005 	add.w	r0, sl, r5
 800923e:	f7ff ffb7 	bl	80091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	d007      	beq.n	8009258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8009248:	6821      	ldr	r1, [r4, #0]
 800924a:	4435      	add	r5, r6
 800924c:	464a      	mov	r2, r9
 800924e:	4441      	add	r1, r8
 8009250:	eb0a 0005 	add.w	r0, sl, r5
 8009254:	f7ff ffac 	bl	80091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009258:	4620      	mov	r0, r4
 800925a:	f7ff ff7b 	bl	8009154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	f8c4 a000 	str.w	sl, [r4]
 8009264:	60a3      	str	r3, [r4, #8]
 8009266:	b002      	add	sp, #8
 8009268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800926c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4604      	mov	r4, r0
 8009270:	460e      	mov	r6, r1
 8009272:	3008      	adds	r0, #8
 8009274:	6020      	str	r0, [r4, #0]
 8009276:	f856 3b08 	ldr.w	r3, [r6], #8
 800927a:	429e      	cmp	r6, r3
 800927c:	460d      	mov	r5, r1
 800927e:	d10b      	bne.n	8009298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8009280:	2210      	movs	r2, #16
 8009282:	4631      	mov	r1, r6
 8009284:	f7ff ff33 	bl	80090ee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8009288:	686b      	ldr	r3, [r5, #4]
 800928a:	6063      	str	r3, [r4, #4]
 800928c:	2300      	movs	r3, #0
 800928e:	602e      	str	r6, [r5, #0]
 8009290:	606b      	str	r3, [r5, #4]
 8009292:	722b      	strb	r3, [r5, #8]
 8009294:	4620      	mov	r0, r4
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	688b      	ldr	r3, [r1, #8]
 800929c:	60a3      	str	r3, [r4, #8]
 800929e:	e7f3      	b.n	8009288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080092a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	4604      	mov	r4, r0
 80092a4:	f7ff ff56 	bl	8009154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80092a8:	4620      	mov	r0, r4
 80092aa:	bd10      	pop	{r4, pc}

080092ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80092ac:	6840      	ldr	r0, [r0, #4]
 80092ae:	4770      	bx	lr

080092b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80092b0:	4603      	mov	r3, r0
 80092b2:	f853 2b08 	ldr.w	r2, [r3], #8
 80092b6:	429a      	cmp	r2, r3
 80092b8:	bf14      	ite	ne
 80092ba:	6880      	ldrne	r0, [r0, #8]
 80092bc:	200f      	moveq	r0, #15
 80092be:	4770      	bx	lr

080092c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80092c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092c6:	4614      	mov	r4, r2
 80092c8:	4680      	mov	r8, r0
 80092ca:	462a      	mov	r2, r5
 80092cc:	4689      	mov	r9, r1
 80092ce:	461f      	mov	r7, r3
 80092d0:	4621      	mov	r1, r4
 80092d2:	4b39      	ldr	r3, [pc, #228]	; (80093b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80092d4:	f7ff ff54 	bl	8009180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80092d8:	4642      	mov	r2, r8
 80092da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092de:	f852 6b08 	ldr.w	r6, [r2], #8
 80092e2:	4296      	cmp	r6, r2
 80092e4:	bf18      	it	ne
 80092e6:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80092ea:	eba5 0b04 	sub.w	fp, r5, r4
 80092ee:	eb03 0a0b 	add.w	sl, r3, fp
 80092f2:	bf08      	it	eq
 80092f4:	220f      	moveq	r2, #15
 80092f6:	4552      	cmp	r2, sl
 80092f8:	d351      	bcc.n	800939e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80092fa:	444e      	add	r6, r9
 80092fc:	4639      	mov	r1, r7
 80092fe:	44a1      	add	r9, r4
 8009300:	4640      	mov	r0, r8
 8009302:	eba3 0909 	sub.w	r9, r3, r9
 8009306:	f7ff ff47 	bl	8009198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800930a:	b180      	cbz	r0, 800932e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800930c:	f1b9 0f00 	cmp.w	r9, #0
 8009310:	d006      	beq.n	8009320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009312:	42ac      	cmp	r4, r5
 8009314:	d004      	beq.n	8009320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009316:	464a      	mov	r2, r9
 8009318:	1931      	adds	r1, r6, r4
 800931a:	1970      	adds	r0, r6, r5
 800931c:	f7ff ff54 	bl	80091c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009320:	b315      	cbz	r5, 8009368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009322:	462a      	mov	r2, r5
 8009324:	4639      	mov	r1, r7
 8009326:	4630      	mov	r0, r6
 8009328:	f7ff ff42 	bl	80091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800932c:	e01c      	b.n	8009368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800932e:	b135      	cbz	r5, 800933e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8009330:	42ac      	cmp	r4, r5
 8009332:	d33c      	bcc.n	80093ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8009334:	462a      	mov	r2, r5
 8009336:	4639      	mov	r1, r7
 8009338:	4630      	mov	r0, r6
 800933a:	f7ff ff45 	bl	80091c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800933e:	f1b9 0f00 	cmp.w	r9, #0
 8009342:	d011      	beq.n	8009368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009344:	42ac      	cmp	r4, r5
 8009346:	d00f      	beq.n	8009368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009348:	464a      	mov	r2, r9
 800934a:	1931      	adds	r1, r6, r4
 800934c:	1970      	adds	r0, r6, r5
 800934e:	f7ff ff3b 	bl	80091c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009352:	42ac      	cmp	r4, r5
 8009354:	d208      	bcs.n	8009368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009356:	4434      	add	r4, r6
 8009358:	197b      	adds	r3, r7, r5
 800935a:	429c      	cmp	r4, r3
 800935c:	d30f      	bcc.n	800937e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800935e:	462a      	mov	r2, r5
 8009360:	4639      	mov	r1, r7
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ff30 	bl	80091c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009368:	f8d8 3000 	ldr.w	r3, [r8]
 800936c:	f8c8 a004 	str.w	sl, [r8, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	4640      	mov	r0, r8
 8009374:	f803 200a 	strb.w	r2, [r3, sl]
 8009378:	b003      	add	sp, #12
 800937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937e:	42bc      	cmp	r4, r7
 8009380:	d803      	bhi.n	800938a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8009382:	462a      	mov	r2, r5
 8009384:	eb07 010b 	add.w	r1, r7, fp
 8009388:	e7cd      	b.n	8009326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800938a:	1be4      	subs	r4, r4, r7
 800938c:	4622      	mov	r2, r4
 800938e:	4639      	mov	r1, r7
 8009390:	4630      	mov	r0, r6
 8009392:	f7ff ff19 	bl	80091c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009396:	1b2a      	subs	r2, r5, r4
 8009398:	1971      	adds	r1, r6, r5
 800939a:	1930      	adds	r0, r6, r4
 800939c:	e7c4      	b.n	8009328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800939e:	9500      	str	r5, [sp, #0]
 80093a0:	463b      	mov	r3, r7
 80093a2:	4622      	mov	r2, r4
 80093a4:	4649      	mov	r1, r9
 80093a6:	4640      	mov	r0, r8
 80093a8:	f7ff ff24 	bl	80091f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80093ac:	e7dc      	b.n	8009368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80093ae:	f1b9 0f00 	cmp.w	r9, #0
 80093b2:	d0d0      	beq.n	8009356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80093b4:	e7c8      	b.n	8009348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 80093b6:	bf00      	nop
 80093b8:	0800c5ad 	.word	0x0800c5ad

080093bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80093bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80093be:	4604      	mov	r4, r0
 80093c0:	4615      	mov	r5, r2
 80093c2:	4a09      	ldr	r2, [pc, #36]	; (80093e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	460e      	mov	r6, r1
 80093c8:	f7ff fecc 	bl	8009164 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80093cc:	6862      	ldr	r2, [r4, #4]
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	1b92      	subs	r2, r2, r6
 80093d2:	4601      	mov	r1, r0
 80093d4:	42aa      	cmp	r2, r5
 80093d6:	9808      	ldr	r0, [sp, #32]
 80093d8:	9000      	str	r0, [sp, #0]
 80093da:	bf28      	it	cs
 80093dc:	462a      	movcs	r2, r5
 80093de:	4620      	mov	r0, r4
 80093e0:	f7ff ff6e 	bl	80092c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80093e4:	b004      	add	sp, #16
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	0800c597 	.word	0x0800c597

080093ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 80093ec:	b507      	push	{r0, r1, r2, lr}
 80093ee:	6853      	ldr	r3, [r2, #4]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f7ff ffe1 	bl	80093bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80093fa:	b003      	add	sp, #12
 80093fc:	f85d fb04 	ldr.w	pc, [sp], #4

08009400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8009400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009402:	4604      	mov	r4, r0
 8009404:	4610      	mov	r0, r2
 8009406:	9103      	str	r1, [sp, #12]
 8009408:	9202      	str	r2, [sp, #8]
 800940a:	f7f6 ff31 	bl	8000270 <strlen>
 800940e:	9b02      	ldr	r3, [sp, #8]
 8009410:	9000      	str	r0, [sp, #0]
 8009412:	9903      	ldr	r1, [sp, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	4620      	mov	r0, r4
 8009418:	f7ff ffd0 	bl	80093bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800941c:	b004      	add	sp, #16
 800941e:	bd10      	pop	{r4, pc}

08009420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8009420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009422:	4604      	mov	r4, r0
 8009424:	4623      	mov	r3, r4
 8009426:	6840      	ldr	r0, [r0, #4]
 8009428:	f853 6b08 	ldr.w	r6, [r3], #8
 800942c:	429e      	cmp	r6, r3
 800942e:	bf18      	it	ne
 8009430:	68a3      	ldrne	r3, [r4, #8]
 8009432:	eb00 0502 	add.w	r5, r0, r2
 8009436:	bf08      	it	eq
 8009438:	230f      	moveq	r3, #15
 800943a:	429d      	cmp	r5, r3
 800943c:	d80a      	bhi.n	8009454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800943e:	b112      	cbz	r2, 8009446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8009440:	4430      	add	r0, r6
 8009442:	f7ff feb5 	bl	80091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	6065      	str	r5, [r4, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	4620      	mov	r0, r4
 800944e:	555a      	strb	r2, [r3, r5]
 8009450:	b002      	add	sp, #8
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	9200      	str	r2, [sp, #0]
 8009456:	460b      	mov	r3, r1
 8009458:	2200      	movs	r2, #0
 800945a:	4601      	mov	r1, r0
 800945c:	4620      	mov	r0, r4
 800945e:	f7ff fec9 	bl	80091f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009462:	e7f0      	b.n	8009446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08009464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8009464:	b508      	push	{r3, lr}
 8009466:	e9d1 1200 	ldrd	r1, r2, [r1]
 800946a:	f7ff ffd9 	bl	8009420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800946e:	bd08      	pop	{r3, pc}

08009470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8009470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	460d      	mov	r5, r1
 8009478:	f7f6 fefa 	bl	8000270 <strlen>
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800947e:	9001      	str	r0, [sp, #4]
 8009480:	4602      	mov	r2, r0
 8009482:	2100      	movs	r1, #0
 8009484:	4620      	mov	r0, r4
 8009486:	f7ff fe7b 	bl	8009180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800948a:	9a01      	ldr	r2, [sp, #4]
 800948c:	4629      	mov	r1, r5
 800948e:	4620      	mov	r0, r4
 8009490:	f7ff ffc6 	bl	8009420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009494:	b003      	add	sp, #12
 8009496:	bd30      	pop	{r4, r5, pc}
 8009498:	0800c5c6 	.word	0x0800c5c6

0800949c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800949c:	6800      	ldr	r0, [r0, #0]
 800949e:	4770      	bx	lr

080094a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 80094a0:	4770      	bx	lr

080094a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80094a2:	6001      	str	r1, [r0, #0]
 80094a4:	4770      	bx	lr
	...

080094a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80094a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094aa:	4604      	mov	r4, r0
 80094ac:	4616      	mov	r6, r2
 80094ae:	460d      	mov	r5, r1
 80094b0:	b919      	cbnz	r1, 80094ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80094b2:	b112      	cbz	r2, 80094ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80094b4:	480d      	ldr	r0, [pc, #52]	; (80094ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80094b6:	f7ff fd64 	bl	8008f82 <_ZSt19__throw_logic_errorPKc>
 80094ba:	1b73      	subs	r3, r6, r5
 80094bc:	2b0f      	cmp	r3, #15
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	d907      	bls.n	80094d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80094c2:	2200      	movs	r2, #0
 80094c4:	a901      	add	r1, sp, #4
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff fe22 	bl	8009110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	6020      	str	r0, [r4, #0]
 80094d0:	60a3      	str	r3, [r4, #8]
 80094d2:	4632      	mov	r2, r6
 80094d4:	4629      	mov	r1, r5
 80094d6:	6820      	ldr	r0, [r4, #0]
 80094d8:	f7ff fe87 	bl	80091ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80094dc:	9b01      	ldr	r3, [sp, #4]
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	6063      	str	r3, [r4, #4]
 80094e2:	2100      	movs	r1, #0
 80094e4:	54d1      	strb	r1, [r2, r3]
 80094e6:	b002      	add	sp, #8
 80094e8:	bd70      	pop	{r4, r5, r6, pc}
 80094ea:	bf00      	nop
 80094ec:	0800c5db 	.word	0x0800c5db

080094f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	f100 0308 	add.w	r3, r0, #8
 80094f6:	4604      	mov	r4, r0
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	460d      	mov	r5, r1
 80094fc:	b159      	cbz	r1, 8009516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80094fe:	4608      	mov	r0, r1
 8009500:	f7f6 feb6 	bl	8000270 <strlen>
 8009504:	182a      	adds	r2, r5, r0
 8009506:	4620      	mov	r0, r4
 8009508:	f04f 0300 	mov.w	r3, #0
 800950c:	4629      	mov	r1, r5
 800950e:	f7ff ffcb 	bl	80094a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009512:	4620      	mov	r0, r4
 8009514:	bd38      	pop	{r3, r4, r5, pc}
 8009516:	2201      	movs	r2, #1
 8009518:	e7f5      	b.n	8009506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800951a <_ZdlPv>:
 800951a:	f000 b853 	b.w	80095c4 <free>

0800951e <_Znwj>:
 800951e:	2801      	cmp	r0, #1
 8009520:	bf38      	it	cc
 8009522:	2001      	movcc	r0, #1
 8009524:	b510      	push	{r4, lr}
 8009526:	4604      	mov	r4, r0
 8009528:	4620      	mov	r0, r4
 800952a:	f000 f843 	bl	80095b4 <malloc>
 800952e:	b930      	cbnz	r0, 800953e <_Znwj+0x20>
 8009530:	f000 f806 	bl	8009540 <_ZSt15get_new_handlerv>
 8009534:	b908      	cbnz	r0, 800953a <_Znwj+0x1c>
 8009536:	f000 f80b 	bl	8009550 <abort>
 800953a:	4780      	blx	r0
 800953c:	e7f4      	b.n	8009528 <_Znwj+0xa>
 800953e:	bd10      	pop	{r4, pc}

08009540 <_ZSt15get_new_handlerv>:
 8009540:	4b02      	ldr	r3, [pc, #8]	; (800954c <_ZSt15get_new_handlerv+0xc>)
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	f3bf 8f5b 	dmb	ish
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20000844 	.word	0x20000844

08009550 <abort>:
 8009550:	b508      	push	{r3, lr}
 8009552:	2006      	movs	r0, #6
 8009554:	f000 fdf0 	bl	800a138 <raise>
 8009558:	2001      	movs	r0, #1
 800955a:	f7f9 f979 	bl	8002850 <_exit>
	...

08009560 <__errno>:
 8009560:	4b01      	ldr	r3, [pc, #4]	; (8009568 <__errno+0x8>)
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	2000000c 	.word	0x2000000c

0800956c <__libc_init_array>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	4d0d      	ldr	r5, [pc, #52]	; (80095a4 <__libc_init_array+0x38>)
 8009570:	4c0d      	ldr	r4, [pc, #52]	; (80095a8 <__libc_init_array+0x3c>)
 8009572:	1b64      	subs	r4, r4, r5
 8009574:	10a4      	asrs	r4, r4, #2
 8009576:	2600      	movs	r6, #0
 8009578:	42a6      	cmp	r6, r4
 800957a:	d109      	bne.n	8009590 <__libc_init_array+0x24>
 800957c:	4d0b      	ldr	r5, [pc, #44]	; (80095ac <__libc_init_array+0x40>)
 800957e:	4c0c      	ldr	r4, [pc, #48]	; (80095b0 <__libc_init_array+0x44>)
 8009580:	f002 ff2c 	bl	800c3dc <_init>
 8009584:	1b64      	subs	r4, r4, r5
 8009586:	10a4      	asrs	r4, r4, #2
 8009588:	2600      	movs	r6, #0
 800958a:	42a6      	cmp	r6, r4
 800958c:	d105      	bne.n	800959a <__libc_init_array+0x2e>
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	f855 3b04 	ldr.w	r3, [r5], #4
 8009594:	4798      	blx	r3
 8009596:	3601      	adds	r6, #1
 8009598:	e7ee      	b.n	8009578 <__libc_init_array+0xc>
 800959a:	f855 3b04 	ldr.w	r3, [r5], #4
 800959e:	4798      	blx	r3
 80095a0:	3601      	adds	r6, #1
 80095a2:	e7f2      	b.n	800958a <__libc_init_array+0x1e>
 80095a4:	0800c9ec 	.word	0x0800c9ec
 80095a8:	0800c9ec 	.word	0x0800c9ec
 80095ac:	0800c9ec 	.word	0x0800c9ec
 80095b0:	0800c9f4 	.word	0x0800c9f4

080095b4 <malloc>:
 80095b4:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <malloc+0xc>)
 80095b6:	4601      	mov	r1, r0
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	f000 b8a7 	b.w	800970c <_malloc_r>
 80095be:	bf00      	nop
 80095c0:	2000000c 	.word	0x2000000c

080095c4 <free>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <free+0xc>)
 80095c6:	4601      	mov	r1, r0
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f000 b833 	b.w	8009634 <_free_r>
 80095ce:	bf00      	nop
 80095d0:	2000000c 	.word	0x2000000c

080095d4 <memcpy>:
 80095d4:	440a      	add	r2, r1
 80095d6:	4291      	cmp	r1, r2
 80095d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095dc:	d100      	bne.n	80095e0 <memcpy+0xc>
 80095de:	4770      	bx	lr
 80095e0:	b510      	push	{r4, lr}
 80095e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ea:	4291      	cmp	r1, r2
 80095ec:	d1f9      	bne.n	80095e2 <memcpy+0xe>
 80095ee:	bd10      	pop	{r4, pc}

080095f0 <memmove>:
 80095f0:	4288      	cmp	r0, r1
 80095f2:	b510      	push	{r4, lr}
 80095f4:	eb01 0402 	add.w	r4, r1, r2
 80095f8:	d902      	bls.n	8009600 <memmove+0x10>
 80095fa:	4284      	cmp	r4, r0
 80095fc:	4623      	mov	r3, r4
 80095fe:	d807      	bhi.n	8009610 <memmove+0x20>
 8009600:	1e43      	subs	r3, r0, #1
 8009602:	42a1      	cmp	r1, r4
 8009604:	d008      	beq.n	8009618 <memmove+0x28>
 8009606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800960a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800960e:	e7f8      	b.n	8009602 <memmove+0x12>
 8009610:	4402      	add	r2, r0
 8009612:	4601      	mov	r1, r0
 8009614:	428a      	cmp	r2, r1
 8009616:	d100      	bne.n	800961a <memmove+0x2a>
 8009618:	bd10      	pop	{r4, pc}
 800961a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800961e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009622:	e7f7      	b.n	8009614 <memmove+0x24>

08009624 <memset>:
 8009624:	4402      	add	r2, r0
 8009626:	4603      	mov	r3, r0
 8009628:	4293      	cmp	r3, r2
 800962a:	d100      	bne.n	800962e <memset+0xa>
 800962c:	4770      	bx	lr
 800962e:	f803 1b01 	strb.w	r1, [r3], #1
 8009632:	e7f9      	b.n	8009628 <memset+0x4>

08009634 <_free_r>:
 8009634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009636:	2900      	cmp	r1, #0
 8009638:	d044      	beq.n	80096c4 <_free_r+0x90>
 800963a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800963e:	9001      	str	r0, [sp, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f1a1 0404 	sub.w	r4, r1, #4
 8009646:	bfb8      	it	lt
 8009648:	18e4      	addlt	r4, r4, r3
 800964a:	f001 fc4b 	bl	800aee4 <__malloc_lock>
 800964e:	4a1e      	ldr	r2, [pc, #120]	; (80096c8 <_free_r+0x94>)
 8009650:	9801      	ldr	r0, [sp, #4]
 8009652:	6813      	ldr	r3, [r2, #0]
 8009654:	b933      	cbnz	r3, 8009664 <_free_r+0x30>
 8009656:	6063      	str	r3, [r4, #4]
 8009658:	6014      	str	r4, [r2, #0]
 800965a:	b003      	add	sp, #12
 800965c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009660:	f001 bc46 	b.w	800aef0 <__malloc_unlock>
 8009664:	42a3      	cmp	r3, r4
 8009666:	d908      	bls.n	800967a <_free_r+0x46>
 8009668:	6825      	ldr	r5, [r4, #0]
 800966a:	1961      	adds	r1, r4, r5
 800966c:	428b      	cmp	r3, r1
 800966e:	bf01      	itttt	eq
 8009670:	6819      	ldreq	r1, [r3, #0]
 8009672:	685b      	ldreq	r3, [r3, #4]
 8009674:	1949      	addeq	r1, r1, r5
 8009676:	6021      	streq	r1, [r4, #0]
 8009678:	e7ed      	b.n	8009656 <_free_r+0x22>
 800967a:	461a      	mov	r2, r3
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	b10b      	cbz	r3, 8009684 <_free_r+0x50>
 8009680:	42a3      	cmp	r3, r4
 8009682:	d9fa      	bls.n	800967a <_free_r+0x46>
 8009684:	6811      	ldr	r1, [r2, #0]
 8009686:	1855      	adds	r5, r2, r1
 8009688:	42a5      	cmp	r5, r4
 800968a:	d10b      	bne.n	80096a4 <_free_r+0x70>
 800968c:	6824      	ldr	r4, [r4, #0]
 800968e:	4421      	add	r1, r4
 8009690:	1854      	adds	r4, r2, r1
 8009692:	42a3      	cmp	r3, r4
 8009694:	6011      	str	r1, [r2, #0]
 8009696:	d1e0      	bne.n	800965a <_free_r+0x26>
 8009698:	681c      	ldr	r4, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	6053      	str	r3, [r2, #4]
 800969e:	4421      	add	r1, r4
 80096a0:	6011      	str	r1, [r2, #0]
 80096a2:	e7da      	b.n	800965a <_free_r+0x26>
 80096a4:	d902      	bls.n	80096ac <_free_r+0x78>
 80096a6:	230c      	movs	r3, #12
 80096a8:	6003      	str	r3, [r0, #0]
 80096aa:	e7d6      	b.n	800965a <_free_r+0x26>
 80096ac:	6825      	ldr	r5, [r4, #0]
 80096ae:	1961      	adds	r1, r4, r5
 80096b0:	428b      	cmp	r3, r1
 80096b2:	bf04      	itt	eq
 80096b4:	6819      	ldreq	r1, [r3, #0]
 80096b6:	685b      	ldreq	r3, [r3, #4]
 80096b8:	6063      	str	r3, [r4, #4]
 80096ba:	bf04      	itt	eq
 80096bc:	1949      	addeq	r1, r1, r5
 80096be:	6021      	streq	r1, [r4, #0]
 80096c0:	6054      	str	r4, [r2, #4]
 80096c2:	e7ca      	b.n	800965a <_free_r+0x26>
 80096c4:	b003      	add	sp, #12
 80096c6:	bd30      	pop	{r4, r5, pc}
 80096c8:	20000848 	.word	0x20000848

080096cc <sbrk_aligned>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	4e0e      	ldr	r6, [pc, #56]	; (8009708 <sbrk_aligned+0x3c>)
 80096d0:	460c      	mov	r4, r1
 80096d2:	6831      	ldr	r1, [r6, #0]
 80096d4:	4605      	mov	r5, r0
 80096d6:	b911      	cbnz	r1, 80096de <sbrk_aligned+0x12>
 80096d8:	f000 fcf6 	bl	800a0c8 <_sbrk_r>
 80096dc:	6030      	str	r0, [r6, #0]
 80096de:	4621      	mov	r1, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	f000 fcf1 	bl	800a0c8 <_sbrk_r>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	d00a      	beq.n	8009700 <sbrk_aligned+0x34>
 80096ea:	1cc4      	adds	r4, r0, #3
 80096ec:	f024 0403 	bic.w	r4, r4, #3
 80096f0:	42a0      	cmp	r0, r4
 80096f2:	d007      	beq.n	8009704 <sbrk_aligned+0x38>
 80096f4:	1a21      	subs	r1, r4, r0
 80096f6:	4628      	mov	r0, r5
 80096f8:	f000 fce6 	bl	800a0c8 <_sbrk_r>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d101      	bne.n	8009704 <sbrk_aligned+0x38>
 8009700:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009704:	4620      	mov	r0, r4
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	2000084c 	.word	0x2000084c

0800970c <_malloc_r>:
 800970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009710:	1ccd      	adds	r5, r1, #3
 8009712:	f025 0503 	bic.w	r5, r5, #3
 8009716:	3508      	adds	r5, #8
 8009718:	2d0c      	cmp	r5, #12
 800971a:	bf38      	it	cc
 800971c:	250c      	movcc	r5, #12
 800971e:	2d00      	cmp	r5, #0
 8009720:	4607      	mov	r7, r0
 8009722:	db01      	blt.n	8009728 <_malloc_r+0x1c>
 8009724:	42a9      	cmp	r1, r5
 8009726:	d905      	bls.n	8009734 <_malloc_r+0x28>
 8009728:	230c      	movs	r3, #12
 800972a:	603b      	str	r3, [r7, #0]
 800972c:	2600      	movs	r6, #0
 800972e:	4630      	mov	r0, r6
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	4e2e      	ldr	r6, [pc, #184]	; (80097f0 <_malloc_r+0xe4>)
 8009736:	f001 fbd5 	bl	800aee4 <__malloc_lock>
 800973a:	6833      	ldr	r3, [r6, #0]
 800973c:	461c      	mov	r4, r3
 800973e:	bb34      	cbnz	r4, 800978e <_malloc_r+0x82>
 8009740:	4629      	mov	r1, r5
 8009742:	4638      	mov	r0, r7
 8009744:	f7ff ffc2 	bl	80096cc <sbrk_aligned>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	4604      	mov	r4, r0
 800974c:	d14d      	bne.n	80097ea <_malloc_r+0xde>
 800974e:	6834      	ldr	r4, [r6, #0]
 8009750:	4626      	mov	r6, r4
 8009752:	2e00      	cmp	r6, #0
 8009754:	d140      	bne.n	80097d8 <_malloc_r+0xcc>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	4631      	mov	r1, r6
 800975a:	4638      	mov	r0, r7
 800975c:	eb04 0803 	add.w	r8, r4, r3
 8009760:	f000 fcb2 	bl	800a0c8 <_sbrk_r>
 8009764:	4580      	cmp	r8, r0
 8009766:	d13a      	bne.n	80097de <_malloc_r+0xd2>
 8009768:	6821      	ldr	r1, [r4, #0]
 800976a:	3503      	adds	r5, #3
 800976c:	1a6d      	subs	r5, r5, r1
 800976e:	f025 0503 	bic.w	r5, r5, #3
 8009772:	3508      	adds	r5, #8
 8009774:	2d0c      	cmp	r5, #12
 8009776:	bf38      	it	cc
 8009778:	250c      	movcc	r5, #12
 800977a:	4629      	mov	r1, r5
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff ffa5 	bl	80096cc <sbrk_aligned>
 8009782:	3001      	adds	r0, #1
 8009784:	d02b      	beq.n	80097de <_malloc_r+0xd2>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	442b      	add	r3, r5
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	e00e      	b.n	80097ac <_malloc_r+0xa0>
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	1b52      	subs	r2, r2, r5
 8009792:	d41e      	bmi.n	80097d2 <_malloc_r+0xc6>
 8009794:	2a0b      	cmp	r2, #11
 8009796:	d916      	bls.n	80097c6 <_malloc_r+0xba>
 8009798:	1961      	adds	r1, r4, r5
 800979a:	42a3      	cmp	r3, r4
 800979c:	6025      	str	r5, [r4, #0]
 800979e:	bf18      	it	ne
 80097a0:	6059      	strne	r1, [r3, #4]
 80097a2:	6863      	ldr	r3, [r4, #4]
 80097a4:	bf08      	it	eq
 80097a6:	6031      	streq	r1, [r6, #0]
 80097a8:	5162      	str	r2, [r4, r5]
 80097aa:	604b      	str	r3, [r1, #4]
 80097ac:	4638      	mov	r0, r7
 80097ae:	f104 060b 	add.w	r6, r4, #11
 80097b2:	f001 fb9d 	bl	800aef0 <__malloc_unlock>
 80097b6:	f026 0607 	bic.w	r6, r6, #7
 80097ba:	1d23      	adds	r3, r4, #4
 80097bc:	1af2      	subs	r2, r6, r3
 80097be:	d0b6      	beq.n	800972e <_malloc_r+0x22>
 80097c0:	1b9b      	subs	r3, r3, r6
 80097c2:	50a3      	str	r3, [r4, r2]
 80097c4:	e7b3      	b.n	800972e <_malloc_r+0x22>
 80097c6:	6862      	ldr	r2, [r4, #4]
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	bf0c      	ite	eq
 80097cc:	6032      	streq	r2, [r6, #0]
 80097ce:	605a      	strne	r2, [r3, #4]
 80097d0:	e7ec      	b.n	80097ac <_malloc_r+0xa0>
 80097d2:	4623      	mov	r3, r4
 80097d4:	6864      	ldr	r4, [r4, #4]
 80097d6:	e7b2      	b.n	800973e <_malloc_r+0x32>
 80097d8:	4634      	mov	r4, r6
 80097da:	6876      	ldr	r6, [r6, #4]
 80097dc:	e7b9      	b.n	8009752 <_malloc_r+0x46>
 80097de:	230c      	movs	r3, #12
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	4638      	mov	r0, r7
 80097e4:	f001 fb84 	bl	800aef0 <__malloc_unlock>
 80097e8:	e7a1      	b.n	800972e <_malloc_r+0x22>
 80097ea:	6025      	str	r5, [r4, #0]
 80097ec:	e7de      	b.n	80097ac <_malloc_r+0xa0>
 80097ee:	bf00      	nop
 80097f0:	20000848 	.word	0x20000848

080097f4 <__cvt>:
 80097f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097f8:	ec55 4b10 	vmov	r4, r5, d0
 80097fc:	2d00      	cmp	r5, #0
 80097fe:	460e      	mov	r6, r1
 8009800:	4619      	mov	r1, r3
 8009802:	462b      	mov	r3, r5
 8009804:	bfbb      	ittet	lt
 8009806:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800980a:	461d      	movlt	r5, r3
 800980c:	2300      	movge	r3, #0
 800980e:	232d      	movlt	r3, #45	; 0x2d
 8009810:	700b      	strb	r3, [r1, #0]
 8009812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009814:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009818:	4691      	mov	r9, r2
 800981a:	f023 0820 	bic.w	r8, r3, #32
 800981e:	bfbc      	itt	lt
 8009820:	4622      	movlt	r2, r4
 8009822:	4614      	movlt	r4, r2
 8009824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009828:	d005      	beq.n	8009836 <__cvt+0x42>
 800982a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800982e:	d100      	bne.n	8009832 <__cvt+0x3e>
 8009830:	3601      	adds	r6, #1
 8009832:	2102      	movs	r1, #2
 8009834:	e000      	b.n	8009838 <__cvt+0x44>
 8009836:	2103      	movs	r1, #3
 8009838:	ab03      	add	r3, sp, #12
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	ab02      	add	r3, sp, #8
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	ec45 4b10 	vmov	d0, r4, r5
 8009844:	4653      	mov	r3, sl
 8009846:	4632      	mov	r2, r6
 8009848:	f000 fd5a 	bl	800a300 <_dtoa_r>
 800984c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009850:	4607      	mov	r7, r0
 8009852:	d102      	bne.n	800985a <__cvt+0x66>
 8009854:	f019 0f01 	tst.w	r9, #1
 8009858:	d022      	beq.n	80098a0 <__cvt+0xac>
 800985a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800985e:	eb07 0906 	add.w	r9, r7, r6
 8009862:	d110      	bne.n	8009886 <__cvt+0x92>
 8009864:	783b      	ldrb	r3, [r7, #0]
 8009866:	2b30      	cmp	r3, #48	; 0x30
 8009868:	d10a      	bne.n	8009880 <__cvt+0x8c>
 800986a:	2200      	movs	r2, #0
 800986c:	2300      	movs	r3, #0
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f7f7 f929 	bl	8000ac8 <__aeabi_dcmpeq>
 8009876:	b918      	cbnz	r0, 8009880 <__cvt+0x8c>
 8009878:	f1c6 0601 	rsb	r6, r6, #1
 800987c:	f8ca 6000 	str.w	r6, [sl]
 8009880:	f8da 3000 	ldr.w	r3, [sl]
 8009884:	4499      	add	r9, r3
 8009886:	2200      	movs	r2, #0
 8009888:	2300      	movs	r3, #0
 800988a:	4620      	mov	r0, r4
 800988c:	4629      	mov	r1, r5
 800988e:	f7f7 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009892:	b108      	cbz	r0, 8009898 <__cvt+0xa4>
 8009894:	f8cd 900c 	str.w	r9, [sp, #12]
 8009898:	2230      	movs	r2, #48	; 0x30
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	454b      	cmp	r3, r9
 800989e:	d307      	bcc.n	80098b0 <__cvt+0xbc>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098a4:	1bdb      	subs	r3, r3, r7
 80098a6:	4638      	mov	r0, r7
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	b004      	add	sp, #16
 80098ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b0:	1c59      	adds	r1, r3, #1
 80098b2:	9103      	str	r1, [sp, #12]
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	e7f0      	b.n	800989a <__cvt+0xa6>

080098b8 <__exponent>:
 80098b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ba:	4603      	mov	r3, r0
 80098bc:	2900      	cmp	r1, #0
 80098be:	bfb8      	it	lt
 80098c0:	4249      	neglt	r1, r1
 80098c2:	f803 2b02 	strb.w	r2, [r3], #2
 80098c6:	bfb4      	ite	lt
 80098c8:	222d      	movlt	r2, #45	; 0x2d
 80098ca:	222b      	movge	r2, #43	; 0x2b
 80098cc:	2909      	cmp	r1, #9
 80098ce:	7042      	strb	r2, [r0, #1]
 80098d0:	dd2a      	ble.n	8009928 <__exponent+0x70>
 80098d2:	f10d 0407 	add.w	r4, sp, #7
 80098d6:	46a4      	mov	ip, r4
 80098d8:	270a      	movs	r7, #10
 80098da:	46a6      	mov	lr, r4
 80098dc:	460a      	mov	r2, r1
 80098de:	fb91 f6f7 	sdiv	r6, r1, r7
 80098e2:	fb07 1516 	mls	r5, r7, r6, r1
 80098e6:	3530      	adds	r5, #48	; 0x30
 80098e8:	2a63      	cmp	r2, #99	; 0x63
 80098ea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80098ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098f2:	4631      	mov	r1, r6
 80098f4:	dcf1      	bgt.n	80098da <__exponent+0x22>
 80098f6:	3130      	adds	r1, #48	; 0x30
 80098f8:	f1ae 0502 	sub.w	r5, lr, #2
 80098fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009900:	1c44      	adds	r4, r0, #1
 8009902:	4629      	mov	r1, r5
 8009904:	4561      	cmp	r1, ip
 8009906:	d30a      	bcc.n	800991e <__exponent+0x66>
 8009908:	f10d 0209 	add.w	r2, sp, #9
 800990c:	eba2 020e 	sub.w	r2, r2, lr
 8009910:	4565      	cmp	r5, ip
 8009912:	bf88      	it	hi
 8009914:	2200      	movhi	r2, #0
 8009916:	4413      	add	r3, r2
 8009918:	1a18      	subs	r0, r3, r0
 800991a:	b003      	add	sp, #12
 800991c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800991e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009922:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009926:	e7ed      	b.n	8009904 <__exponent+0x4c>
 8009928:	2330      	movs	r3, #48	; 0x30
 800992a:	3130      	adds	r1, #48	; 0x30
 800992c:	7083      	strb	r3, [r0, #2]
 800992e:	70c1      	strb	r1, [r0, #3]
 8009930:	1d03      	adds	r3, r0, #4
 8009932:	e7f1      	b.n	8009918 <__exponent+0x60>

08009934 <_printf_float>:
 8009934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	ed2d 8b02 	vpush	{d8}
 800993c:	b08d      	sub	sp, #52	; 0x34
 800993e:	460c      	mov	r4, r1
 8009940:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009944:	4616      	mov	r6, r2
 8009946:	461f      	mov	r7, r3
 8009948:	4605      	mov	r5, r0
 800994a:	f001 fac7 	bl	800aedc <_localeconv_r>
 800994e:	f8d0 a000 	ldr.w	sl, [r0]
 8009952:	4650      	mov	r0, sl
 8009954:	f7f6 fc8c 	bl	8000270 <strlen>
 8009958:	2300      	movs	r3, #0
 800995a:	930a      	str	r3, [sp, #40]	; 0x28
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	9305      	str	r3, [sp, #20]
 8009960:	f8d8 3000 	ldr.w	r3, [r8]
 8009964:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009968:	3307      	adds	r3, #7
 800996a:	f023 0307 	bic.w	r3, r3, #7
 800996e:	f103 0208 	add.w	r2, r3, #8
 8009972:	f8c8 2000 	str.w	r2, [r8]
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800997e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009986:	9307      	str	r3, [sp, #28]
 8009988:	f8cd 8018 	str.w	r8, [sp, #24]
 800998c:	ee08 0a10 	vmov	s16, r0
 8009990:	4b9f      	ldr	r3, [pc, #636]	; (8009c10 <_printf_float+0x2dc>)
 8009992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800999a:	f7f7 f8c7 	bl	8000b2c <__aeabi_dcmpun>
 800999e:	bb88      	cbnz	r0, 8009a04 <_printf_float+0xd0>
 80099a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099a4:	4b9a      	ldr	r3, [pc, #616]	; (8009c10 <_printf_float+0x2dc>)
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099aa:	f7f7 f8a1 	bl	8000af0 <__aeabi_dcmple>
 80099ae:	bb48      	cbnz	r0, 8009a04 <_printf_float+0xd0>
 80099b0:	2200      	movs	r2, #0
 80099b2:	2300      	movs	r3, #0
 80099b4:	4640      	mov	r0, r8
 80099b6:	4649      	mov	r1, r9
 80099b8:	f7f7 f890 	bl	8000adc <__aeabi_dcmplt>
 80099bc:	b110      	cbz	r0, 80099c4 <_printf_float+0x90>
 80099be:	232d      	movs	r3, #45	; 0x2d
 80099c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c4:	4b93      	ldr	r3, [pc, #588]	; (8009c14 <_printf_float+0x2e0>)
 80099c6:	4894      	ldr	r0, [pc, #592]	; (8009c18 <_printf_float+0x2e4>)
 80099c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099cc:	bf94      	ite	ls
 80099ce:	4698      	movls	r8, r3
 80099d0:	4680      	movhi	r8, r0
 80099d2:	2303      	movs	r3, #3
 80099d4:	6123      	str	r3, [r4, #16]
 80099d6:	9b05      	ldr	r3, [sp, #20]
 80099d8:	f023 0204 	bic.w	r2, r3, #4
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	f04f 0900 	mov.w	r9, #0
 80099e2:	9700      	str	r7, [sp, #0]
 80099e4:	4633      	mov	r3, r6
 80099e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80099e8:	4621      	mov	r1, r4
 80099ea:	4628      	mov	r0, r5
 80099ec:	f000 f9d8 	bl	8009da0 <_printf_common>
 80099f0:	3001      	adds	r0, #1
 80099f2:	f040 8090 	bne.w	8009b16 <_printf_float+0x1e2>
 80099f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099fa:	b00d      	add	sp, #52	; 0x34
 80099fc:	ecbd 8b02 	vpop	{d8}
 8009a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	f7f7 f88e 	bl	8000b2c <__aeabi_dcmpun>
 8009a10:	b140      	cbz	r0, 8009a24 <_printf_float+0xf0>
 8009a12:	464b      	mov	r3, r9
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bfbc      	itt	lt
 8009a18:	232d      	movlt	r3, #45	; 0x2d
 8009a1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a1e:	487f      	ldr	r0, [pc, #508]	; (8009c1c <_printf_float+0x2e8>)
 8009a20:	4b7f      	ldr	r3, [pc, #508]	; (8009c20 <_printf_float+0x2ec>)
 8009a22:	e7d1      	b.n	80099c8 <_printf_float+0x94>
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a2a:	9206      	str	r2, [sp, #24]
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	d13f      	bne.n	8009ab0 <_printf_float+0x17c>
 8009a30:	2306      	movs	r3, #6
 8009a32:	6063      	str	r3, [r4, #4]
 8009a34:	9b05      	ldr	r3, [sp, #20]
 8009a36:	6861      	ldr	r1, [r4, #4]
 8009a38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9303      	str	r3, [sp, #12]
 8009a40:	ab0a      	add	r3, sp, #40	; 0x28
 8009a42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a46:	ab09      	add	r3, sp, #36	; 0x24
 8009a48:	ec49 8b10 	vmov	d0, r8, r9
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	6022      	str	r2, [r4, #0]
 8009a50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a54:	4628      	mov	r0, r5
 8009a56:	f7ff fecd 	bl	80097f4 <__cvt>
 8009a5a:	9b06      	ldr	r3, [sp, #24]
 8009a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a5e:	2b47      	cmp	r3, #71	; 0x47
 8009a60:	4680      	mov	r8, r0
 8009a62:	d108      	bne.n	8009a76 <_printf_float+0x142>
 8009a64:	1cc8      	adds	r0, r1, #3
 8009a66:	db02      	blt.n	8009a6e <_printf_float+0x13a>
 8009a68:	6863      	ldr	r3, [r4, #4]
 8009a6a:	4299      	cmp	r1, r3
 8009a6c:	dd41      	ble.n	8009af2 <_printf_float+0x1be>
 8009a6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a72:	fa5f fb8b 	uxtb.w	fp, fp
 8009a76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a7a:	d820      	bhi.n	8009abe <_printf_float+0x18a>
 8009a7c:	3901      	subs	r1, #1
 8009a7e:	465a      	mov	r2, fp
 8009a80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a84:	9109      	str	r1, [sp, #36]	; 0x24
 8009a86:	f7ff ff17 	bl	80098b8 <__exponent>
 8009a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a8c:	1813      	adds	r3, r2, r0
 8009a8e:	2a01      	cmp	r2, #1
 8009a90:	4681      	mov	r9, r0
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	dc02      	bgt.n	8009a9c <_printf_float+0x168>
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	07d2      	lsls	r2, r2, #31
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_float+0x16c>
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	6123      	str	r3, [r4, #16]
 8009aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d09c      	beq.n	80099e2 <_printf_float+0xae>
 8009aa8:	232d      	movs	r3, #45	; 0x2d
 8009aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aae:	e798      	b.n	80099e2 <_printf_float+0xae>
 8009ab0:	9a06      	ldr	r2, [sp, #24]
 8009ab2:	2a47      	cmp	r2, #71	; 0x47
 8009ab4:	d1be      	bne.n	8009a34 <_printf_float+0x100>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1bc      	bne.n	8009a34 <_printf_float+0x100>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e7b9      	b.n	8009a32 <_printf_float+0xfe>
 8009abe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ac2:	d118      	bne.n	8009af6 <_printf_float+0x1c2>
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	6863      	ldr	r3, [r4, #4]
 8009ac8:	dd0b      	ble.n	8009ae2 <_printf_float+0x1ae>
 8009aca:	6121      	str	r1, [r4, #16]
 8009acc:	b913      	cbnz	r3, 8009ad4 <_printf_float+0x1a0>
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	07d0      	lsls	r0, r2, #31
 8009ad2:	d502      	bpl.n	8009ada <_printf_float+0x1a6>
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	440b      	add	r3, r1
 8009ad8:	6123      	str	r3, [r4, #16]
 8009ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8009adc:	f04f 0900 	mov.w	r9, #0
 8009ae0:	e7de      	b.n	8009aa0 <_printf_float+0x16c>
 8009ae2:	b913      	cbnz	r3, 8009aea <_printf_float+0x1b6>
 8009ae4:	6822      	ldr	r2, [r4, #0]
 8009ae6:	07d2      	lsls	r2, r2, #31
 8009ae8:	d501      	bpl.n	8009aee <_printf_float+0x1ba>
 8009aea:	3302      	adds	r3, #2
 8009aec:	e7f4      	b.n	8009ad8 <_printf_float+0x1a4>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e7f2      	b.n	8009ad8 <_printf_float+0x1a4>
 8009af2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af8:	4299      	cmp	r1, r3
 8009afa:	db05      	blt.n	8009b08 <_printf_float+0x1d4>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	6121      	str	r1, [r4, #16]
 8009b00:	07d8      	lsls	r0, r3, #31
 8009b02:	d5ea      	bpl.n	8009ada <_printf_float+0x1a6>
 8009b04:	1c4b      	adds	r3, r1, #1
 8009b06:	e7e7      	b.n	8009ad8 <_printf_float+0x1a4>
 8009b08:	2900      	cmp	r1, #0
 8009b0a:	bfd4      	ite	le
 8009b0c:	f1c1 0202 	rsble	r2, r1, #2
 8009b10:	2201      	movgt	r2, #1
 8009b12:	4413      	add	r3, r2
 8009b14:	e7e0      	b.n	8009ad8 <_printf_float+0x1a4>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	055a      	lsls	r2, r3, #21
 8009b1a:	d407      	bmi.n	8009b2c <_printf_float+0x1f8>
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	4642      	mov	r2, r8
 8009b20:	4631      	mov	r1, r6
 8009b22:	4628      	mov	r0, r5
 8009b24:	47b8      	blx	r7
 8009b26:	3001      	adds	r0, #1
 8009b28:	d12c      	bne.n	8009b84 <_printf_float+0x250>
 8009b2a:	e764      	b.n	80099f6 <_printf_float+0xc2>
 8009b2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b30:	f240 80e0 	bls.w	8009cf4 <_printf_float+0x3c0>
 8009b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f7f6 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d034      	beq.n	8009bae <_printf_float+0x27a>
 8009b44:	4a37      	ldr	r2, [pc, #220]	; (8009c24 <_printf_float+0x2f0>)
 8009b46:	2301      	movs	r3, #1
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f af51 	beq.w	80099f6 <_printf_float+0xc2>
 8009b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	db02      	blt.n	8009b62 <_printf_float+0x22e>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	07d8      	lsls	r0, r3, #31
 8009b60:	d510      	bpl.n	8009b84 <_printf_float+0x250>
 8009b62:	ee18 3a10 	vmov	r3, s16
 8009b66:	4652      	mov	r2, sl
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f af41 	beq.w	80099f6 <_printf_float+0xc2>
 8009b74:	f04f 0800 	mov.w	r8, #0
 8009b78:	f104 091a 	add.w	r9, r4, #26
 8009b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	4543      	cmp	r3, r8
 8009b82:	dc09      	bgt.n	8009b98 <_printf_float+0x264>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	079b      	lsls	r3, r3, #30
 8009b88:	f100 8105 	bmi.w	8009d96 <_printf_float+0x462>
 8009b8c:	68e0      	ldr	r0, [r4, #12]
 8009b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b90:	4298      	cmp	r0, r3
 8009b92:	bfb8      	it	lt
 8009b94:	4618      	movlt	r0, r3
 8009b96:	e730      	b.n	80099fa <_printf_float+0xc6>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	464a      	mov	r2, r9
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	f43f af27 	beq.w	80099f6 <_printf_float+0xc2>
 8009ba8:	f108 0801 	add.w	r8, r8, #1
 8009bac:	e7e6      	b.n	8009b7c <_printf_float+0x248>
 8009bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dc39      	bgt.n	8009c28 <_printf_float+0x2f4>
 8009bb4:	4a1b      	ldr	r2, [pc, #108]	; (8009c24 <_printf_float+0x2f0>)
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f43f af19 	beq.w	80099f6 <_printf_float+0xc2>
 8009bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	d102      	bne.n	8009bd2 <_printf_float+0x29e>
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d5d8      	bpl.n	8009b84 <_printf_float+0x250>
 8009bd2:	ee18 3a10 	vmov	r3, s16
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f af09 	beq.w	80099f6 <_printf_float+0xc2>
 8009be4:	f04f 0900 	mov.w	r9, #0
 8009be8:	f104 0a1a 	add.w	sl, r4, #26
 8009bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bee:	425b      	negs	r3, r3
 8009bf0:	454b      	cmp	r3, r9
 8009bf2:	dc01      	bgt.n	8009bf8 <_printf_float+0x2c4>
 8009bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf6:	e792      	b.n	8009b1e <_printf_float+0x1ea>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	4652      	mov	r2, sl
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	f43f aef7 	beq.w	80099f6 <_printf_float+0xc2>
 8009c08:	f109 0901 	add.w	r9, r9, #1
 8009c0c:	e7ee      	b.n	8009bec <_printf_float+0x2b8>
 8009c0e:	bf00      	nop
 8009c10:	7fefffff 	.word	0x7fefffff
 8009c14:	0800c60c 	.word	0x0800c60c
 8009c18:	0800c610 	.word	0x0800c610
 8009c1c:	0800c618 	.word	0x0800c618
 8009c20:	0800c614 	.word	0x0800c614
 8009c24:	0800c61c 	.word	0x0800c61c
 8009c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	bfa8      	it	ge
 8009c30:	461a      	movge	r2, r3
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	4691      	mov	r9, r2
 8009c36:	dc37      	bgt.n	8009ca8 <_printf_float+0x374>
 8009c38:	f04f 0b00 	mov.w	fp, #0
 8009c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c40:	f104 021a 	add.w	r2, r4, #26
 8009c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c46:	9305      	str	r3, [sp, #20]
 8009c48:	eba3 0309 	sub.w	r3, r3, r9
 8009c4c:	455b      	cmp	r3, fp
 8009c4e:	dc33      	bgt.n	8009cb8 <_printf_float+0x384>
 8009c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c54:	429a      	cmp	r2, r3
 8009c56:	db3b      	blt.n	8009cd0 <_printf_float+0x39c>
 8009c58:	6823      	ldr	r3, [r4, #0]
 8009c5a:	07da      	lsls	r2, r3, #31
 8009c5c:	d438      	bmi.n	8009cd0 <_printf_float+0x39c>
 8009c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c60:	9a05      	ldr	r2, [sp, #20]
 8009c62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c64:	1a9a      	subs	r2, r3, r2
 8009c66:	eba3 0901 	sub.w	r9, r3, r1
 8009c6a:	4591      	cmp	r9, r2
 8009c6c:	bfa8      	it	ge
 8009c6e:	4691      	movge	r9, r2
 8009c70:	f1b9 0f00 	cmp.w	r9, #0
 8009c74:	dc35      	bgt.n	8009ce2 <_printf_float+0x3ae>
 8009c76:	f04f 0800 	mov.w	r8, #0
 8009c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c7e:	f104 0a1a 	add.w	sl, r4, #26
 8009c82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c86:	1a9b      	subs	r3, r3, r2
 8009c88:	eba3 0309 	sub.w	r3, r3, r9
 8009c8c:	4543      	cmp	r3, r8
 8009c8e:	f77f af79 	ble.w	8009b84 <_printf_float+0x250>
 8009c92:	2301      	movs	r3, #1
 8009c94:	4652      	mov	r2, sl
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	f43f aeaa 	beq.w	80099f6 <_printf_float+0xc2>
 8009ca2:	f108 0801 	add.w	r8, r8, #1
 8009ca6:	e7ec      	b.n	8009c82 <_printf_float+0x34e>
 8009ca8:	4613      	mov	r3, r2
 8009caa:	4631      	mov	r1, r6
 8009cac:	4642      	mov	r2, r8
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b8      	blx	r7
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d1c0      	bne.n	8009c38 <_printf_float+0x304>
 8009cb6:	e69e      	b.n	80099f6 <_printf_float+0xc2>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	9205      	str	r2, [sp, #20]
 8009cc0:	47b8      	blx	r7
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	f43f ae97 	beq.w	80099f6 <_printf_float+0xc2>
 8009cc8:	9a05      	ldr	r2, [sp, #20]
 8009cca:	f10b 0b01 	add.w	fp, fp, #1
 8009cce:	e7b9      	b.n	8009c44 <_printf_float+0x310>
 8009cd0:	ee18 3a10 	vmov	r3, s16
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	47b8      	blx	r7
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d1be      	bne.n	8009c5e <_printf_float+0x32a>
 8009ce0:	e689      	b.n	80099f6 <_printf_float+0xc2>
 8009ce2:	9a05      	ldr	r2, [sp, #20]
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	4442      	add	r2, r8
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4628      	mov	r0, r5
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	d1c1      	bne.n	8009c76 <_printf_float+0x342>
 8009cf2:	e680      	b.n	80099f6 <_printf_float+0xc2>
 8009cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cf6:	2a01      	cmp	r2, #1
 8009cf8:	dc01      	bgt.n	8009cfe <_printf_float+0x3ca>
 8009cfa:	07db      	lsls	r3, r3, #31
 8009cfc:	d538      	bpl.n	8009d70 <_printf_float+0x43c>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4642      	mov	r2, r8
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f ae74 	beq.w	80099f6 <_printf_float+0xc2>
 8009d0e:	ee18 3a10 	vmov	r3, s16
 8009d12:	4652      	mov	r2, sl
 8009d14:	4631      	mov	r1, r6
 8009d16:	4628      	mov	r0, r5
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f43f ae6b 	beq.w	80099f6 <_printf_float+0xc2>
 8009d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d24:	2200      	movs	r2, #0
 8009d26:	2300      	movs	r3, #0
 8009d28:	f7f6 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d2c:	b9d8      	cbnz	r0, 8009d66 <_printf_float+0x432>
 8009d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d30:	f108 0201 	add.w	r2, r8, #1
 8009d34:	3b01      	subs	r3, #1
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d10e      	bne.n	8009d5e <_printf_float+0x42a>
 8009d40:	e659      	b.n	80099f6 <_printf_float+0xc2>
 8009d42:	2301      	movs	r3, #1
 8009d44:	4652      	mov	r2, sl
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b8      	blx	r7
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f43f ae52 	beq.w	80099f6 <_printf_float+0xc2>
 8009d52:	f108 0801 	add.w	r8, r8, #1
 8009d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	4543      	cmp	r3, r8
 8009d5c:	dcf1      	bgt.n	8009d42 <_printf_float+0x40e>
 8009d5e:	464b      	mov	r3, r9
 8009d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d64:	e6dc      	b.n	8009b20 <_printf_float+0x1ec>
 8009d66:	f04f 0800 	mov.w	r8, #0
 8009d6a:	f104 0a1a 	add.w	sl, r4, #26
 8009d6e:	e7f2      	b.n	8009d56 <_printf_float+0x422>
 8009d70:	2301      	movs	r3, #1
 8009d72:	4642      	mov	r2, r8
 8009d74:	e7df      	b.n	8009d36 <_printf_float+0x402>
 8009d76:	2301      	movs	r3, #1
 8009d78:	464a      	mov	r2, r9
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b8      	blx	r7
 8009d80:	3001      	adds	r0, #1
 8009d82:	f43f ae38 	beq.w	80099f6 <_printf_float+0xc2>
 8009d86:	f108 0801 	add.w	r8, r8, #1
 8009d8a:	68e3      	ldr	r3, [r4, #12]
 8009d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d8e:	1a5b      	subs	r3, r3, r1
 8009d90:	4543      	cmp	r3, r8
 8009d92:	dcf0      	bgt.n	8009d76 <_printf_float+0x442>
 8009d94:	e6fa      	b.n	8009b8c <_printf_float+0x258>
 8009d96:	f04f 0800 	mov.w	r8, #0
 8009d9a:	f104 0919 	add.w	r9, r4, #25
 8009d9e:	e7f4      	b.n	8009d8a <_printf_float+0x456>

08009da0 <_printf_common>:
 8009da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da4:	4616      	mov	r6, r2
 8009da6:	4699      	mov	r9, r3
 8009da8:	688a      	ldr	r2, [r1, #8]
 8009daa:	690b      	ldr	r3, [r1, #16]
 8009dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009db0:	4293      	cmp	r3, r2
 8009db2:	bfb8      	it	lt
 8009db4:	4613      	movlt	r3, r2
 8009db6:	6033      	str	r3, [r6, #0]
 8009db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	b10a      	cbz	r2, 8009dc6 <_printf_common+0x26>
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	6033      	str	r3, [r6, #0]
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	0699      	lsls	r1, r3, #26
 8009dca:	bf42      	ittt	mi
 8009dcc:	6833      	ldrmi	r3, [r6, #0]
 8009dce:	3302      	addmi	r3, #2
 8009dd0:	6033      	strmi	r3, [r6, #0]
 8009dd2:	6825      	ldr	r5, [r4, #0]
 8009dd4:	f015 0506 	ands.w	r5, r5, #6
 8009dd8:	d106      	bne.n	8009de8 <_printf_common+0x48>
 8009dda:	f104 0a19 	add.w	sl, r4, #25
 8009dde:	68e3      	ldr	r3, [r4, #12]
 8009de0:	6832      	ldr	r2, [r6, #0]
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	42ab      	cmp	r3, r5
 8009de6:	dc26      	bgt.n	8009e36 <_printf_common+0x96>
 8009de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dec:	1e13      	subs	r3, r2, #0
 8009dee:	6822      	ldr	r2, [r4, #0]
 8009df0:	bf18      	it	ne
 8009df2:	2301      	movne	r3, #1
 8009df4:	0692      	lsls	r2, r2, #26
 8009df6:	d42b      	bmi.n	8009e50 <_printf_common+0xb0>
 8009df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	4638      	mov	r0, r7
 8009e00:	47c0      	blx	r8
 8009e02:	3001      	adds	r0, #1
 8009e04:	d01e      	beq.n	8009e44 <_printf_common+0xa4>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	68e5      	ldr	r5, [r4, #12]
 8009e0a:	6832      	ldr	r2, [r6, #0]
 8009e0c:	f003 0306 	and.w	r3, r3, #6
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	bf08      	it	eq
 8009e14:	1aad      	subeq	r5, r5, r2
 8009e16:	68a3      	ldr	r3, [r4, #8]
 8009e18:	6922      	ldr	r2, [r4, #16]
 8009e1a:	bf0c      	ite	eq
 8009e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e20:	2500      	movne	r5, #0
 8009e22:	4293      	cmp	r3, r2
 8009e24:	bfc4      	itt	gt
 8009e26:	1a9b      	subgt	r3, r3, r2
 8009e28:	18ed      	addgt	r5, r5, r3
 8009e2a:	2600      	movs	r6, #0
 8009e2c:	341a      	adds	r4, #26
 8009e2e:	42b5      	cmp	r5, r6
 8009e30:	d11a      	bne.n	8009e68 <_printf_common+0xc8>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e008      	b.n	8009e48 <_printf_common+0xa8>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4652      	mov	r2, sl
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	47c0      	blx	r8
 8009e40:	3001      	adds	r0, #1
 8009e42:	d103      	bne.n	8009e4c <_printf_common+0xac>
 8009e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4c:	3501      	adds	r5, #1
 8009e4e:	e7c6      	b.n	8009dde <_printf_common+0x3e>
 8009e50:	18e1      	adds	r1, r4, r3
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	2030      	movs	r0, #48	; 0x30
 8009e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e5a:	4422      	add	r2, r4
 8009e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e64:	3302      	adds	r3, #2
 8009e66:	e7c7      	b.n	8009df8 <_printf_common+0x58>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	4649      	mov	r1, r9
 8009e6e:	4638      	mov	r0, r7
 8009e70:	47c0      	blx	r8
 8009e72:	3001      	adds	r0, #1
 8009e74:	d0e6      	beq.n	8009e44 <_printf_common+0xa4>
 8009e76:	3601      	adds	r6, #1
 8009e78:	e7d9      	b.n	8009e2e <_printf_common+0x8e>
	...

08009e7c <_printf_i>:
 8009e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	7e0f      	ldrb	r7, [r1, #24]
 8009e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e84:	2f78      	cmp	r7, #120	; 0x78
 8009e86:	4691      	mov	r9, r2
 8009e88:	4680      	mov	r8, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	469a      	mov	sl, r3
 8009e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e92:	d807      	bhi.n	8009ea4 <_printf_i+0x28>
 8009e94:	2f62      	cmp	r7, #98	; 0x62
 8009e96:	d80a      	bhi.n	8009eae <_printf_i+0x32>
 8009e98:	2f00      	cmp	r7, #0
 8009e9a:	f000 80d8 	beq.w	800a04e <_printf_i+0x1d2>
 8009e9e:	2f58      	cmp	r7, #88	; 0x58
 8009ea0:	f000 80a3 	beq.w	8009fea <_printf_i+0x16e>
 8009ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009eac:	e03a      	b.n	8009f24 <_printf_i+0xa8>
 8009eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eb2:	2b15      	cmp	r3, #21
 8009eb4:	d8f6      	bhi.n	8009ea4 <_printf_i+0x28>
 8009eb6:	a101      	add	r1, pc, #4	; (adr r1, 8009ebc <_printf_i+0x40>)
 8009eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ebc:	08009f15 	.word	0x08009f15
 8009ec0:	08009f29 	.word	0x08009f29
 8009ec4:	08009ea5 	.word	0x08009ea5
 8009ec8:	08009ea5 	.word	0x08009ea5
 8009ecc:	08009ea5 	.word	0x08009ea5
 8009ed0:	08009ea5 	.word	0x08009ea5
 8009ed4:	08009f29 	.word	0x08009f29
 8009ed8:	08009ea5 	.word	0x08009ea5
 8009edc:	08009ea5 	.word	0x08009ea5
 8009ee0:	08009ea5 	.word	0x08009ea5
 8009ee4:	08009ea5 	.word	0x08009ea5
 8009ee8:	0800a035 	.word	0x0800a035
 8009eec:	08009f59 	.word	0x08009f59
 8009ef0:	0800a017 	.word	0x0800a017
 8009ef4:	08009ea5 	.word	0x08009ea5
 8009ef8:	08009ea5 	.word	0x08009ea5
 8009efc:	0800a057 	.word	0x0800a057
 8009f00:	08009ea5 	.word	0x08009ea5
 8009f04:	08009f59 	.word	0x08009f59
 8009f08:	08009ea5 	.word	0x08009ea5
 8009f0c:	08009ea5 	.word	0x08009ea5
 8009f10:	0800a01f 	.word	0x0800a01f
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	1d1a      	adds	r2, r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	602a      	str	r2, [r5, #0]
 8009f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f24:	2301      	movs	r3, #1
 8009f26:	e0a3      	b.n	800a070 <_printf_i+0x1f4>
 8009f28:	6820      	ldr	r0, [r4, #0]
 8009f2a:	6829      	ldr	r1, [r5, #0]
 8009f2c:	0606      	lsls	r6, r0, #24
 8009f2e:	f101 0304 	add.w	r3, r1, #4
 8009f32:	d50a      	bpl.n	8009f4a <_printf_i+0xce>
 8009f34:	680e      	ldr	r6, [r1, #0]
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	2e00      	cmp	r6, #0
 8009f3a:	da03      	bge.n	8009f44 <_printf_i+0xc8>
 8009f3c:	232d      	movs	r3, #45	; 0x2d
 8009f3e:	4276      	negs	r6, r6
 8009f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f44:	485e      	ldr	r0, [pc, #376]	; (800a0c0 <_printf_i+0x244>)
 8009f46:	230a      	movs	r3, #10
 8009f48:	e019      	b.n	8009f7e <_printf_i+0x102>
 8009f4a:	680e      	ldr	r6, [r1, #0]
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f52:	bf18      	it	ne
 8009f54:	b236      	sxthne	r6, r6
 8009f56:	e7ef      	b.n	8009f38 <_printf_i+0xbc>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	6820      	ldr	r0, [r4, #0]
 8009f5c:	1d19      	adds	r1, r3, #4
 8009f5e:	6029      	str	r1, [r5, #0]
 8009f60:	0601      	lsls	r1, r0, #24
 8009f62:	d501      	bpl.n	8009f68 <_printf_i+0xec>
 8009f64:	681e      	ldr	r6, [r3, #0]
 8009f66:	e002      	b.n	8009f6e <_printf_i+0xf2>
 8009f68:	0646      	lsls	r6, r0, #25
 8009f6a:	d5fb      	bpl.n	8009f64 <_printf_i+0xe8>
 8009f6c:	881e      	ldrh	r6, [r3, #0]
 8009f6e:	4854      	ldr	r0, [pc, #336]	; (800a0c0 <_printf_i+0x244>)
 8009f70:	2f6f      	cmp	r7, #111	; 0x6f
 8009f72:	bf0c      	ite	eq
 8009f74:	2308      	moveq	r3, #8
 8009f76:	230a      	movne	r3, #10
 8009f78:	2100      	movs	r1, #0
 8009f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f7e:	6865      	ldr	r5, [r4, #4]
 8009f80:	60a5      	str	r5, [r4, #8]
 8009f82:	2d00      	cmp	r5, #0
 8009f84:	bfa2      	ittt	ge
 8009f86:	6821      	ldrge	r1, [r4, #0]
 8009f88:	f021 0104 	bicge.w	r1, r1, #4
 8009f8c:	6021      	strge	r1, [r4, #0]
 8009f8e:	b90e      	cbnz	r6, 8009f94 <_printf_i+0x118>
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	d04d      	beq.n	800a030 <_printf_i+0x1b4>
 8009f94:	4615      	mov	r5, r2
 8009f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8009f9e:	5dc7      	ldrb	r7, [r0, r7]
 8009fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fa4:	4637      	mov	r7, r6
 8009fa6:	42bb      	cmp	r3, r7
 8009fa8:	460e      	mov	r6, r1
 8009faa:	d9f4      	bls.n	8009f96 <_printf_i+0x11a>
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d10b      	bne.n	8009fc8 <_printf_i+0x14c>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	07de      	lsls	r6, r3, #31
 8009fb4:	d508      	bpl.n	8009fc8 <_printf_i+0x14c>
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	6861      	ldr	r1, [r4, #4]
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	bfde      	ittt	le
 8009fbe:	2330      	movle	r3, #48	; 0x30
 8009fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fc4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009fc8:	1b52      	subs	r2, r2, r5
 8009fca:	6122      	str	r2, [r4, #16]
 8009fcc:	f8cd a000 	str.w	sl, [sp]
 8009fd0:	464b      	mov	r3, r9
 8009fd2:	aa03      	add	r2, sp, #12
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	f7ff fee2 	bl	8009da0 <_printf_common>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d14c      	bne.n	800a07a <_printf_i+0x1fe>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fe4:	b004      	add	sp, #16
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	4835      	ldr	r0, [pc, #212]	; (800a0c0 <_printf_i+0x244>)
 8009fec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ff0:	6829      	ldr	r1, [r5, #0]
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ff8:	6029      	str	r1, [r5, #0]
 8009ffa:	061d      	lsls	r5, r3, #24
 8009ffc:	d514      	bpl.n	800a028 <_printf_i+0x1ac>
 8009ffe:	07df      	lsls	r7, r3, #31
 800a000:	bf44      	itt	mi
 800a002:	f043 0320 	orrmi.w	r3, r3, #32
 800a006:	6023      	strmi	r3, [r4, #0]
 800a008:	b91e      	cbnz	r6, 800a012 <_printf_i+0x196>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	f023 0320 	bic.w	r3, r3, #32
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	2310      	movs	r3, #16
 800a014:	e7b0      	b.n	8009f78 <_printf_i+0xfc>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	f043 0320 	orr.w	r3, r3, #32
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	2378      	movs	r3, #120	; 0x78
 800a020:	4828      	ldr	r0, [pc, #160]	; (800a0c4 <_printf_i+0x248>)
 800a022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a026:	e7e3      	b.n	8009ff0 <_printf_i+0x174>
 800a028:	0659      	lsls	r1, r3, #25
 800a02a:	bf48      	it	mi
 800a02c:	b2b6      	uxthmi	r6, r6
 800a02e:	e7e6      	b.n	8009ffe <_printf_i+0x182>
 800a030:	4615      	mov	r5, r2
 800a032:	e7bb      	b.n	8009fac <_printf_i+0x130>
 800a034:	682b      	ldr	r3, [r5, #0]
 800a036:	6826      	ldr	r6, [r4, #0]
 800a038:	6961      	ldr	r1, [r4, #20]
 800a03a:	1d18      	adds	r0, r3, #4
 800a03c:	6028      	str	r0, [r5, #0]
 800a03e:	0635      	lsls	r5, r6, #24
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	d501      	bpl.n	800a048 <_printf_i+0x1cc>
 800a044:	6019      	str	r1, [r3, #0]
 800a046:	e002      	b.n	800a04e <_printf_i+0x1d2>
 800a048:	0670      	lsls	r0, r6, #25
 800a04a:	d5fb      	bpl.n	800a044 <_printf_i+0x1c8>
 800a04c:	8019      	strh	r1, [r3, #0]
 800a04e:	2300      	movs	r3, #0
 800a050:	6123      	str	r3, [r4, #16]
 800a052:	4615      	mov	r5, r2
 800a054:	e7ba      	b.n	8009fcc <_printf_i+0x150>
 800a056:	682b      	ldr	r3, [r5, #0]
 800a058:	1d1a      	adds	r2, r3, #4
 800a05a:	602a      	str	r2, [r5, #0]
 800a05c:	681d      	ldr	r5, [r3, #0]
 800a05e:	6862      	ldr	r2, [r4, #4]
 800a060:	2100      	movs	r1, #0
 800a062:	4628      	mov	r0, r5
 800a064:	f7f6 f8b4 	bl	80001d0 <memchr>
 800a068:	b108      	cbz	r0, 800a06e <_printf_i+0x1f2>
 800a06a:	1b40      	subs	r0, r0, r5
 800a06c:	6060      	str	r0, [r4, #4]
 800a06e:	6863      	ldr	r3, [r4, #4]
 800a070:	6123      	str	r3, [r4, #16]
 800a072:	2300      	movs	r3, #0
 800a074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a078:	e7a8      	b.n	8009fcc <_printf_i+0x150>
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	462a      	mov	r2, r5
 800a07e:	4649      	mov	r1, r9
 800a080:	4640      	mov	r0, r8
 800a082:	47d0      	blx	sl
 800a084:	3001      	adds	r0, #1
 800a086:	d0ab      	beq.n	8009fe0 <_printf_i+0x164>
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	079b      	lsls	r3, r3, #30
 800a08c:	d413      	bmi.n	800a0b6 <_printf_i+0x23a>
 800a08e:	68e0      	ldr	r0, [r4, #12]
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	4298      	cmp	r0, r3
 800a094:	bfb8      	it	lt
 800a096:	4618      	movlt	r0, r3
 800a098:	e7a4      	b.n	8009fe4 <_printf_i+0x168>
 800a09a:	2301      	movs	r3, #1
 800a09c:	4632      	mov	r2, r6
 800a09e:	4649      	mov	r1, r9
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	47d0      	blx	sl
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d09b      	beq.n	8009fe0 <_printf_i+0x164>
 800a0a8:	3501      	adds	r5, #1
 800a0aa:	68e3      	ldr	r3, [r4, #12]
 800a0ac:	9903      	ldr	r1, [sp, #12]
 800a0ae:	1a5b      	subs	r3, r3, r1
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	dcf2      	bgt.n	800a09a <_printf_i+0x21e>
 800a0b4:	e7eb      	b.n	800a08e <_printf_i+0x212>
 800a0b6:	2500      	movs	r5, #0
 800a0b8:	f104 0619 	add.w	r6, r4, #25
 800a0bc:	e7f5      	b.n	800a0aa <_printf_i+0x22e>
 800a0be:	bf00      	nop
 800a0c0:	0800c61e 	.word	0x0800c61e
 800a0c4:	0800c62f 	.word	0x0800c62f

0800a0c8 <_sbrk_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	; (800a0e4 <_sbrk_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f002 f974 	bl	800c3c0 <_sbrk>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_sbrk_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_sbrk_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20000850 	.word	0x20000850

0800a0e8 <_raise_r>:
 800a0e8:	291f      	cmp	r1, #31
 800a0ea:	b538      	push	{r3, r4, r5, lr}
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	d904      	bls.n	800a0fc <_raise_r+0x14>
 800a0f2:	2316      	movs	r3, #22
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0fe:	b112      	cbz	r2, 800a106 <_raise_r+0x1e>
 800a100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a104:	b94b      	cbnz	r3, 800a11a <_raise_r+0x32>
 800a106:	4620      	mov	r0, r4
 800a108:	f000 f830 	bl	800a16c <_getpid_r>
 800a10c:	462a      	mov	r2, r5
 800a10e:	4601      	mov	r1, r0
 800a110:	4620      	mov	r0, r4
 800a112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a116:	f000 b817 	b.w	800a148 <_kill_r>
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d00a      	beq.n	800a134 <_raise_r+0x4c>
 800a11e:	1c59      	adds	r1, r3, #1
 800a120:	d103      	bne.n	800a12a <_raise_r+0x42>
 800a122:	2316      	movs	r3, #22
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	2001      	movs	r0, #1
 800a128:	e7e7      	b.n	800a0fa <_raise_r+0x12>
 800a12a:	2400      	movs	r4, #0
 800a12c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a130:	4628      	mov	r0, r5
 800a132:	4798      	blx	r3
 800a134:	2000      	movs	r0, #0
 800a136:	e7e0      	b.n	800a0fa <_raise_r+0x12>

0800a138 <raise>:
 800a138:	4b02      	ldr	r3, [pc, #8]	; (800a144 <raise+0xc>)
 800a13a:	4601      	mov	r1, r0
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f7ff bfd3 	b.w	800a0e8 <_raise_r>
 800a142:	bf00      	nop
 800a144:	2000000c 	.word	0x2000000c

0800a148 <_kill_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4d07      	ldr	r5, [pc, #28]	; (800a168 <_kill_r+0x20>)
 800a14c:	2300      	movs	r3, #0
 800a14e:	4604      	mov	r4, r0
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	f7f8 fb6b 	bl	8002830 <_kill>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d102      	bne.n	800a164 <_kill_r+0x1c>
 800a15e:	682b      	ldr	r3, [r5, #0]
 800a160:	b103      	cbz	r3, 800a164 <_kill_r+0x1c>
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	bf00      	nop
 800a168:	20000850 	.word	0x20000850

0800a16c <_getpid_r>:
 800a16c:	f7f8 bb58 	b.w	8002820 <_getpid>

0800a170 <_vsniprintf_r>:
 800a170:	b530      	push	{r4, r5, lr}
 800a172:	4614      	mov	r4, r2
 800a174:	2c00      	cmp	r4, #0
 800a176:	b09b      	sub	sp, #108	; 0x6c
 800a178:	4605      	mov	r5, r0
 800a17a:	461a      	mov	r2, r3
 800a17c:	da05      	bge.n	800a18a <_vsniprintf_r+0x1a>
 800a17e:	238b      	movs	r3, #139	; 0x8b
 800a180:	6003      	str	r3, [r0, #0]
 800a182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a186:	b01b      	add	sp, #108	; 0x6c
 800a188:	bd30      	pop	{r4, r5, pc}
 800a18a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a18e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a192:	bf14      	ite	ne
 800a194:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a198:	4623      	moveq	r3, r4
 800a19a:	9302      	str	r3, [sp, #8]
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1a2:	9100      	str	r1, [sp, #0]
 800a1a4:	9104      	str	r1, [sp, #16]
 800a1a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a1aa:	4669      	mov	r1, sp
 800a1ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a1ae:	f001 fa9b 	bl	800b6e8 <_svfiprintf_r>
 800a1b2:	1c43      	adds	r3, r0, #1
 800a1b4:	bfbc      	itt	lt
 800a1b6:	238b      	movlt	r3, #139	; 0x8b
 800a1b8:	602b      	strlt	r3, [r5, #0]
 800a1ba:	2c00      	cmp	r4, #0
 800a1bc:	d0e3      	beq.n	800a186 <_vsniprintf_r+0x16>
 800a1be:	9b00      	ldr	r3, [sp, #0]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
 800a1c4:	e7df      	b.n	800a186 <_vsniprintf_r+0x16>
	...

0800a1c8 <vsniprintf>:
 800a1c8:	b507      	push	{r0, r1, r2, lr}
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	460a      	mov	r2, r1
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	4803      	ldr	r0, [pc, #12]	; (800a1e0 <vsniprintf+0x18>)
 800a1d4:	6800      	ldr	r0, [r0, #0]
 800a1d6:	f7ff ffcb 	bl	800a170 <_vsniprintf_r>
 800a1da:	b003      	add	sp, #12
 800a1dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1e0:	2000000c 	.word	0x2000000c

0800a1e4 <quorem>:
 800a1e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e8:	6903      	ldr	r3, [r0, #16]
 800a1ea:	690c      	ldr	r4, [r1, #16]
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	f2c0 8081 	blt.w	800a2f6 <quorem+0x112>
 800a1f4:	3c01      	subs	r4, #1
 800a1f6:	f101 0814 	add.w	r8, r1, #20
 800a1fa:	f100 0514 	add.w	r5, r0, #20
 800a1fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a208:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a20c:	3301      	adds	r3, #1
 800a20e:	429a      	cmp	r2, r3
 800a210:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a214:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a218:	fbb2 f6f3 	udiv	r6, r2, r3
 800a21c:	d331      	bcc.n	800a282 <quorem+0x9e>
 800a21e:	f04f 0e00 	mov.w	lr, #0
 800a222:	4640      	mov	r0, r8
 800a224:	46ac      	mov	ip, r5
 800a226:	46f2      	mov	sl, lr
 800a228:	f850 2b04 	ldr.w	r2, [r0], #4
 800a22c:	b293      	uxth	r3, r2
 800a22e:	fb06 e303 	mla	r3, r6, r3, lr
 800a232:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a236:	b29b      	uxth	r3, r3
 800a238:	ebaa 0303 	sub.w	r3, sl, r3
 800a23c:	f8dc a000 	ldr.w	sl, [ip]
 800a240:	0c12      	lsrs	r2, r2, #16
 800a242:	fa13 f38a 	uxtah	r3, r3, sl
 800a246:	fb06 e202 	mla	r2, r6, r2, lr
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	9b00      	ldr	r3, [sp, #0]
 800a24e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a252:	b292      	uxth	r2, r2
 800a254:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a25c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a260:	4581      	cmp	r9, r0
 800a262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a266:	f84c 3b04 	str.w	r3, [ip], #4
 800a26a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a26e:	d2db      	bcs.n	800a228 <quorem+0x44>
 800a270:	f855 300b 	ldr.w	r3, [r5, fp]
 800a274:	b92b      	cbnz	r3, 800a282 <quorem+0x9e>
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	3b04      	subs	r3, #4
 800a27a:	429d      	cmp	r5, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	d32e      	bcc.n	800a2de <quorem+0xfa>
 800a280:	613c      	str	r4, [r7, #16]
 800a282:	4638      	mov	r0, r7
 800a284:	f001 f8bc 	bl	800b400 <__mcmp>
 800a288:	2800      	cmp	r0, #0
 800a28a:	db24      	blt.n	800a2d6 <quorem+0xf2>
 800a28c:	3601      	adds	r6, #1
 800a28e:	4628      	mov	r0, r5
 800a290:	f04f 0c00 	mov.w	ip, #0
 800a294:	f858 2b04 	ldr.w	r2, [r8], #4
 800a298:	f8d0 e000 	ldr.w	lr, [r0]
 800a29c:	b293      	uxth	r3, r2
 800a29e:	ebac 0303 	sub.w	r3, ip, r3
 800a2a2:	0c12      	lsrs	r2, r2, #16
 800a2a4:	fa13 f38e 	uxtah	r3, r3, lr
 800a2a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2b6:	45c1      	cmp	r9, r8
 800a2b8:	f840 3b04 	str.w	r3, [r0], #4
 800a2bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2c0:	d2e8      	bcs.n	800a294 <quorem+0xb0>
 800a2c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2ca:	b922      	cbnz	r2, 800a2d6 <quorem+0xf2>
 800a2cc:	3b04      	subs	r3, #4
 800a2ce:	429d      	cmp	r5, r3
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	d30a      	bcc.n	800a2ea <quorem+0x106>
 800a2d4:	613c      	str	r4, [r7, #16]
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	b003      	add	sp, #12
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2de:	6812      	ldr	r2, [r2, #0]
 800a2e0:	3b04      	subs	r3, #4
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d1cc      	bne.n	800a280 <quorem+0x9c>
 800a2e6:	3c01      	subs	r4, #1
 800a2e8:	e7c7      	b.n	800a27a <quorem+0x96>
 800a2ea:	6812      	ldr	r2, [r2, #0]
 800a2ec:	3b04      	subs	r3, #4
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	d1f0      	bne.n	800a2d4 <quorem+0xf0>
 800a2f2:	3c01      	subs	r4, #1
 800a2f4:	e7eb      	b.n	800a2ce <quorem+0xea>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	e7ee      	b.n	800a2d8 <quorem+0xf4>
 800a2fa:	0000      	movs	r0, r0
 800a2fc:	0000      	movs	r0, r0
	...

0800a300 <_dtoa_r>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	ed2d 8b04 	vpush	{d8-d9}
 800a308:	ec57 6b10 	vmov	r6, r7, d0
 800a30c:	b093      	sub	sp, #76	; 0x4c
 800a30e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a310:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a314:	9106      	str	r1, [sp, #24]
 800a316:	ee10 aa10 	vmov	sl, s0
 800a31a:	4604      	mov	r4, r0
 800a31c:	9209      	str	r2, [sp, #36]	; 0x24
 800a31e:	930c      	str	r3, [sp, #48]	; 0x30
 800a320:	46bb      	mov	fp, r7
 800a322:	b975      	cbnz	r5, 800a342 <_dtoa_r+0x42>
 800a324:	2010      	movs	r0, #16
 800a326:	f7ff f945 	bl	80095b4 <malloc>
 800a32a:	4602      	mov	r2, r0
 800a32c:	6260      	str	r0, [r4, #36]	; 0x24
 800a32e:	b920      	cbnz	r0, 800a33a <_dtoa_r+0x3a>
 800a330:	4ba7      	ldr	r3, [pc, #668]	; (800a5d0 <_dtoa_r+0x2d0>)
 800a332:	21ea      	movs	r1, #234	; 0xea
 800a334:	48a7      	ldr	r0, [pc, #668]	; (800a5d4 <_dtoa_r+0x2d4>)
 800a336:	f001 fad7 	bl	800b8e8 <__assert_func>
 800a33a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a33e:	6005      	str	r5, [r0, #0]
 800a340:	60c5      	str	r5, [r0, #12]
 800a342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a344:	6819      	ldr	r1, [r3, #0]
 800a346:	b151      	cbz	r1, 800a35e <_dtoa_r+0x5e>
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	604a      	str	r2, [r1, #4]
 800a34c:	2301      	movs	r3, #1
 800a34e:	4093      	lsls	r3, r2
 800a350:	608b      	str	r3, [r1, #8]
 800a352:	4620      	mov	r0, r4
 800a354:	f000 fe12 	bl	800af7c <_Bfree>
 800a358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	1e3b      	subs	r3, r7, #0
 800a360:	bfaa      	itet	ge
 800a362:	2300      	movge	r3, #0
 800a364:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a368:	f8c8 3000 	strge.w	r3, [r8]
 800a36c:	4b9a      	ldr	r3, [pc, #616]	; (800a5d8 <_dtoa_r+0x2d8>)
 800a36e:	bfbc      	itt	lt
 800a370:	2201      	movlt	r2, #1
 800a372:	f8c8 2000 	strlt.w	r2, [r8]
 800a376:	ea33 030b 	bics.w	r3, r3, fp
 800a37a:	d11b      	bne.n	800a3b4 <_dtoa_r+0xb4>
 800a37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a37e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a388:	4333      	orrs	r3, r6
 800a38a:	f000 8592 	beq.w	800aeb2 <_dtoa_r+0xbb2>
 800a38e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a390:	b963      	cbnz	r3, 800a3ac <_dtoa_r+0xac>
 800a392:	4b92      	ldr	r3, [pc, #584]	; (800a5dc <_dtoa_r+0x2dc>)
 800a394:	e022      	b.n	800a3dc <_dtoa_r+0xdc>
 800a396:	4b92      	ldr	r3, [pc, #584]	; (800a5e0 <_dtoa_r+0x2e0>)
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	3308      	adds	r3, #8
 800a39c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	9801      	ldr	r0, [sp, #4]
 800a3a2:	b013      	add	sp, #76	; 0x4c
 800a3a4:	ecbd 8b04 	vpop	{d8-d9}
 800a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ac:	4b8b      	ldr	r3, [pc, #556]	; (800a5dc <_dtoa_r+0x2dc>)
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	3303      	adds	r3, #3
 800a3b2:	e7f3      	b.n	800a39c <_dtoa_r+0x9c>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4650      	mov	r0, sl
 800a3ba:	4659      	mov	r1, fp
 800a3bc:	f7f6 fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3c0:	ec4b ab19 	vmov	d9, sl, fp
 800a3c4:	4680      	mov	r8, r0
 800a3c6:	b158      	cbz	r0, 800a3e0 <_dtoa_r+0xe0>
 800a3c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 856b 	beq.w	800aeac <_dtoa_r+0xbac>
 800a3d6:	4883      	ldr	r0, [pc, #524]	; (800a5e4 <_dtoa_r+0x2e4>)
 800a3d8:	6018      	str	r0, [r3, #0]
 800a3da:	1e43      	subs	r3, r0, #1
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	e7df      	b.n	800a3a0 <_dtoa_r+0xa0>
 800a3e0:	ec4b ab10 	vmov	d0, sl, fp
 800a3e4:	aa10      	add	r2, sp, #64	; 0x40
 800a3e6:	a911      	add	r1, sp, #68	; 0x44
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f001 f8af 	bl	800b54c <__d2b>
 800a3ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a3f2:	ee08 0a10 	vmov	s16, r0
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	f000 8084 	beq.w	800a504 <_dtoa_r+0x204>
 800a3fc:	ee19 3a90 	vmov	r3, s19
 800a400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a404:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a408:	4656      	mov	r6, sl
 800a40a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a40e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a412:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a416:	4b74      	ldr	r3, [pc, #464]	; (800a5e8 <_dtoa_r+0x2e8>)
 800a418:	2200      	movs	r2, #0
 800a41a:	4630      	mov	r0, r6
 800a41c:	4639      	mov	r1, r7
 800a41e:	f7f5 ff33 	bl	8000288 <__aeabi_dsub>
 800a422:	a365      	add	r3, pc, #404	; (adr r3, 800a5b8 <_dtoa_r+0x2b8>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	a364      	add	r3, pc, #400	; (adr r3, 800a5c0 <_dtoa_r+0x2c0>)
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	f7f5 ff2b 	bl	800028c <__adddf3>
 800a436:	4606      	mov	r6, r0
 800a438:	4628      	mov	r0, r5
 800a43a:	460f      	mov	r7, r1
 800a43c:	f7f6 f872 	bl	8000524 <__aeabi_i2d>
 800a440:	a361      	add	r3, pc, #388	; (adr r3, 800a5c8 <_dtoa_r+0x2c8>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f7f6 f8d7 	bl	80005f8 <__aeabi_dmul>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4630      	mov	r0, r6
 800a450:	4639      	mov	r1, r7
 800a452:	f7f5 ff1b 	bl	800028c <__adddf3>
 800a456:	4606      	mov	r6, r0
 800a458:	460f      	mov	r7, r1
 800a45a:	f7f6 fb7d 	bl	8000b58 <__aeabi_d2iz>
 800a45e:	2200      	movs	r2, #0
 800a460:	9000      	str	r0, [sp, #0]
 800a462:	2300      	movs	r3, #0
 800a464:	4630      	mov	r0, r6
 800a466:	4639      	mov	r1, r7
 800a468:	f7f6 fb38 	bl	8000adc <__aeabi_dcmplt>
 800a46c:	b150      	cbz	r0, 800a484 <_dtoa_r+0x184>
 800a46e:	9800      	ldr	r0, [sp, #0]
 800a470:	f7f6 f858 	bl	8000524 <__aeabi_i2d>
 800a474:	4632      	mov	r2, r6
 800a476:	463b      	mov	r3, r7
 800a478:	f7f6 fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800a47c:	b910      	cbnz	r0, 800a484 <_dtoa_r+0x184>
 800a47e:	9b00      	ldr	r3, [sp, #0]
 800a480:	3b01      	subs	r3, #1
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	9b00      	ldr	r3, [sp, #0]
 800a486:	2b16      	cmp	r3, #22
 800a488:	d85a      	bhi.n	800a540 <_dtoa_r+0x240>
 800a48a:	9a00      	ldr	r2, [sp, #0]
 800a48c:	4b57      	ldr	r3, [pc, #348]	; (800a5ec <_dtoa_r+0x2ec>)
 800a48e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	ec51 0b19 	vmov	r0, r1, d9
 800a49a:	f7f6 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d050      	beq.n	800a544 <_dtoa_r+0x244>
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4ae:	1b5d      	subs	r5, r3, r5
 800a4b0:	1e6b      	subs	r3, r5, #1
 800a4b2:	9305      	str	r3, [sp, #20]
 800a4b4:	bf45      	ittet	mi
 800a4b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a4ba:	9304      	strmi	r3, [sp, #16]
 800a4bc:	2300      	movpl	r3, #0
 800a4be:	2300      	movmi	r3, #0
 800a4c0:	bf4c      	ite	mi
 800a4c2:	9305      	strmi	r3, [sp, #20]
 800a4c4:	9304      	strpl	r3, [sp, #16]
 800a4c6:	9b00      	ldr	r3, [sp, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	db3d      	blt.n	800a548 <_dtoa_r+0x248>
 800a4cc:	9b05      	ldr	r3, [sp, #20]
 800a4ce:	9a00      	ldr	r2, [sp, #0]
 800a4d0:	920a      	str	r2, [sp, #40]	; 0x28
 800a4d2:	4413      	add	r3, r2
 800a4d4:	9305      	str	r3, [sp, #20]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	9b06      	ldr	r3, [sp, #24]
 800a4dc:	2b09      	cmp	r3, #9
 800a4de:	f200 8089 	bhi.w	800a5f4 <_dtoa_r+0x2f4>
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	bfc4      	itt	gt
 800a4e6:	3b04      	subgt	r3, #4
 800a4e8:	9306      	strgt	r3, [sp, #24]
 800a4ea:	9b06      	ldr	r3, [sp, #24]
 800a4ec:	f1a3 0302 	sub.w	r3, r3, #2
 800a4f0:	bfcc      	ite	gt
 800a4f2:	2500      	movgt	r5, #0
 800a4f4:	2501      	movle	r5, #1
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	f200 8087 	bhi.w	800a60a <_dtoa_r+0x30a>
 800a4fc:	e8df f003 	tbb	[pc, r3]
 800a500:	59383a2d 	.word	0x59383a2d
 800a504:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a508:	441d      	add	r5, r3
 800a50a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a50e:	2b20      	cmp	r3, #32
 800a510:	bfc1      	itttt	gt
 800a512:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a516:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a51a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a51e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a522:	bfda      	itte	le
 800a524:	f1c3 0320 	rsble	r3, r3, #32
 800a528:	fa06 f003 	lslle.w	r0, r6, r3
 800a52c:	4318      	orrgt	r0, r3
 800a52e:	f7f5 ffe9 	bl	8000504 <__aeabi_ui2d>
 800a532:	2301      	movs	r3, #1
 800a534:	4606      	mov	r6, r0
 800a536:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a53a:	3d01      	subs	r5, #1
 800a53c:	930e      	str	r3, [sp, #56]	; 0x38
 800a53e:	e76a      	b.n	800a416 <_dtoa_r+0x116>
 800a540:	2301      	movs	r3, #1
 800a542:	e7b2      	b.n	800a4aa <_dtoa_r+0x1aa>
 800a544:	900b      	str	r0, [sp, #44]	; 0x2c
 800a546:	e7b1      	b.n	800a4ac <_dtoa_r+0x1ac>
 800a548:	9b04      	ldr	r3, [sp, #16]
 800a54a:	9a00      	ldr	r2, [sp, #0]
 800a54c:	1a9b      	subs	r3, r3, r2
 800a54e:	9304      	str	r3, [sp, #16]
 800a550:	4253      	negs	r3, r2
 800a552:	9307      	str	r3, [sp, #28]
 800a554:	2300      	movs	r3, #0
 800a556:	930a      	str	r3, [sp, #40]	; 0x28
 800a558:	e7bf      	b.n	800a4da <_dtoa_r+0x1da>
 800a55a:	2300      	movs	r3, #0
 800a55c:	9308      	str	r3, [sp, #32]
 800a55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	dc55      	bgt.n	800a610 <_dtoa_r+0x310>
 800a564:	2301      	movs	r3, #1
 800a566:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a56a:	461a      	mov	r2, r3
 800a56c:	9209      	str	r2, [sp, #36]	; 0x24
 800a56e:	e00c      	b.n	800a58a <_dtoa_r+0x28a>
 800a570:	2301      	movs	r3, #1
 800a572:	e7f3      	b.n	800a55c <_dtoa_r+0x25c>
 800a574:	2300      	movs	r3, #0
 800a576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a578:	9308      	str	r3, [sp, #32]
 800a57a:	9b00      	ldr	r3, [sp, #0]
 800a57c:	4413      	add	r3, r2
 800a57e:	9302      	str	r3, [sp, #8]
 800a580:	3301      	adds	r3, #1
 800a582:	2b01      	cmp	r3, #1
 800a584:	9303      	str	r3, [sp, #12]
 800a586:	bfb8      	it	lt
 800a588:	2301      	movlt	r3, #1
 800a58a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a58c:	2200      	movs	r2, #0
 800a58e:	6042      	str	r2, [r0, #4]
 800a590:	2204      	movs	r2, #4
 800a592:	f102 0614 	add.w	r6, r2, #20
 800a596:	429e      	cmp	r6, r3
 800a598:	6841      	ldr	r1, [r0, #4]
 800a59a:	d93d      	bls.n	800a618 <_dtoa_r+0x318>
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 fcad 	bl	800aefc <_Balloc>
 800a5a2:	9001      	str	r0, [sp, #4]
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d13b      	bne.n	800a620 <_dtoa_r+0x320>
 800a5a8:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <_dtoa_r+0x2f0>)
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a5b0:	e6c0      	b.n	800a334 <_dtoa_r+0x34>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e7df      	b.n	800a576 <_dtoa_r+0x276>
 800a5b6:	bf00      	nop
 800a5b8:	636f4361 	.word	0x636f4361
 800a5bc:	3fd287a7 	.word	0x3fd287a7
 800a5c0:	8b60c8b3 	.word	0x8b60c8b3
 800a5c4:	3fc68a28 	.word	0x3fc68a28
 800a5c8:	509f79fb 	.word	0x509f79fb
 800a5cc:	3fd34413 	.word	0x3fd34413
 800a5d0:	0800c64d 	.word	0x0800c64d
 800a5d4:	0800c664 	.word	0x0800c664
 800a5d8:	7ff00000 	.word	0x7ff00000
 800a5dc:	0800c649 	.word	0x0800c649
 800a5e0:	0800c640 	.word	0x0800c640
 800a5e4:	0800c61d 	.word	0x0800c61d
 800a5e8:	3ff80000 	.word	0x3ff80000
 800a5ec:	0800c758 	.word	0x0800c758
 800a5f0:	0800c6bf 	.word	0x0800c6bf
 800a5f4:	2501      	movs	r5, #1
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	9306      	str	r3, [sp, #24]
 800a5fa:	9508      	str	r5, [sp, #32]
 800a5fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a600:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a604:	2200      	movs	r2, #0
 800a606:	2312      	movs	r3, #18
 800a608:	e7b0      	b.n	800a56c <_dtoa_r+0x26c>
 800a60a:	2301      	movs	r3, #1
 800a60c:	9308      	str	r3, [sp, #32]
 800a60e:	e7f5      	b.n	800a5fc <_dtoa_r+0x2fc>
 800a610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a612:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a616:	e7b8      	b.n	800a58a <_dtoa_r+0x28a>
 800a618:	3101      	adds	r1, #1
 800a61a:	6041      	str	r1, [r0, #4]
 800a61c:	0052      	lsls	r2, r2, #1
 800a61e:	e7b8      	b.n	800a592 <_dtoa_r+0x292>
 800a620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a622:	9a01      	ldr	r2, [sp, #4]
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	2b0e      	cmp	r3, #14
 800a62a:	f200 809d 	bhi.w	800a768 <_dtoa_r+0x468>
 800a62e:	2d00      	cmp	r5, #0
 800a630:	f000 809a 	beq.w	800a768 <_dtoa_r+0x468>
 800a634:	9b00      	ldr	r3, [sp, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	dd32      	ble.n	800a6a0 <_dtoa_r+0x3a0>
 800a63a:	4ab7      	ldr	r2, [pc, #732]	; (800a918 <_dtoa_r+0x618>)
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a644:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a648:	9b00      	ldr	r3, [sp, #0]
 800a64a:	05d8      	lsls	r0, r3, #23
 800a64c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a650:	d516      	bpl.n	800a680 <_dtoa_r+0x380>
 800a652:	4bb2      	ldr	r3, [pc, #712]	; (800a91c <_dtoa_r+0x61c>)
 800a654:	ec51 0b19 	vmov	r0, r1, d9
 800a658:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a65c:	f7f6 f8f6 	bl	800084c <__aeabi_ddiv>
 800a660:	f007 070f 	and.w	r7, r7, #15
 800a664:	4682      	mov	sl, r0
 800a666:	468b      	mov	fp, r1
 800a668:	2503      	movs	r5, #3
 800a66a:	4eac      	ldr	r6, [pc, #688]	; (800a91c <_dtoa_r+0x61c>)
 800a66c:	b957      	cbnz	r7, 800a684 <_dtoa_r+0x384>
 800a66e:	4642      	mov	r2, r8
 800a670:	464b      	mov	r3, r9
 800a672:	4650      	mov	r0, sl
 800a674:	4659      	mov	r1, fp
 800a676:	f7f6 f8e9 	bl	800084c <__aeabi_ddiv>
 800a67a:	4682      	mov	sl, r0
 800a67c:	468b      	mov	fp, r1
 800a67e:	e028      	b.n	800a6d2 <_dtoa_r+0x3d2>
 800a680:	2502      	movs	r5, #2
 800a682:	e7f2      	b.n	800a66a <_dtoa_r+0x36a>
 800a684:	07f9      	lsls	r1, r7, #31
 800a686:	d508      	bpl.n	800a69a <_dtoa_r+0x39a>
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a690:	f7f5 ffb2 	bl	80005f8 <__aeabi_dmul>
 800a694:	3501      	adds	r5, #1
 800a696:	4680      	mov	r8, r0
 800a698:	4689      	mov	r9, r1
 800a69a:	107f      	asrs	r7, r7, #1
 800a69c:	3608      	adds	r6, #8
 800a69e:	e7e5      	b.n	800a66c <_dtoa_r+0x36c>
 800a6a0:	f000 809b 	beq.w	800a7da <_dtoa_r+0x4da>
 800a6a4:	9b00      	ldr	r3, [sp, #0]
 800a6a6:	4f9d      	ldr	r7, [pc, #628]	; (800a91c <_dtoa_r+0x61c>)
 800a6a8:	425e      	negs	r6, r3
 800a6aa:	4b9b      	ldr	r3, [pc, #620]	; (800a918 <_dtoa_r+0x618>)
 800a6ac:	f006 020f 	and.w	r2, r6, #15
 800a6b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	ec51 0b19 	vmov	r0, r1, d9
 800a6bc:	f7f5 ff9c 	bl	80005f8 <__aeabi_dmul>
 800a6c0:	1136      	asrs	r6, r6, #4
 800a6c2:	4682      	mov	sl, r0
 800a6c4:	468b      	mov	fp, r1
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2502      	movs	r5, #2
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	d17a      	bne.n	800a7c4 <_dtoa_r+0x4c4>
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1d3      	bne.n	800a67a <_dtoa_r+0x37a>
 800a6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 8082 	beq.w	800a7de <_dtoa_r+0x4de>
 800a6da:	4b91      	ldr	r3, [pc, #580]	; (800a920 <_dtoa_r+0x620>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	4650      	mov	r0, sl
 800a6e0:	4659      	mov	r1, fp
 800a6e2:	f7f6 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d079      	beq.n	800a7de <_dtoa_r+0x4de>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d076      	beq.n	800a7de <_dtoa_r+0x4de>
 800a6f0:	9b02      	ldr	r3, [sp, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dd36      	ble.n	800a764 <_dtoa_r+0x464>
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	4650      	mov	r0, sl
 800a6fa:	4659      	mov	r1, fp
 800a6fc:	1e5f      	subs	r7, r3, #1
 800a6fe:	2200      	movs	r2, #0
 800a700:	4b88      	ldr	r3, [pc, #544]	; (800a924 <_dtoa_r+0x624>)
 800a702:	f7f5 ff79 	bl	80005f8 <__aeabi_dmul>
 800a706:	9e02      	ldr	r6, [sp, #8]
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	3501      	adds	r5, #1
 800a70e:	4628      	mov	r0, r5
 800a710:	f7f5 ff08 	bl	8000524 <__aeabi_i2d>
 800a714:	4652      	mov	r2, sl
 800a716:	465b      	mov	r3, fp
 800a718:	f7f5 ff6e 	bl	80005f8 <__aeabi_dmul>
 800a71c:	4b82      	ldr	r3, [pc, #520]	; (800a928 <_dtoa_r+0x628>)
 800a71e:	2200      	movs	r2, #0
 800a720:	f7f5 fdb4 	bl	800028c <__adddf3>
 800a724:	46d0      	mov	r8, sl
 800a726:	46d9      	mov	r9, fp
 800a728:	4682      	mov	sl, r0
 800a72a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a72e:	2e00      	cmp	r6, #0
 800a730:	d158      	bne.n	800a7e4 <_dtoa_r+0x4e4>
 800a732:	4b7e      	ldr	r3, [pc, #504]	; (800a92c <_dtoa_r+0x62c>)
 800a734:	2200      	movs	r2, #0
 800a736:	4640      	mov	r0, r8
 800a738:	4649      	mov	r1, r9
 800a73a:	f7f5 fda5 	bl	8000288 <__aeabi_dsub>
 800a73e:	4652      	mov	r2, sl
 800a740:	465b      	mov	r3, fp
 800a742:	4680      	mov	r8, r0
 800a744:	4689      	mov	r9, r1
 800a746:	f7f6 f9e7 	bl	8000b18 <__aeabi_dcmpgt>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f040 8295 	bne.w	800ac7a <_dtoa_r+0x97a>
 800a750:	4652      	mov	r2, sl
 800a752:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a756:	4640      	mov	r0, r8
 800a758:	4649      	mov	r1, r9
 800a75a:	f7f6 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800a75e:	2800      	cmp	r0, #0
 800a760:	f040 8289 	bne.w	800ac76 <_dtoa_r+0x976>
 800a764:	ec5b ab19 	vmov	sl, fp, d9
 800a768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f2c0 8148 	blt.w	800aa00 <_dtoa_r+0x700>
 800a770:	9a00      	ldr	r2, [sp, #0]
 800a772:	2a0e      	cmp	r2, #14
 800a774:	f300 8144 	bgt.w	800aa00 <_dtoa_r+0x700>
 800a778:	4b67      	ldr	r3, [pc, #412]	; (800a918 <_dtoa_r+0x618>)
 800a77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a77e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a784:	2b00      	cmp	r3, #0
 800a786:	f280 80d5 	bge.w	800a934 <_dtoa_r+0x634>
 800a78a:	9b03      	ldr	r3, [sp, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f300 80d1 	bgt.w	800a934 <_dtoa_r+0x634>
 800a792:	f040 826f 	bne.w	800ac74 <_dtoa_r+0x974>
 800a796:	4b65      	ldr	r3, [pc, #404]	; (800a92c <_dtoa_r+0x62c>)
 800a798:	2200      	movs	r2, #0
 800a79a:	4640      	mov	r0, r8
 800a79c:	4649      	mov	r1, r9
 800a79e:	f7f5 ff2b 	bl	80005f8 <__aeabi_dmul>
 800a7a2:	4652      	mov	r2, sl
 800a7a4:	465b      	mov	r3, fp
 800a7a6:	f7f6 f9ad 	bl	8000b04 <__aeabi_dcmpge>
 800a7aa:	9e03      	ldr	r6, [sp, #12]
 800a7ac:	4637      	mov	r7, r6
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f040 8245 	bne.w	800ac3e <_dtoa_r+0x93e>
 800a7b4:	9d01      	ldr	r5, [sp, #4]
 800a7b6:	2331      	movs	r3, #49	; 0x31
 800a7b8:	f805 3b01 	strb.w	r3, [r5], #1
 800a7bc:	9b00      	ldr	r3, [sp, #0]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	e240      	b.n	800ac46 <_dtoa_r+0x946>
 800a7c4:	07f2      	lsls	r2, r6, #31
 800a7c6:	d505      	bpl.n	800a7d4 <_dtoa_r+0x4d4>
 800a7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7cc:	f7f5 ff14 	bl	80005f8 <__aeabi_dmul>
 800a7d0:	3501      	adds	r5, #1
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	1076      	asrs	r6, r6, #1
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	e777      	b.n	800a6ca <_dtoa_r+0x3ca>
 800a7da:	2502      	movs	r5, #2
 800a7dc:	e779      	b.n	800a6d2 <_dtoa_r+0x3d2>
 800a7de:	9f00      	ldr	r7, [sp, #0]
 800a7e0:	9e03      	ldr	r6, [sp, #12]
 800a7e2:	e794      	b.n	800a70e <_dtoa_r+0x40e>
 800a7e4:	9901      	ldr	r1, [sp, #4]
 800a7e6:	4b4c      	ldr	r3, [pc, #304]	; (800a918 <_dtoa_r+0x618>)
 800a7e8:	4431      	add	r1, r6
 800a7ea:	910d      	str	r1, [sp, #52]	; 0x34
 800a7ec:	9908      	ldr	r1, [sp, #32]
 800a7ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7f6:	2900      	cmp	r1, #0
 800a7f8:	d043      	beq.n	800a882 <_dtoa_r+0x582>
 800a7fa:	494d      	ldr	r1, [pc, #308]	; (800a930 <_dtoa_r+0x630>)
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	f7f6 f825 	bl	800084c <__aeabi_ddiv>
 800a802:	4652      	mov	r2, sl
 800a804:	465b      	mov	r3, fp
 800a806:	f7f5 fd3f 	bl	8000288 <__aeabi_dsub>
 800a80a:	9d01      	ldr	r5, [sp, #4]
 800a80c:	4682      	mov	sl, r0
 800a80e:	468b      	mov	fp, r1
 800a810:	4649      	mov	r1, r9
 800a812:	4640      	mov	r0, r8
 800a814:	f7f6 f9a0 	bl	8000b58 <__aeabi_d2iz>
 800a818:	4606      	mov	r6, r0
 800a81a:	f7f5 fe83 	bl	8000524 <__aeabi_i2d>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4640      	mov	r0, r8
 800a824:	4649      	mov	r1, r9
 800a826:	f7f5 fd2f 	bl	8000288 <__aeabi_dsub>
 800a82a:	3630      	adds	r6, #48	; 0x30
 800a82c:	f805 6b01 	strb.w	r6, [r5], #1
 800a830:	4652      	mov	r2, sl
 800a832:	465b      	mov	r3, fp
 800a834:	4680      	mov	r8, r0
 800a836:	4689      	mov	r9, r1
 800a838:	f7f6 f950 	bl	8000adc <__aeabi_dcmplt>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d163      	bne.n	800a908 <_dtoa_r+0x608>
 800a840:	4642      	mov	r2, r8
 800a842:	464b      	mov	r3, r9
 800a844:	4936      	ldr	r1, [pc, #216]	; (800a920 <_dtoa_r+0x620>)
 800a846:	2000      	movs	r0, #0
 800a848:	f7f5 fd1e 	bl	8000288 <__aeabi_dsub>
 800a84c:	4652      	mov	r2, sl
 800a84e:	465b      	mov	r3, fp
 800a850:	f7f6 f944 	bl	8000adc <__aeabi_dcmplt>
 800a854:	2800      	cmp	r0, #0
 800a856:	f040 80b5 	bne.w	800a9c4 <_dtoa_r+0x6c4>
 800a85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a85c:	429d      	cmp	r5, r3
 800a85e:	d081      	beq.n	800a764 <_dtoa_r+0x464>
 800a860:	4b30      	ldr	r3, [pc, #192]	; (800a924 <_dtoa_r+0x624>)
 800a862:	2200      	movs	r2, #0
 800a864:	4650      	mov	r0, sl
 800a866:	4659      	mov	r1, fp
 800a868:	f7f5 fec6 	bl	80005f8 <__aeabi_dmul>
 800a86c:	4b2d      	ldr	r3, [pc, #180]	; (800a924 <_dtoa_r+0x624>)
 800a86e:	4682      	mov	sl, r0
 800a870:	468b      	mov	fp, r1
 800a872:	4640      	mov	r0, r8
 800a874:	4649      	mov	r1, r9
 800a876:	2200      	movs	r2, #0
 800a878:	f7f5 febe 	bl	80005f8 <__aeabi_dmul>
 800a87c:	4680      	mov	r8, r0
 800a87e:	4689      	mov	r9, r1
 800a880:	e7c6      	b.n	800a810 <_dtoa_r+0x510>
 800a882:	4650      	mov	r0, sl
 800a884:	4659      	mov	r1, fp
 800a886:	f7f5 feb7 	bl	80005f8 <__aeabi_dmul>
 800a88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a88c:	9d01      	ldr	r5, [sp, #4]
 800a88e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a890:	4682      	mov	sl, r0
 800a892:	468b      	mov	fp, r1
 800a894:	4649      	mov	r1, r9
 800a896:	4640      	mov	r0, r8
 800a898:	f7f6 f95e 	bl	8000b58 <__aeabi_d2iz>
 800a89c:	4606      	mov	r6, r0
 800a89e:	f7f5 fe41 	bl	8000524 <__aeabi_i2d>
 800a8a2:	3630      	adds	r6, #48	; 0x30
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	4649      	mov	r1, r9
 800a8ac:	f7f5 fcec 	bl	8000288 <__aeabi_dsub>
 800a8b0:	f805 6b01 	strb.w	r6, [r5], #1
 800a8b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b6:	429d      	cmp	r5, r3
 800a8b8:	4680      	mov	r8, r0
 800a8ba:	4689      	mov	r9, r1
 800a8bc:	f04f 0200 	mov.w	r2, #0
 800a8c0:	d124      	bne.n	800a90c <_dtoa_r+0x60c>
 800a8c2:	4b1b      	ldr	r3, [pc, #108]	; (800a930 <_dtoa_r+0x630>)
 800a8c4:	4650      	mov	r0, sl
 800a8c6:	4659      	mov	r1, fp
 800a8c8:	f7f5 fce0 	bl	800028c <__adddf3>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	f7f6 f920 	bl	8000b18 <__aeabi_dcmpgt>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d173      	bne.n	800a9c4 <_dtoa_r+0x6c4>
 800a8dc:	4652      	mov	r2, sl
 800a8de:	465b      	mov	r3, fp
 800a8e0:	4913      	ldr	r1, [pc, #76]	; (800a930 <_dtoa_r+0x630>)
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	f7f5 fcd0 	bl	8000288 <__aeabi_dsub>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	f7f6 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	f43f af35 	beq.w	800a764 <_dtoa_r+0x464>
 800a8fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a8fc:	1e6b      	subs	r3, r5, #1
 800a8fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a900:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a904:	2b30      	cmp	r3, #48	; 0x30
 800a906:	d0f8      	beq.n	800a8fa <_dtoa_r+0x5fa>
 800a908:	9700      	str	r7, [sp, #0]
 800a90a:	e049      	b.n	800a9a0 <_dtoa_r+0x6a0>
 800a90c:	4b05      	ldr	r3, [pc, #20]	; (800a924 <_dtoa_r+0x624>)
 800a90e:	f7f5 fe73 	bl	80005f8 <__aeabi_dmul>
 800a912:	4680      	mov	r8, r0
 800a914:	4689      	mov	r9, r1
 800a916:	e7bd      	b.n	800a894 <_dtoa_r+0x594>
 800a918:	0800c758 	.word	0x0800c758
 800a91c:	0800c730 	.word	0x0800c730
 800a920:	3ff00000 	.word	0x3ff00000
 800a924:	40240000 	.word	0x40240000
 800a928:	401c0000 	.word	0x401c0000
 800a92c:	40140000 	.word	0x40140000
 800a930:	3fe00000 	.word	0x3fe00000
 800a934:	9d01      	ldr	r5, [sp, #4]
 800a936:	4656      	mov	r6, sl
 800a938:	465f      	mov	r7, fp
 800a93a:	4642      	mov	r2, r8
 800a93c:	464b      	mov	r3, r9
 800a93e:	4630      	mov	r0, r6
 800a940:	4639      	mov	r1, r7
 800a942:	f7f5 ff83 	bl	800084c <__aeabi_ddiv>
 800a946:	f7f6 f907 	bl	8000b58 <__aeabi_d2iz>
 800a94a:	4682      	mov	sl, r0
 800a94c:	f7f5 fdea 	bl	8000524 <__aeabi_i2d>
 800a950:	4642      	mov	r2, r8
 800a952:	464b      	mov	r3, r9
 800a954:	f7f5 fe50 	bl	80005f8 <__aeabi_dmul>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4630      	mov	r0, r6
 800a95e:	4639      	mov	r1, r7
 800a960:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a964:	f7f5 fc90 	bl	8000288 <__aeabi_dsub>
 800a968:	f805 6b01 	strb.w	r6, [r5], #1
 800a96c:	9e01      	ldr	r6, [sp, #4]
 800a96e:	9f03      	ldr	r7, [sp, #12]
 800a970:	1bae      	subs	r6, r5, r6
 800a972:	42b7      	cmp	r7, r6
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	d135      	bne.n	800a9e6 <_dtoa_r+0x6e6>
 800a97a:	f7f5 fc87 	bl	800028c <__adddf3>
 800a97e:	4642      	mov	r2, r8
 800a980:	464b      	mov	r3, r9
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	f7f6 f8c7 	bl	8000b18 <__aeabi_dcmpgt>
 800a98a:	b9d0      	cbnz	r0, 800a9c2 <_dtoa_r+0x6c2>
 800a98c:	4642      	mov	r2, r8
 800a98e:	464b      	mov	r3, r9
 800a990:	4630      	mov	r0, r6
 800a992:	4639      	mov	r1, r7
 800a994:	f7f6 f898 	bl	8000ac8 <__aeabi_dcmpeq>
 800a998:	b110      	cbz	r0, 800a9a0 <_dtoa_r+0x6a0>
 800a99a:	f01a 0f01 	tst.w	sl, #1
 800a99e:	d110      	bne.n	800a9c2 <_dtoa_r+0x6c2>
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	ee18 1a10 	vmov	r1, s16
 800a9a6:	f000 fae9 	bl	800af7c <_Bfree>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	9800      	ldr	r0, [sp, #0]
 800a9ae:	702b      	strb	r3, [r5, #0]
 800a9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	6018      	str	r0, [r3, #0]
 800a9b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f43f acf1 	beq.w	800a3a0 <_dtoa_r+0xa0>
 800a9be:	601d      	str	r5, [r3, #0]
 800a9c0:	e4ee      	b.n	800a3a0 <_dtoa_r+0xa0>
 800a9c2:	9f00      	ldr	r7, [sp, #0]
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	461d      	mov	r5, r3
 800a9c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9cc:	2a39      	cmp	r2, #57	; 0x39
 800a9ce:	d106      	bne.n	800a9de <_dtoa_r+0x6de>
 800a9d0:	9a01      	ldr	r2, [sp, #4]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d1f7      	bne.n	800a9c6 <_dtoa_r+0x6c6>
 800a9d6:	9901      	ldr	r1, [sp, #4]
 800a9d8:	2230      	movs	r2, #48	; 0x30
 800a9da:	3701      	adds	r7, #1
 800a9dc:	700a      	strb	r2, [r1, #0]
 800a9de:	781a      	ldrb	r2, [r3, #0]
 800a9e0:	3201      	adds	r2, #1
 800a9e2:	701a      	strb	r2, [r3, #0]
 800a9e4:	e790      	b.n	800a908 <_dtoa_r+0x608>
 800a9e6:	4ba6      	ldr	r3, [pc, #664]	; (800ac80 <_dtoa_r+0x980>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f7f5 fe05 	bl	80005f8 <__aeabi_dmul>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	460f      	mov	r7, r1
 800a9f6:	f7f6 f867 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d09d      	beq.n	800a93a <_dtoa_r+0x63a>
 800a9fe:	e7cf      	b.n	800a9a0 <_dtoa_r+0x6a0>
 800aa00:	9a08      	ldr	r2, [sp, #32]
 800aa02:	2a00      	cmp	r2, #0
 800aa04:	f000 80d7 	beq.w	800abb6 <_dtoa_r+0x8b6>
 800aa08:	9a06      	ldr	r2, [sp, #24]
 800aa0a:	2a01      	cmp	r2, #1
 800aa0c:	f300 80ba 	bgt.w	800ab84 <_dtoa_r+0x884>
 800aa10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	f000 80b2 	beq.w	800ab7c <_dtoa_r+0x87c>
 800aa18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa1c:	9e07      	ldr	r6, [sp, #28]
 800aa1e:	9d04      	ldr	r5, [sp, #16]
 800aa20:	9a04      	ldr	r2, [sp, #16]
 800aa22:	441a      	add	r2, r3
 800aa24:	9204      	str	r2, [sp, #16]
 800aa26:	9a05      	ldr	r2, [sp, #20]
 800aa28:	2101      	movs	r1, #1
 800aa2a:	441a      	add	r2, r3
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	9205      	str	r2, [sp, #20]
 800aa30:	f000 fb5c 	bl	800b0ec <__i2b>
 800aa34:	4607      	mov	r7, r0
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	dd0c      	ble.n	800aa54 <_dtoa_r+0x754>
 800aa3a:	9b05      	ldr	r3, [sp, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	dd09      	ble.n	800aa54 <_dtoa_r+0x754>
 800aa40:	42ab      	cmp	r3, r5
 800aa42:	9a04      	ldr	r2, [sp, #16]
 800aa44:	bfa8      	it	ge
 800aa46:	462b      	movge	r3, r5
 800aa48:	1ad2      	subs	r2, r2, r3
 800aa4a:	9204      	str	r2, [sp, #16]
 800aa4c:	9a05      	ldr	r2, [sp, #20]
 800aa4e:	1aed      	subs	r5, r5, r3
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	9305      	str	r3, [sp, #20]
 800aa54:	9b07      	ldr	r3, [sp, #28]
 800aa56:	b31b      	cbz	r3, 800aaa0 <_dtoa_r+0x7a0>
 800aa58:	9b08      	ldr	r3, [sp, #32]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f000 80af 	beq.w	800abbe <_dtoa_r+0x8be>
 800aa60:	2e00      	cmp	r6, #0
 800aa62:	dd13      	ble.n	800aa8c <_dtoa_r+0x78c>
 800aa64:	4639      	mov	r1, r7
 800aa66:	4632      	mov	r2, r6
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 fbff 	bl	800b26c <__pow5mult>
 800aa6e:	ee18 2a10 	vmov	r2, s16
 800aa72:	4601      	mov	r1, r0
 800aa74:	4607      	mov	r7, r0
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 fb4e 	bl	800b118 <__multiply>
 800aa7c:	ee18 1a10 	vmov	r1, s16
 800aa80:	4680      	mov	r8, r0
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 fa7a 	bl	800af7c <_Bfree>
 800aa88:	ee08 8a10 	vmov	s16, r8
 800aa8c:	9b07      	ldr	r3, [sp, #28]
 800aa8e:	1b9a      	subs	r2, r3, r6
 800aa90:	d006      	beq.n	800aaa0 <_dtoa_r+0x7a0>
 800aa92:	ee18 1a10 	vmov	r1, s16
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fbe8 	bl	800b26c <__pow5mult>
 800aa9c:	ee08 0a10 	vmov	s16, r0
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 fb22 	bl	800b0ec <__i2b>
 800aaa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	4606      	mov	r6, r0
 800aaae:	f340 8088 	ble.w	800abc2 <_dtoa_r+0x8c2>
 800aab2:	461a      	mov	r2, r3
 800aab4:	4601      	mov	r1, r0
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 fbd8 	bl	800b26c <__pow5mult>
 800aabc:	9b06      	ldr	r3, [sp, #24]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	4606      	mov	r6, r0
 800aac2:	f340 8081 	ble.w	800abc8 <_dtoa_r+0x8c8>
 800aac6:	f04f 0800 	mov.w	r8, #0
 800aaca:	6933      	ldr	r3, [r6, #16]
 800aacc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aad0:	6918      	ldr	r0, [r3, #16]
 800aad2:	f000 fabb 	bl	800b04c <__hi0bits>
 800aad6:	f1c0 0020 	rsb	r0, r0, #32
 800aada:	9b05      	ldr	r3, [sp, #20]
 800aadc:	4418      	add	r0, r3
 800aade:	f010 001f 	ands.w	r0, r0, #31
 800aae2:	f000 8092 	beq.w	800ac0a <_dtoa_r+0x90a>
 800aae6:	f1c0 0320 	rsb	r3, r0, #32
 800aaea:	2b04      	cmp	r3, #4
 800aaec:	f340 808a 	ble.w	800ac04 <_dtoa_r+0x904>
 800aaf0:	f1c0 001c 	rsb	r0, r0, #28
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	4403      	add	r3, r0
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	9b05      	ldr	r3, [sp, #20]
 800aafc:	4403      	add	r3, r0
 800aafe:	4405      	add	r5, r0
 800ab00:	9305      	str	r3, [sp, #20]
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	dd07      	ble.n	800ab18 <_dtoa_r+0x818>
 800ab08:	ee18 1a10 	vmov	r1, s16
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f000 fc06 	bl	800b320 <__lshift>
 800ab14:	ee08 0a10 	vmov	s16, r0
 800ab18:	9b05      	ldr	r3, [sp, #20]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dd05      	ble.n	800ab2a <_dtoa_r+0x82a>
 800ab1e:	4631      	mov	r1, r6
 800ab20:	461a      	mov	r2, r3
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 fbfc 	bl	800b320 <__lshift>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d06e      	beq.n	800ac0e <_dtoa_r+0x90e>
 800ab30:	ee18 0a10 	vmov	r0, s16
 800ab34:	4631      	mov	r1, r6
 800ab36:	f000 fc63 	bl	800b400 <__mcmp>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	da67      	bge.n	800ac0e <_dtoa_r+0x90e>
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	ee18 1a10 	vmov	r1, s16
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	220a      	movs	r2, #10
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 fa37 	bl	800afc0 <__multadd>
 800ab52:	9b08      	ldr	r3, [sp, #32]
 800ab54:	ee08 0a10 	vmov	s16, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 81b1 	beq.w	800aec0 <_dtoa_r+0xbc0>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	4639      	mov	r1, r7
 800ab62:	220a      	movs	r2, #10
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 fa2b 	bl	800afc0 <__multadd>
 800ab6a:	9b02      	ldr	r3, [sp, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	4607      	mov	r7, r0
 800ab70:	f300 808e 	bgt.w	800ac90 <_dtoa_r+0x990>
 800ab74:	9b06      	ldr	r3, [sp, #24]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	dc51      	bgt.n	800ac1e <_dtoa_r+0x91e>
 800ab7a:	e089      	b.n	800ac90 <_dtoa_r+0x990>
 800ab7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab82:	e74b      	b.n	800aa1c <_dtoa_r+0x71c>
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	1e5e      	subs	r6, r3, #1
 800ab88:	9b07      	ldr	r3, [sp, #28]
 800ab8a:	42b3      	cmp	r3, r6
 800ab8c:	bfbf      	itttt	lt
 800ab8e:	9b07      	ldrlt	r3, [sp, #28]
 800ab90:	9607      	strlt	r6, [sp, #28]
 800ab92:	1af2      	sublt	r2, r6, r3
 800ab94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab96:	bfb6      	itet	lt
 800ab98:	189b      	addlt	r3, r3, r2
 800ab9a:	1b9e      	subge	r6, r3, r6
 800ab9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	bfb8      	it	lt
 800aba2:	2600      	movlt	r6, #0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	bfb7      	itett	lt
 800aba8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800abac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800abb0:	1a9d      	sublt	r5, r3, r2
 800abb2:	2300      	movlt	r3, #0
 800abb4:	e734      	b.n	800aa20 <_dtoa_r+0x720>
 800abb6:	9e07      	ldr	r6, [sp, #28]
 800abb8:	9d04      	ldr	r5, [sp, #16]
 800abba:	9f08      	ldr	r7, [sp, #32]
 800abbc:	e73b      	b.n	800aa36 <_dtoa_r+0x736>
 800abbe:	9a07      	ldr	r2, [sp, #28]
 800abc0:	e767      	b.n	800aa92 <_dtoa_r+0x792>
 800abc2:	9b06      	ldr	r3, [sp, #24]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	dc18      	bgt.n	800abfa <_dtoa_r+0x8fa>
 800abc8:	f1ba 0f00 	cmp.w	sl, #0
 800abcc:	d115      	bne.n	800abfa <_dtoa_r+0x8fa>
 800abce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abd2:	b993      	cbnz	r3, 800abfa <_dtoa_r+0x8fa>
 800abd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800abd8:	0d1b      	lsrs	r3, r3, #20
 800abda:	051b      	lsls	r3, r3, #20
 800abdc:	b183      	cbz	r3, 800ac00 <_dtoa_r+0x900>
 800abde:	9b04      	ldr	r3, [sp, #16]
 800abe0:	3301      	adds	r3, #1
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	9b05      	ldr	r3, [sp, #20]
 800abe6:	3301      	adds	r3, #1
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	f04f 0801 	mov.w	r8, #1
 800abee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f47f af6a 	bne.w	800aaca <_dtoa_r+0x7ca>
 800abf6:	2001      	movs	r0, #1
 800abf8:	e76f      	b.n	800aada <_dtoa_r+0x7da>
 800abfa:	f04f 0800 	mov.w	r8, #0
 800abfe:	e7f6      	b.n	800abee <_dtoa_r+0x8ee>
 800ac00:	4698      	mov	r8, r3
 800ac02:	e7f4      	b.n	800abee <_dtoa_r+0x8ee>
 800ac04:	f43f af7d 	beq.w	800ab02 <_dtoa_r+0x802>
 800ac08:	4618      	mov	r0, r3
 800ac0a:	301c      	adds	r0, #28
 800ac0c:	e772      	b.n	800aaf4 <_dtoa_r+0x7f4>
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc37      	bgt.n	800ac84 <_dtoa_r+0x984>
 800ac14:	9b06      	ldr	r3, [sp, #24]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	dd34      	ble.n	800ac84 <_dtoa_r+0x984>
 800ac1a:	9b03      	ldr	r3, [sp, #12]
 800ac1c:	9302      	str	r3, [sp, #8]
 800ac1e:	9b02      	ldr	r3, [sp, #8]
 800ac20:	b96b      	cbnz	r3, 800ac3e <_dtoa_r+0x93e>
 800ac22:	4631      	mov	r1, r6
 800ac24:	2205      	movs	r2, #5
 800ac26:	4620      	mov	r0, r4
 800ac28:	f000 f9ca 	bl	800afc0 <__multadd>
 800ac2c:	4601      	mov	r1, r0
 800ac2e:	4606      	mov	r6, r0
 800ac30:	ee18 0a10 	vmov	r0, s16
 800ac34:	f000 fbe4 	bl	800b400 <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	f73f adbb 	bgt.w	800a7b4 <_dtoa_r+0x4b4>
 800ac3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac40:	9d01      	ldr	r5, [sp, #4]
 800ac42:	43db      	mvns	r3, r3
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	f04f 0800 	mov.w	r8, #0
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 f995 	bl	800af7c <_Bfree>
 800ac52:	2f00      	cmp	r7, #0
 800ac54:	f43f aea4 	beq.w	800a9a0 <_dtoa_r+0x6a0>
 800ac58:	f1b8 0f00 	cmp.w	r8, #0
 800ac5c:	d005      	beq.n	800ac6a <_dtoa_r+0x96a>
 800ac5e:	45b8      	cmp	r8, r7
 800ac60:	d003      	beq.n	800ac6a <_dtoa_r+0x96a>
 800ac62:	4641      	mov	r1, r8
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 f989 	bl	800af7c <_Bfree>
 800ac6a:	4639      	mov	r1, r7
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f000 f985 	bl	800af7c <_Bfree>
 800ac72:	e695      	b.n	800a9a0 <_dtoa_r+0x6a0>
 800ac74:	2600      	movs	r6, #0
 800ac76:	4637      	mov	r7, r6
 800ac78:	e7e1      	b.n	800ac3e <_dtoa_r+0x93e>
 800ac7a:	9700      	str	r7, [sp, #0]
 800ac7c:	4637      	mov	r7, r6
 800ac7e:	e599      	b.n	800a7b4 <_dtoa_r+0x4b4>
 800ac80:	40240000 	.word	0x40240000
 800ac84:	9b08      	ldr	r3, [sp, #32]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 80ca 	beq.w	800ae20 <_dtoa_r+0xb20>
 800ac8c:	9b03      	ldr	r3, [sp, #12]
 800ac8e:	9302      	str	r3, [sp, #8]
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	dd05      	ble.n	800aca0 <_dtoa_r+0x9a0>
 800ac94:	4639      	mov	r1, r7
 800ac96:	462a      	mov	r2, r5
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fb41 	bl	800b320 <__lshift>
 800ac9e:	4607      	mov	r7, r0
 800aca0:	f1b8 0f00 	cmp.w	r8, #0
 800aca4:	d05b      	beq.n	800ad5e <_dtoa_r+0xa5e>
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 f927 	bl	800aefc <_Balloc>
 800acae:	4605      	mov	r5, r0
 800acb0:	b928      	cbnz	r0, 800acbe <_dtoa_r+0x9be>
 800acb2:	4b87      	ldr	r3, [pc, #540]	; (800aed0 <_dtoa_r+0xbd0>)
 800acb4:	4602      	mov	r2, r0
 800acb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800acba:	f7ff bb3b 	b.w	800a334 <_dtoa_r+0x34>
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	3202      	adds	r2, #2
 800acc2:	0092      	lsls	r2, r2, #2
 800acc4:	f107 010c 	add.w	r1, r7, #12
 800acc8:	300c      	adds	r0, #12
 800acca:	f7fe fc83 	bl	80095d4 <memcpy>
 800acce:	2201      	movs	r2, #1
 800acd0:	4629      	mov	r1, r5
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 fb24 	bl	800b320 <__lshift>
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	f103 0901 	add.w	r9, r3, #1
 800acde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ace2:	4413      	add	r3, r2
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	f00a 0301 	and.w	r3, sl, #1
 800acea:	46b8      	mov	r8, r7
 800acec:	9304      	str	r3, [sp, #16]
 800acee:	4607      	mov	r7, r0
 800acf0:	4631      	mov	r1, r6
 800acf2:	ee18 0a10 	vmov	r0, s16
 800acf6:	f7ff fa75 	bl	800a1e4 <quorem>
 800acfa:	4641      	mov	r1, r8
 800acfc:	9002      	str	r0, [sp, #8]
 800acfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad02:	ee18 0a10 	vmov	r0, s16
 800ad06:	f000 fb7b 	bl	800b400 <__mcmp>
 800ad0a:	463a      	mov	r2, r7
 800ad0c:	9003      	str	r0, [sp, #12]
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fb91 	bl	800b438 <__mdiff>
 800ad16:	68c2      	ldr	r2, [r0, #12]
 800ad18:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	bb02      	cbnz	r2, 800ad62 <_dtoa_r+0xa62>
 800ad20:	4601      	mov	r1, r0
 800ad22:	ee18 0a10 	vmov	r0, s16
 800ad26:	f000 fb6b 	bl	800b400 <__mcmp>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	4620      	mov	r0, r4
 800ad30:	9207      	str	r2, [sp, #28]
 800ad32:	f000 f923 	bl	800af7c <_Bfree>
 800ad36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad3a:	ea43 0102 	orr.w	r1, r3, r2
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	430b      	orrs	r3, r1
 800ad42:	464d      	mov	r5, r9
 800ad44:	d10f      	bne.n	800ad66 <_dtoa_r+0xa66>
 800ad46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad4a:	d02a      	beq.n	800ada2 <_dtoa_r+0xaa2>
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	dd02      	ble.n	800ad58 <_dtoa_r+0xa58>
 800ad52:	9b02      	ldr	r3, [sp, #8]
 800ad54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad58:	f88b a000 	strb.w	sl, [fp]
 800ad5c:	e775      	b.n	800ac4a <_dtoa_r+0x94a>
 800ad5e:	4638      	mov	r0, r7
 800ad60:	e7ba      	b.n	800acd8 <_dtoa_r+0x9d8>
 800ad62:	2201      	movs	r2, #1
 800ad64:	e7e2      	b.n	800ad2c <_dtoa_r+0xa2c>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	db04      	blt.n	800ad76 <_dtoa_r+0xa76>
 800ad6c:	9906      	ldr	r1, [sp, #24]
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	9904      	ldr	r1, [sp, #16]
 800ad72:	430b      	orrs	r3, r1
 800ad74:	d122      	bne.n	800adbc <_dtoa_r+0xabc>
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	ddee      	ble.n	800ad58 <_dtoa_r+0xa58>
 800ad7a:	ee18 1a10 	vmov	r1, s16
 800ad7e:	2201      	movs	r2, #1
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 facd 	bl	800b320 <__lshift>
 800ad86:	4631      	mov	r1, r6
 800ad88:	ee08 0a10 	vmov	s16, r0
 800ad8c:	f000 fb38 	bl	800b400 <__mcmp>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	dc03      	bgt.n	800ad9c <_dtoa_r+0xa9c>
 800ad94:	d1e0      	bne.n	800ad58 <_dtoa_r+0xa58>
 800ad96:	f01a 0f01 	tst.w	sl, #1
 800ad9a:	d0dd      	beq.n	800ad58 <_dtoa_r+0xa58>
 800ad9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ada0:	d1d7      	bne.n	800ad52 <_dtoa_r+0xa52>
 800ada2:	2339      	movs	r3, #57	; 0x39
 800ada4:	f88b 3000 	strb.w	r3, [fp]
 800ada8:	462b      	mov	r3, r5
 800adaa:	461d      	mov	r5, r3
 800adac:	3b01      	subs	r3, #1
 800adae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adb2:	2a39      	cmp	r2, #57	; 0x39
 800adb4:	d071      	beq.n	800ae9a <_dtoa_r+0xb9a>
 800adb6:	3201      	adds	r2, #1
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	e746      	b.n	800ac4a <_dtoa_r+0x94a>
 800adbc:	2a00      	cmp	r2, #0
 800adbe:	dd07      	ble.n	800add0 <_dtoa_r+0xad0>
 800adc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adc4:	d0ed      	beq.n	800ada2 <_dtoa_r+0xaa2>
 800adc6:	f10a 0301 	add.w	r3, sl, #1
 800adca:	f88b 3000 	strb.w	r3, [fp]
 800adce:	e73c      	b.n	800ac4a <_dtoa_r+0x94a>
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800add6:	4599      	cmp	r9, r3
 800add8:	d047      	beq.n	800ae6a <_dtoa_r+0xb6a>
 800adda:	ee18 1a10 	vmov	r1, s16
 800adde:	2300      	movs	r3, #0
 800ade0:	220a      	movs	r2, #10
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 f8ec 	bl	800afc0 <__multadd>
 800ade8:	45b8      	cmp	r8, r7
 800adea:	ee08 0a10 	vmov	s16, r0
 800adee:	f04f 0300 	mov.w	r3, #0
 800adf2:	f04f 020a 	mov.w	r2, #10
 800adf6:	4641      	mov	r1, r8
 800adf8:	4620      	mov	r0, r4
 800adfa:	d106      	bne.n	800ae0a <_dtoa_r+0xb0a>
 800adfc:	f000 f8e0 	bl	800afc0 <__multadd>
 800ae00:	4680      	mov	r8, r0
 800ae02:	4607      	mov	r7, r0
 800ae04:	f109 0901 	add.w	r9, r9, #1
 800ae08:	e772      	b.n	800acf0 <_dtoa_r+0x9f0>
 800ae0a:	f000 f8d9 	bl	800afc0 <__multadd>
 800ae0e:	4639      	mov	r1, r7
 800ae10:	4680      	mov	r8, r0
 800ae12:	2300      	movs	r3, #0
 800ae14:	220a      	movs	r2, #10
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 f8d2 	bl	800afc0 <__multadd>
 800ae1c:	4607      	mov	r7, r0
 800ae1e:	e7f1      	b.n	800ae04 <_dtoa_r+0xb04>
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	9302      	str	r3, [sp, #8]
 800ae24:	9d01      	ldr	r5, [sp, #4]
 800ae26:	ee18 0a10 	vmov	r0, s16
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	f7ff f9da 	bl	800a1e4 <quorem>
 800ae30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	f805 ab01 	strb.w	sl, [r5], #1
 800ae3a:	1aea      	subs	r2, r5, r3
 800ae3c:	9b02      	ldr	r3, [sp, #8]
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	dd09      	ble.n	800ae56 <_dtoa_r+0xb56>
 800ae42:	ee18 1a10 	vmov	r1, s16
 800ae46:	2300      	movs	r3, #0
 800ae48:	220a      	movs	r2, #10
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 f8b8 	bl	800afc0 <__multadd>
 800ae50:	ee08 0a10 	vmov	s16, r0
 800ae54:	e7e7      	b.n	800ae26 <_dtoa_r+0xb26>
 800ae56:	9b02      	ldr	r3, [sp, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	bfc8      	it	gt
 800ae5c:	461d      	movgt	r5, r3
 800ae5e:	9b01      	ldr	r3, [sp, #4]
 800ae60:	bfd8      	it	le
 800ae62:	2501      	movle	r5, #1
 800ae64:	441d      	add	r5, r3
 800ae66:	f04f 0800 	mov.w	r8, #0
 800ae6a:	ee18 1a10 	vmov	r1, s16
 800ae6e:	2201      	movs	r2, #1
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 fa55 	bl	800b320 <__lshift>
 800ae76:	4631      	mov	r1, r6
 800ae78:	ee08 0a10 	vmov	s16, r0
 800ae7c:	f000 fac0 	bl	800b400 <__mcmp>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	dc91      	bgt.n	800ada8 <_dtoa_r+0xaa8>
 800ae84:	d102      	bne.n	800ae8c <_dtoa_r+0xb8c>
 800ae86:	f01a 0f01 	tst.w	sl, #1
 800ae8a:	d18d      	bne.n	800ada8 <_dtoa_r+0xaa8>
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	461d      	mov	r5, r3
 800ae90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae94:	2a30      	cmp	r2, #48	; 0x30
 800ae96:	d0fa      	beq.n	800ae8e <_dtoa_r+0xb8e>
 800ae98:	e6d7      	b.n	800ac4a <_dtoa_r+0x94a>
 800ae9a:	9a01      	ldr	r2, [sp, #4]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d184      	bne.n	800adaa <_dtoa_r+0xaaa>
 800aea0:	9b00      	ldr	r3, [sp, #0]
 800aea2:	3301      	adds	r3, #1
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	2331      	movs	r3, #49	; 0x31
 800aea8:	7013      	strb	r3, [r2, #0]
 800aeaa:	e6ce      	b.n	800ac4a <_dtoa_r+0x94a>
 800aeac:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <_dtoa_r+0xbd4>)
 800aeae:	f7ff ba95 	b.w	800a3dc <_dtoa_r+0xdc>
 800aeb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f47f aa6e 	bne.w	800a396 <_dtoa_r+0x96>
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <_dtoa_r+0xbd8>)
 800aebc:	f7ff ba8e 	b.w	800a3dc <_dtoa_r+0xdc>
 800aec0:	9b02      	ldr	r3, [sp, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	dcae      	bgt.n	800ae24 <_dtoa_r+0xb24>
 800aec6:	9b06      	ldr	r3, [sp, #24]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	f73f aea8 	bgt.w	800ac1e <_dtoa_r+0x91e>
 800aece:	e7a9      	b.n	800ae24 <_dtoa_r+0xb24>
 800aed0:	0800c6bf 	.word	0x0800c6bf
 800aed4:	0800c61c 	.word	0x0800c61c
 800aed8:	0800c640 	.word	0x0800c640

0800aedc <_localeconv_r>:
 800aedc:	4800      	ldr	r0, [pc, #0]	; (800aee0 <_localeconv_r+0x4>)
 800aede:	4770      	bx	lr
 800aee0:	20000160 	.word	0x20000160

0800aee4 <__malloc_lock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	; (800aeec <__malloc_lock+0x8>)
 800aee6:	f000 bd30 	b.w	800b94a <__retarget_lock_acquire_recursive>
 800aeea:	bf00      	nop
 800aeec:	20000854 	.word	0x20000854

0800aef0 <__malloc_unlock>:
 800aef0:	4801      	ldr	r0, [pc, #4]	; (800aef8 <__malloc_unlock+0x8>)
 800aef2:	f000 bd2b 	b.w	800b94c <__retarget_lock_release_recursive>
 800aef6:	bf00      	nop
 800aef8:	20000854 	.word	0x20000854

0800aefc <_Balloc>:
 800aefc:	b570      	push	{r4, r5, r6, lr}
 800aefe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af00:	4604      	mov	r4, r0
 800af02:	460d      	mov	r5, r1
 800af04:	b976      	cbnz	r6, 800af24 <_Balloc+0x28>
 800af06:	2010      	movs	r0, #16
 800af08:	f7fe fb54 	bl	80095b4 <malloc>
 800af0c:	4602      	mov	r2, r0
 800af0e:	6260      	str	r0, [r4, #36]	; 0x24
 800af10:	b920      	cbnz	r0, 800af1c <_Balloc+0x20>
 800af12:	4b18      	ldr	r3, [pc, #96]	; (800af74 <_Balloc+0x78>)
 800af14:	4818      	ldr	r0, [pc, #96]	; (800af78 <_Balloc+0x7c>)
 800af16:	2166      	movs	r1, #102	; 0x66
 800af18:	f000 fce6 	bl	800b8e8 <__assert_func>
 800af1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af20:	6006      	str	r6, [r0, #0]
 800af22:	60c6      	str	r6, [r0, #12]
 800af24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af26:	68f3      	ldr	r3, [r6, #12]
 800af28:	b183      	cbz	r3, 800af4c <_Balloc+0x50>
 800af2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af32:	b9b8      	cbnz	r0, 800af64 <_Balloc+0x68>
 800af34:	2101      	movs	r1, #1
 800af36:	fa01 f605 	lsl.w	r6, r1, r5
 800af3a:	1d72      	adds	r2, r6, #5
 800af3c:	0092      	lsls	r2, r2, #2
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 fb60 	bl	800b604 <_calloc_r>
 800af44:	b160      	cbz	r0, 800af60 <_Balloc+0x64>
 800af46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af4a:	e00e      	b.n	800af6a <_Balloc+0x6e>
 800af4c:	2221      	movs	r2, #33	; 0x21
 800af4e:	2104      	movs	r1, #4
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fb57 	bl	800b604 <_calloc_r>
 800af56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af58:	60f0      	str	r0, [r6, #12]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e4      	bne.n	800af2a <_Balloc+0x2e>
 800af60:	2000      	movs	r0, #0
 800af62:	bd70      	pop	{r4, r5, r6, pc}
 800af64:	6802      	ldr	r2, [r0, #0]
 800af66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af6a:	2300      	movs	r3, #0
 800af6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af70:	e7f7      	b.n	800af62 <_Balloc+0x66>
 800af72:	bf00      	nop
 800af74:	0800c64d 	.word	0x0800c64d
 800af78:	0800c6d0 	.word	0x0800c6d0

0800af7c <_Bfree>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af80:	4605      	mov	r5, r0
 800af82:	460c      	mov	r4, r1
 800af84:	b976      	cbnz	r6, 800afa4 <_Bfree+0x28>
 800af86:	2010      	movs	r0, #16
 800af88:	f7fe fb14 	bl	80095b4 <malloc>
 800af8c:	4602      	mov	r2, r0
 800af8e:	6268      	str	r0, [r5, #36]	; 0x24
 800af90:	b920      	cbnz	r0, 800af9c <_Bfree+0x20>
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <_Bfree+0x3c>)
 800af94:	4809      	ldr	r0, [pc, #36]	; (800afbc <_Bfree+0x40>)
 800af96:	218a      	movs	r1, #138	; 0x8a
 800af98:	f000 fca6 	bl	800b8e8 <__assert_func>
 800af9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afa0:	6006      	str	r6, [r0, #0]
 800afa2:	60c6      	str	r6, [r0, #12]
 800afa4:	b13c      	cbz	r4, 800afb6 <_Bfree+0x3a>
 800afa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afa8:	6862      	ldr	r2, [r4, #4]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afb0:	6021      	str	r1, [r4, #0]
 800afb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	0800c64d 	.word	0x0800c64d
 800afbc:	0800c6d0 	.word	0x0800c6d0

0800afc0 <__multadd>:
 800afc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc4:	690d      	ldr	r5, [r1, #16]
 800afc6:	4607      	mov	r7, r0
 800afc8:	460c      	mov	r4, r1
 800afca:	461e      	mov	r6, r3
 800afcc:	f101 0c14 	add.w	ip, r1, #20
 800afd0:	2000      	movs	r0, #0
 800afd2:	f8dc 3000 	ldr.w	r3, [ip]
 800afd6:	b299      	uxth	r1, r3
 800afd8:	fb02 6101 	mla	r1, r2, r1, r6
 800afdc:	0c1e      	lsrs	r6, r3, #16
 800afde:	0c0b      	lsrs	r3, r1, #16
 800afe0:	fb02 3306 	mla	r3, r2, r6, r3
 800afe4:	b289      	uxth	r1, r1
 800afe6:	3001      	adds	r0, #1
 800afe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afec:	4285      	cmp	r5, r0
 800afee:	f84c 1b04 	str.w	r1, [ip], #4
 800aff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aff6:	dcec      	bgt.n	800afd2 <__multadd+0x12>
 800aff8:	b30e      	cbz	r6, 800b03e <__multadd+0x7e>
 800affa:	68a3      	ldr	r3, [r4, #8]
 800affc:	42ab      	cmp	r3, r5
 800affe:	dc19      	bgt.n	800b034 <__multadd+0x74>
 800b000:	6861      	ldr	r1, [r4, #4]
 800b002:	4638      	mov	r0, r7
 800b004:	3101      	adds	r1, #1
 800b006:	f7ff ff79 	bl	800aefc <_Balloc>
 800b00a:	4680      	mov	r8, r0
 800b00c:	b928      	cbnz	r0, 800b01a <__multadd+0x5a>
 800b00e:	4602      	mov	r2, r0
 800b010:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <__multadd+0x84>)
 800b012:	480d      	ldr	r0, [pc, #52]	; (800b048 <__multadd+0x88>)
 800b014:	21b5      	movs	r1, #181	; 0xb5
 800b016:	f000 fc67 	bl	800b8e8 <__assert_func>
 800b01a:	6922      	ldr	r2, [r4, #16]
 800b01c:	3202      	adds	r2, #2
 800b01e:	f104 010c 	add.w	r1, r4, #12
 800b022:	0092      	lsls	r2, r2, #2
 800b024:	300c      	adds	r0, #12
 800b026:	f7fe fad5 	bl	80095d4 <memcpy>
 800b02a:	4621      	mov	r1, r4
 800b02c:	4638      	mov	r0, r7
 800b02e:	f7ff ffa5 	bl	800af7c <_Bfree>
 800b032:	4644      	mov	r4, r8
 800b034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b038:	3501      	adds	r5, #1
 800b03a:	615e      	str	r6, [r3, #20]
 800b03c:	6125      	str	r5, [r4, #16]
 800b03e:	4620      	mov	r0, r4
 800b040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b044:	0800c6bf 	.word	0x0800c6bf
 800b048:	0800c6d0 	.word	0x0800c6d0

0800b04c <__hi0bits>:
 800b04c:	0c03      	lsrs	r3, r0, #16
 800b04e:	041b      	lsls	r3, r3, #16
 800b050:	b9d3      	cbnz	r3, 800b088 <__hi0bits+0x3c>
 800b052:	0400      	lsls	r0, r0, #16
 800b054:	2310      	movs	r3, #16
 800b056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b05a:	bf04      	itt	eq
 800b05c:	0200      	lsleq	r0, r0, #8
 800b05e:	3308      	addeq	r3, #8
 800b060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b064:	bf04      	itt	eq
 800b066:	0100      	lsleq	r0, r0, #4
 800b068:	3304      	addeq	r3, #4
 800b06a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b06e:	bf04      	itt	eq
 800b070:	0080      	lsleq	r0, r0, #2
 800b072:	3302      	addeq	r3, #2
 800b074:	2800      	cmp	r0, #0
 800b076:	db05      	blt.n	800b084 <__hi0bits+0x38>
 800b078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b07c:	f103 0301 	add.w	r3, r3, #1
 800b080:	bf08      	it	eq
 800b082:	2320      	moveq	r3, #32
 800b084:	4618      	mov	r0, r3
 800b086:	4770      	bx	lr
 800b088:	2300      	movs	r3, #0
 800b08a:	e7e4      	b.n	800b056 <__hi0bits+0xa>

0800b08c <__lo0bits>:
 800b08c:	6803      	ldr	r3, [r0, #0]
 800b08e:	f013 0207 	ands.w	r2, r3, #7
 800b092:	4601      	mov	r1, r0
 800b094:	d00b      	beq.n	800b0ae <__lo0bits+0x22>
 800b096:	07da      	lsls	r2, r3, #31
 800b098:	d423      	bmi.n	800b0e2 <__lo0bits+0x56>
 800b09a:	0798      	lsls	r0, r3, #30
 800b09c:	bf49      	itett	mi
 800b09e:	085b      	lsrmi	r3, r3, #1
 800b0a0:	089b      	lsrpl	r3, r3, #2
 800b0a2:	2001      	movmi	r0, #1
 800b0a4:	600b      	strmi	r3, [r1, #0]
 800b0a6:	bf5c      	itt	pl
 800b0a8:	600b      	strpl	r3, [r1, #0]
 800b0aa:	2002      	movpl	r0, #2
 800b0ac:	4770      	bx	lr
 800b0ae:	b298      	uxth	r0, r3
 800b0b0:	b9a8      	cbnz	r0, 800b0de <__lo0bits+0x52>
 800b0b2:	0c1b      	lsrs	r3, r3, #16
 800b0b4:	2010      	movs	r0, #16
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	b90a      	cbnz	r2, 800b0be <__lo0bits+0x32>
 800b0ba:	3008      	adds	r0, #8
 800b0bc:	0a1b      	lsrs	r3, r3, #8
 800b0be:	071a      	lsls	r2, r3, #28
 800b0c0:	bf04      	itt	eq
 800b0c2:	091b      	lsreq	r3, r3, #4
 800b0c4:	3004      	addeq	r0, #4
 800b0c6:	079a      	lsls	r2, r3, #30
 800b0c8:	bf04      	itt	eq
 800b0ca:	089b      	lsreq	r3, r3, #2
 800b0cc:	3002      	addeq	r0, #2
 800b0ce:	07da      	lsls	r2, r3, #31
 800b0d0:	d403      	bmi.n	800b0da <__lo0bits+0x4e>
 800b0d2:	085b      	lsrs	r3, r3, #1
 800b0d4:	f100 0001 	add.w	r0, r0, #1
 800b0d8:	d005      	beq.n	800b0e6 <__lo0bits+0x5a>
 800b0da:	600b      	str	r3, [r1, #0]
 800b0dc:	4770      	bx	lr
 800b0de:	4610      	mov	r0, r2
 800b0e0:	e7e9      	b.n	800b0b6 <__lo0bits+0x2a>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	4770      	bx	lr
 800b0e6:	2020      	movs	r0, #32
 800b0e8:	4770      	bx	lr
	...

0800b0ec <__i2b>:
 800b0ec:	b510      	push	{r4, lr}
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	f7ff ff03 	bl	800aefc <_Balloc>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	b928      	cbnz	r0, 800b106 <__i2b+0x1a>
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <__i2b+0x24>)
 800b0fc:	4805      	ldr	r0, [pc, #20]	; (800b114 <__i2b+0x28>)
 800b0fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b102:	f000 fbf1 	bl	800b8e8 <__assert_func>
 800b106:	2301      	movs	r3, #1
 800b108:	6144      	str	r4, [r0, #20]
 800b10a:	6103      	str	r3, [r0, #16]
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	bf00      	nop
 800b110:	0800c6bf 	.word	0x0800c6bf
 800b114:	0800c6d0 	.word	0x0800c6d0

0800b118 <__multiply>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	4691      	mov	r9, r2
 800b11e:	690a      	ldr	r2, [r1, #16]
 800b120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b124:	429a      	cmp	r2, r3
 800b126:	bfb8      	it	lt
 800b128:	460b      	movlt	r3, r1
 800b12a:	460c      	mov	r4, r1
 800b12c:	bfbc      	itt	lt
 800b12e:	464c      	movlt	r4, r9
 800b130:	4699      	movlt	r9, r3
 800b132:	6927      	ldr	r7, [r4, #16]
 800b134:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b138:	68a3      	ldr	r3, [r4, #8]
 800b13a:	6861      	ldr	r1, [r4, #4]
 800b13c:	eb07 060a 	add.w	r6, r7, sl
 800b140:	42b3      	cmp	r3, r6
 800b142:	b085      	sub	sp, #20
 800b144:	bfb8      	it	lt
 800b146:	3101      	addlt	r1, #1
 800b148:	f7ff fed8 	bl	800aefc <_Balloc>
 800b14c:	b930      	cbnz	r0, 800b15c <__multiply+0x44>
 800b14e:	4602      	mov	r2, r0
 800b150:	4b44      	ldr	r3, [pc, #272]	; (800b264 <__multiply+0x14c>)
 800b152:	4845      	ldr	r0, [pc, #276]	; (800b268 <__multiply+0x150>)
 800b154:	f240 115d 	movw	r1, #349	; 0x15d
 800b158:	f000 fbc6 	bl	800b8e8 <__assert_func>
 800b15c:	f100 0514 	add.w	r5, r0, #20
 800b160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b164:	462b      	mov	r3, r5
 800b166:	2200      	movs	r2, #0
 800b168:	4543      	cmp	r3, r8
 800b16a:	d321      	bcc.n	800b1b0 <__multiply+0x98>
 800b16c:	f104 0314 	add.w	r3, r4, #20
 800b170:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b174:	f109 0314 	add.w	r3, r9, #20
 800b178:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b17c:	9202      	str	r2, [sp, #8]
 800b17e:	1b3a      	subs	r2, r7, r4
 800b180:	3a15      	subs	r2, #21
 800b182:	f022 0203 	bic.w	r2, r2, #3
 800b186:	3204      	adds	r2, #4
 800b188:	f104 0115 	add.w	r1, r4, #21
 800b18c:	428f      	cmp	r7, r1
 800b18e:	bf38      	it	cc
 800b190:	2204      	movcc	r2, #4
 800b192:	9201      	str	r2, [sp, #4]
 800b194:	9a02      	ldr	r2, [sp, #8]
 800b196:	9303      	str	r3, [sp, #12]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d80c      	bhi.n	800b1b6 <__multiply+0x9e>
 800b19c:	2e00      	cmp	r6, #0
 800b19e:	dd03      	ble.n	800b1a8 <__multiply+0x90>
 800b1a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d05a      	beq.n	800b25e <__multiply+0x146>
 800b1a8:	6106      	str	r6, [r0, #16]
 800b1aa:	b005      	add	sp, #20
 800b1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b0:	f843 2b04 	str.w	r2, [r3], #4
 800b1b4:	e7d8      	b.n	800b168 <__multiply+0x50>
 800b1b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1ba:	f1ba 0f00 	cmp.w	sl, #0
 800b1be:	d024      	beq.n	800b20a <__multiply+0xf2>
 800b1c0:	f104 0e14 	add.w	lr, r4, #20
 800b1c4:	46a9      	mov	r9, r5
 800b1c6:	f04f 0c00 	mov.w	ip, #0
 800b1ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1ce:	f8d9 1000 	ldr.w	r1, [r9]
 800b1d2:	fa1f fb82 	uxth.w	fp, r2
 800b1d6:	b289      	uxth	r1, r1
 800b1d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b1dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b1e0:	f8d9 2000 	ldr.w	r2, [r9]
 800b1e4:	4461      	add	r1, ip
 800b1e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800b1ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1f2:	b289      	uxth	r1, r1
 800b1f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1f8:	4577      	cmp	r7, lr
 800b1fa:	f849 1b04 	str.w	r1, [r9], #4
 800b1fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b202:	d8e2      	bhi.n	800b1ca <__multiply+0xb2>
 800b204:	9a01      	ldr	r2, [sp, #4]
 800b206:	f845 c002 	str.w	ip, [r5, r2]
 800b20a:	9a03      	ldr	r2, [sp, #12]
 800b20c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b210:	3304      	adds	r3, #4
 800b212:	f1b9 0f00 	cmp.w	r9, #0
 800b216:	d020      	beq.n	800b25a <__multiply+0x142>
 800b218:	6829      	ldr	r1, [r5, #0]
 800b21a:	f104 0c14 	add.w	ip, r4, #20
 800b21e:	46ae      	mov	lr, r5
 800b220:	f04f 0a00 	mov.w	sl, #0
 800b224:	f8bc b000 	ldrh.w	fp, [ip]
 800b228:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b22c:	fb09 220b 	mla	r2, r9, fp, r2
 800b230:	4492      	add	sl, r2
 800b232:	b289      	uxth	r1, r1
 800b234:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b238:	f84e 1b04 	str.w	r1, [lr], #4
 800b23c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b240:	f8be 1000 	ldrh.w	r1, [lr]
 800b244:	0c12      	lsrs	r2, r2, #16
 800b246:	fb09 1102 	mla	r1, r9, r2, r1
 800b24a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b24e:	4567      	cmp	r7, ip
 800b250:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b254:	d8e6      	bhi.n	800b224 <__multiply+0x10c>
 800b256:	9a01      	ldr	r2, [sp, #4]
 800b258:	50a9      	str	r1, [r5, r2]
 800b25a:	3504      	adds	r5, #4
 800b25c:	e79a      	b.n	800b194 <__multiply+0x7c>
 800b25e:	3e01      	subs	r6, #1
 800b260:	e79c      	b.n	800b19c <__multiply+0x84>
 800b262:	bf00      	nop
 800b264:	0800c6bf 	.word	0x0800c6bf
 800b268:	0800c6d0 	.word	0x0800c6d0

0800b26c <__pow5mult>:
 800b26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b270:	4615      	mov	r5, r2
 800b272:	f012 0203 	ands.w	r2, r2, #3
 800b276:	4606      	mov	r6, r0
 800b278:	460f      	mov	r7, r1
 800b27a:	d007      	beq.n	800b28c <__pow5mult+0x20>
 800b27c:	4c25      	ldr	r4, [pc, #148]	; (800b314 <__pow5mult+0xa8>)
 800b27e:	3a01      	subs	r2, #1
 800b280:	2300      	movs	r3, #0
 800b282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b286:	f7ff fe9b 	bl	800afc0 <__multadd>
 800b28a:	4607      	mov	r7, r0
 800b28c:	10ad      	asrs	r5, r5, #2
 800b28e:	d03d      	beq.n	800b30c <__pow5mult+0xa0>
 800b290:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b292:	b97c      	cbnz	r4, 800b2b4 <__pow5mult+0x48>
 800b294:	2010      	movs	r0, #16
 800b296:	f7fe f98d 	bl	80095b4 <malloc>
 800b29a:	4602      	mov	r2, r0
 800b29c:	6270      	str	r0, [r6, #36]	; 0x24
 800b29e:	b928      	cbnz	r0, 800b2ac <__pow5mult+0x40>
 800b2a0:	4b1d      	ldr	r3, [pc, #116]	; (800b318 <__pow5mult+0xac>)
 800b2a2:	481e      	ldr	r0, [pc, #120]	; (800b31c <__pow5mult+0xb0>)
 800b2a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2a8:	f000 fb1e 	bl	800b8e8 <__assert_func>
 800b2ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2b0:	6004      	str	r4, [r0, #0]
 800b2b2:	60c4      	str	r4, [r0, #12]
 800b2b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2bc:	b94c      	cbnz	r4, 800b2d2 <__pow5mult+0x66>
 800b2be:	f240 2171 	movw	r1, #625	; 0x271
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7ff ff12 	bl	800b0ec <__i2b>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	6003      	str	r3, [r0, #0]
 800b2d2:	f04f 0900 	mov.w	r9, #0
 800b2d6:	07eb      	lsls	r3, r5, #31
 800b2d8:	d50a      	bpl.n	800b2f0 <__pow5mult+0x84>
 800b2da:	4639      	mov	r1, r7
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4630      	mov	r0, r6
 800b2e0:	f7ff ff1a 	bl	800b118 <__multiply>
 800b2e4:	4639      	mov	r1, r7
 800b2e6:	4680      	mov	r8, r0
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff fe47 	bl	800af7c <_Bfree>
 800b2ee:	4647      	mov	r7, r8
 800b2f0:	106d      	asrs	r5, r5, #1
 800b2f2:	d00b      	beq.n	800b30c <__pow5mult+0xa0>
 800b2f4:	6820      	ldr	r0, [r4, #0]
 800b2f6:	b938      	cbnz	r0, 800b308 <__pow5mult+0x9c>
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f7ff ff0b 	bl	800b118 <__multiply>
 800b302:	6020      	str	r0, [r4, #0]
 800b304:	f8c0 9000 	str.w	r9, [r0]
 800b308:	4604      	mov	r4, r0
 800b30a:	e7e4      	b.n	800b2d6 <__pow5mult+0x6a>
 800b30c:	4638      	mov	r0, r7
 800b30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b312:	bf00      	nop
 800b314:	0800c820 	.word	0x0800c820
 800b318:	0800c64d 	.word	0x0800c64d
 800b31c:	0800c6d0 	.word	0x0800c6d0

0800b320 <__lshift>:
 800b320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b324:	460c      	mov	r4, r1
 800b326:	6849      	ldr	r1, [r1, #4]
 800b328:	6923      	ldr	r3, [r4, #16]
 800b32a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b32e:	68a3      	ldr	r3, [r4, #8]
 800b330:	4607      	mov	r7, r0
 800b332:	4691      	mov	r9, r2
 800b334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b338:	f108 0601 	add.w	r6, r8, #1
 800b33c:	42b3      	cmp	r3, r6
 800b33e:	db0b      	blt.n	800b358 <__lshift+0x38>
 800b340:	4638      	mov	r0, r7
 800b342:	f7ff fddb 	bl	800aefc <_Balloc>
 800b346:	4605      	mov	r5, r0
 800b348:	b948      	cbnz	r0, 800b35e <__lshift+0x3e>
 800b34a:	4602      	mov	r2, r0
 800b34c:	4b2a      	ldr	r3, [pc, #168]	; (800b3f8 <__lshift+0xd8>)
 800b34e:	482b      	ldr	r0, [pc, #172]	; (800b3fc <__lshift+0xdc>)
 800b350:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b354:	f000 fac8 	bl	800b8e8 <__assert_func>
 800b358:	3101      	adds	r1, #1
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	e7ee      	b.n	800b33c <__lshift+0x1c>
 800b35e:	2300      	movs	r3, #0
 800b360:	f100 0114 	add.w	r1, r0, #20
 800b364:	f100 0210 	add.w	r2, r0, #16
 800b368:	4618      	mov	r0, r3
 800b36a:	4553      	cmp	r3, sl
 800b36c:	db37      	blt.n	800b3de <__lshift+0xbe>
 800b36e:	6920      	ldr	r0, [r4, #16]
 800b370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b374:	f104 0314 	add.w	r3, r4, #20
 800b378:	f019 091f 	ands.w	r9, r9, #31
 800b37c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b380:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b384:	d02f      	beq.n	800b3e6 <__lshift+0xc6>
 800b386:	f1c9 0e20 	rsb	lr, r9, #32
 800b38a:	468a      	mov	sl, r1
 800b38c:	f04f 0c00 	mov.w	ip, #0
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	fa02 f209 	lsl.w	r2, r2, r9
 800b396:	ea42 020c 	orr.w	r2, r2, ip
 800b39a:	f84a 2b04 	str.w	r2, [sl], #4
 800b39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3a2:	4298      	cmp	r0, r3
 800b3a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b3a8:	d8f2      	bhi.n	800b390 <__lshift+0x70>
 800b3aa:	1b03      	subs	r3, r0, r4
 800b3ac:	3b15      	subs	r3, #21
 800b3ae:	f023 0303 	bic.w	r3, r3, #3
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	f104 0215 	add.w	r2, r4, #21
 800b3b8:	4290      	cmp	r0, r2
 800b3ba:	bf38      	it	cc
 800b3bc:	2304      	movcc	r3, #4
 800b3be:	f841 c003 	str.w	ip, [r1, r3]
 800b3c2:	f1bc 0f00 	cmp.w	ip, #0
 800b3c6:	d001      	beq.n	800b3cc <__lshift+0xac>
 800b3c8:	f108 0602 	add.w	r6, r8, #2
 800b3cc:	3e01      	subs	r6, #1
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	612e      	str	r6, [r5, #16]
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	f7ff fdd2 	bl	800af7c <_Bfree>
 800b3d8:	4628      	mov	r0, r5
 800b3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	e7c1      	b.n	800b36a <__lshift+0x4a>
 800b3e6:	3904      	subs	r1, #4
 800b3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3f0:	4298      	cmp	r0, r3
 800b3f2:	d8f9      	bhi.n	800b3e8 <__lshift+0xc8>
 800b3f4:	e7ea      	b.n	800b3cc <__lshift+0xac>
 800b3f6:	bf00      	nop
 800b3f8:	0800c6bf 	.word	0x0800c6bf
 800b3fc:	0800c6d0 	.word	0x0800c6d0

0800b400 <__mcmp>:
 800b400:	b530      	push	{r4, r5, lr}
 800b402:	6902      	ldr	r2, [r0, #16]
 800b404:	690c      	ldr	r4, [r1, #16]
 800b406:	1b12      	subs	r2, r2, r4
 800b408:	d10e      	bne.n	800b428 <__mcmp+0x28>
 800b40a:	f100 0314 	add.w	r3, r0, #20
 800b40e:	3114      	adds	r1, #20
 800b410:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b418:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b41c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b420:	42a5      	cmp	r5, r4
 800b422:	d003      	beq.n	800b42c <__mcmp+0x2c>
 800b424:	d305      	bcc.n	800b432 <__mcmp+0x32>
 800b426:	2201      	movs	r2, #1
 800b428:	4610      	mov	r0, r2
 800b42a:	bd30      	pop	{r4, r5, pc}
 800b42c:	4283      	cmp	r3, r0
 800b42e:	d3f3      	bcc.n	800b418 <__mcmp+0x18>
 800b430:	e7fa      	b.n	800b428 <__mcmp+0x28>
 800b432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b436:	e7f7      	b.n	800b428 <__mcmp+0x28>

0800b438 <__mdiff>:
 800b438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	460c      	mov	r4, r1
 800b43e:	4606      	mov	r6, r0
 800b440:	4611      	mov	r1, r2
 800b442:	4620      	mov	r0, r4
 800b444:	4690      	mov	r8, r2
 800b446:	f7ff ffdb 	bl	800b400 <__mcmp>
 800b44a:	1e05      	subs	r5, r0, #0
 800b44c:	d110      	bne.n	800b470 <__mdiff+0x38>
 800b44e:	4629      	mov	r1, r5
 800b450:	4630      	mov	r0, r6
 800b452:	f7ff fd53 	bl	800aefc <_Balloc>
 800b456:	b930      	cbnz	r0, 800b466 <__mdiff+0x2e>
 800b458:	4b3a      	ldr	r3, [pc, #232]	; (800b544 <__mdiff+0x10c>)
 800b45a:	4602      	mov	r2, r0
 800b45c:	f240 2132 	movw	r1, #562	; 0x232
 800b460:	4839      	ldr	r0, [pc, #228]	; (800b548 <__mdiff+0x110>)
 800b462:	f000 fa41 	bl	800b8e8 <__assert_func>
 800b466:	2301      	movs	r3, #1
 800b468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b46c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b470:	bfa4      	itt	ge
 800b472:	4643      	movge	r3, r8
 800b474:	46a0      	movge	r8, r4
 800b476:	4630      	mov	r0, r6
 800b478:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b47c:	bfa6      	itte	ge
 800b47e:	461c      	movge	r4, r3
 800b480:	2500      	movge	r5, #0
 800b482:	2501      	movlt	r5, #1
 800b484:	f7ff fd3a 	bl	800aefc <_Balloc>
 800b488:	b920      	cbnz	r0, 800b494 <__mdiff+0x5c>
 800b48a:	4b2e      	ldr	r3, [pc, #184]	; (800b544 <__mdiff+0x10c>)
 800b48c:	4602      	mov	r2, r0
 800b48e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b492:	e7e5      	b.n	800b460 <__mdiff+0x28>
 800b494:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b498:	6926      	ldr	r6, [r4, #16]
 800b49a:	60c5      	str	r5, [r0, #12]
 800b49c:	f104 0914 	add.w	r9, r4, #20
 800b4a0:	f108 0514 	add.w	r5, r8, #20
 800b4a4:	f100 0e14 	add.w	lr, r0, #20
 800b4a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4b0:	f108 0210 	add.w	r2, r8, #16
 800b4b4:	46f2      	mov	sl, lr
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4c0:	fa1f f883 	uxth.w	r8, r3
 800b4c4:	fa11 f18b 	uxtah	r1, r1, fp
 800b4c8:	0c1b      	lsrs	r3, r3, #16
 800b4ca:	eba1 0808 	sub.w	r8, r1, r8
 800b4ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4d6:	fa1f f888 	uxth.w	r8, r8
 800b4da:	1419      	asrs	r1, r3, #16
 800b4dc:	454e      	cmp	r6, r9
 800b4de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4e2:	f84a 3b04 	str.w	r3, [sl], #4
 800b4e6:	d8e7      	bhi.n	800b4b8 <__mdiff+0x80>
 800b4e8:	1b33      	subs	r3, r6, r4
 800b4ea:	3b15      	subs	r3, #21
 800b4ec:	f023 0303 	bic.w	r3, r3, #3
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	3415      	adds	r4, #21
 800b4f4:	42a6      	cmp	r6, r4
 800b4f6:	bf38      	it	cc
 800b4f8:	2304      	movcc	r3, #4
 800b4fa:	441d      	add	r5, r3
 800b4fc:	4473      	add	r3, lr
 800b4fe:	469e      	mov	lr, r3
 800b500:	462e      	mov	r6, r5
 800b502:	4566      	cmp	r6, ip
 800b504:	d30e      	bcc.n	800b524 <__mdiff+0xec>
 800b506:	f10c 0203 	add.w	r2, ip, #3
 800b50a:	1b52      	subs	r2, r2, r5
 800b50c:	f022 0203 	bic.w	r2, r2, #3
 800b510:	3d03      	subs	r5, #3
 800b512:	45ac      	cmp	ip, r5
 800b514:	bf38      	it	cc
 800b516:	2200      	movcc	r2, #0
 800b518:	441a      	add	r2, r3
 800b51a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b51e:	b17b      	cbz	r3, 800b540 <__mdiff+0x108>
 800b520:	6107      	str	r7, [r0, #16]
 800b522:	e7a3      	b.n	800b46c <__mdiff+0x34>
 800b524:	f856 8b04 	ldr.w	r8, [r6], #4
 800b528:	fa11 f288 	uxtah	r2, r1, r8
 800b52c:	1414      	asrs	r4, r2, #16
 800b52e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b532:	b292      	uxth	r2, r2
 800b534:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b538:	f84e 2b04 	str.w	r2, [lr], #4
 800b53c:	1421      	asrs	r1, r4, #16
 800b53e:	e7e0      	b.n	800b502 <__mdiff+0xca>
 800b540:	3f01      	subs	r7, #1
 800b542:	e7ea      	b.n	800b51a <__mdiff+0xe2>
 800b544:	0800c6bf 	.word	0x0800c6bf
 800b548:	0800c6d0 	.word	0x0800c6d0

0800b54c <__d2b>:
 800b54c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b550:	4689      	mov	r9, r1
 800b552:	2101      	movs	r1, #1
 800b554:	ec57 6b10 	vmov	r6, r7, d0
 800b558:	4690      	mov	r8, r2
 800b55a:	f7ff fccf 	bl	800aefc <_Balloc>
 800b55e:	4604      	mov	r4, r0
 800b560:	b930      	cbnz	r0, 800b570 <__d2b+0x24>
 800b562:	4602      	mov	r2, r0
 800b564:	4b25      	ldr	r3, [pc, #148]	; (800b5fc <__d2b+0xb0>)
 800b566:	4826      	ldr	r0, [pc, #152]	; (800b600 <__d2b+0xb4>)
 800b568:	f240 310a 	movw	r1, #778	; 0x30a
 800b56c:	f000 f9bc 	bl	800b8e8 <__assert_func>
 800b570:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b574:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b578:	bb35      	cbnz	r5, 800b5c8 <__d2b+0x7c>
 800b57a:	2e00      	cmp	r6, #0
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	d028      	beq.n	800b5d2 <__d2b+0x86>
 800b580:	4668      	mov	r0, sp
 800b582:	9600      	str	r6, [sp, #0]
 800b584:	f7ff fd82 	bl	800b08c <__lo0bits>
 800b588:	9900      	ldr	r1, [sp, #0]
 800b58a:	b300      	cbz	r0, 800b5ce <__d2b+0x82>
 800b58c:	9a01      	ldr	r2, [sp, #4]
 800b58e:	f1c0 0320 	rsb	r3, r0, #32
 800b592:	fa02 f303 	lsl.w	r3, r2, r3
 800b596:	430b      	orrs	r3, r1
 800b598:	40c2      	lsrs	r2, r0
 800b59a:	6163      	str	r3, [r4, #20]
 800b59c:	9201      	str	r2, [sp, #4]
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	61a3      	str	r3, [r4, #24]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bf14      	ite	ne
 800b5a6:	2202      	movne	r2, #2
 800b5a8:	2201      	moveq	r2, #1
 800b5aa:	6122      	str	r2, [r4, #16]
 800b5ac:	b1d5      	cbz	r5, 800b5e4 <__d2b+0x98>
 800b5ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5b2:	4405      	add	r5, r0
 800b5b4:	f8c9 5000 	str.w	r5, [r9]
 800b5b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5bc:	f8c8 0000 	str.w	r0, [r8]
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	b003      	add	sp, #12
 800b5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5cc:	e7d5      	b.n	800b57a <__d2b+0x2e>
 800b5ce:	6161      	str	r1, [r4, #20]
 800b5d0:	e7e5      	b.n	800b59e <__d2b+0x52>
 800b5d2:	a801      	add	r0, sp, #4
 800b5d4:	f7ff fd5a 	bl	800b08c <__lo0bits>
 800b5d8:	9b01      	ldr	r3, [sp, #4]
 800b5da:	6163      	str	r3, [r4, #20]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	6122      	str	r2, [r4, #16]
 800b5e0:	3020      	adds	r0, #32
 800b5e2:	e7e3      	b.n	800b5ac <__d2b+0x60>
 800b5e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5ec:	f8c9 0000 	str.w	r0, [r9]
 800b5f0:	6918      	ldr	r0, [r3, #16]
 800b5f2:	f7ff fd2b 	bl	800b04c <__hi0bits>
 800b5f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5fa:	e7df      	b.n	800b5bc <__d2b+0x70>
 800b5fc:	0800c6bf 	.word	0x0800c6bf
 800b600:	0800c6d0 	.word	0x0800c6d0

0800b604 <_calloc_r>:
 800b604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b606:	fba1 2402 	umull	r2, r4, r1, r2
 800b60a:	b94c      	cbnz	r4, 800b620 <_calloc_r+0x1c>
 800b60c:	4611      	mov	r1, r2
 800b60e:	9201      	str	r2, [sp, #4]
 800b610:	f7fe f87c 	bl	800970c <_malloc_r>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	4605      	mov	r5, r0
 800b618:	b930      	cbnz	r0, 800b628 <_calloc_r+0x24>
 800b61a:	4628      	mov	r0, r5
 800b61c:	b003      	add	sp, #12
 800b61e:	bd30      	pop	{r4, r5, pc}
 800b620:	220c      	movs	r2, #12
 800b622:	6002      	str	r2, [r0, #0]
 800b624:	2500      	movs	r5, #0
 800b626:	e7f8      	b.n	800b61a <_calloc_r+0x16>
 800b628:	4621      	mov	r1, r4
 800b62a:	f7fd fffb 	bl	8009624 <memset>
 800b62e:	e7f4      	b.n	800b61a <_calloc_r+0x16>

0800b630 <__ssputs_r>:
 800b630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b634:	688e      	ldr	r6, [r1, #8]
 800b636:	429e      	cmp	r6, r3
 800b638:	4682      	mov	sl, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	4690      	mov	r8, r2
 800b63e:	461f      	mov	r7, r3
 800b640:	d838      	bhi.n	800b6b4 <__ssputs_r+0x84>
 800b642:	898a      	ldrh	r2, [r1, #12]
 800b644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b648:	d032      	beq.n	800b6b0 <__ssputs_r+0x80>
 800b64a:	6825      	ldr	r5, [r4, #0]
 800b64c:	6909      	ldr	r1, [r1, #16]
 800b64e:	eba5 0901 	sub.w	r9, r5, r1
 800b652:	6965      	ldr	r5, [r4, #20]
 800b654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b65c:	3301      	adds	r3, #1
 800b65e:	444b      	add	r3, r9
 800b660:	106d      	asrs	r5, r5, #1
 800b662:	429d      	cmp	r5, r3
 800b664:	bf38      	it	cc
 800b666:	461d      	movcc	r5, r3
 800b668:	0553      	lsls	r3, r2, #21
 800b66a:	d531      	bpl.n	800b6d0 <__ssputs_r+0xa0>
 800b66c:	4629      	mov	r1, r5
 800b66e:	f7fe f84d 	bl	800970c <_malloc_r>
 800b672:	4606      	mov	r6, r0
 800b674:	b950      	cbnz	r0, 800b68c <__ssputs_r+0x5c>
 800b676:	230c      	movs	r3, #12
 800b678:	f8ca 3000 	str.w	r3, [sl]
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68c:	6921      	ldr	r1, [r4, #16]
 800b68e:	464a      	mov	r2, r9
 800b690:	f7fd ffa0 	bl	80095d4 <memcpy>
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b69a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	6126      	str	r6, [r4, #16]
 800b6a2:	6165      	str	r5, [r4, #20]
 800b6a4:	444e      	add	r6, r9
 800b6a6:	eba5 0509 	sub.w	r5, r5, r9
 800b6aa:	6026      	str	r6, [r4, #0]
 800b6ac:	60a5      	str	r5, [r4, #8]
 800b6ae:	463e      	mov	r6, r7
 800b6b0:	42be      	cmp	r6, r7
 800b6b2:	d900      	bls.n	800b6b6 <__ssputs_r+0x86>
 800b6b4:	463e      	mov	r6, r7
 800b6b6:	6820      	ldr	r0, [r4, #0]
 800b6b8:	4632      	mov	r2, r6
 800b6ba:	4641      	mov	r1, r8
 800b6bc:	f7fd ff98 	bl	80095f0 <memmove>
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	1b9b      	subs	r3, r3, r6
 800b6c4:	60a3      	str	r3, [r4, #8]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	4433      	add	r3, r6
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	e7db      	b.n	800b688 <__ssputs_r+0x58>
 800b6d0:	462a      	mov	r2, r5
 800b6d2:	f000 f94e 	bl	800b972 <_realloc_r>
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d1e1      	bne.n	800b6a0 <__ssputs_r+0x70>
 800b6dc:	6921      	ldr	r1, [r4, #16]
 800b6de:	4650      	mov	r0, sl
 800b6e0:	f7fd ffa8 	bl	8009634 <_free_r>
 800b6e4:	e7c7      	b.n	800b676 <__ssputs_r+0x46>
	...

0800b6e8 <_svfiprintf_r>:
 800b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	4698      	mov	r8, r3
 800b6ee:	898b      	ldrh	r3, [r1, #12]
 800b6f0:	061b      	lsls	r3, r3, #24
 800b6f2:	b09d      	sub	sp, #116	; 0x74
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	4614      	mov	r4, r2
 800b6fa:	d50e      	bpl.n	800b71a <_svfiprintf_r+0x32>
 800b6fc:	690b      	ldr	r3, [r1, #16]
 800b6fe:	b963      	cbnz	r3, 800b71a <_svfiprintf_r+0x32>
 800b700:	2140      	movs	r1, #64	; 0x40
 800b702:	f7fe f803 	bl	800970c <_malloc_r>
 800b706:	6028      	str	r0, [r5, #0]
 800b708:	6128      	str	r0, [r5, #16]
 800b70a:	b920      	cbnz	r0, 800b716 <_svfiprintf_r+0x2e>
 800b70c:	230c      	movs	r3, #12
 800b70e:	603b      	str	r3, [r7, #0]
 800b710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b714:	e0d1      	b.n	800b8ba <_svfiprintf_r+0x1d2>
 800b716:	2340      	movs	r3, #64	; 0x40
 800b718:	616b      	str	r3, [r5, #20]
 800b71a:	2300      	movs	r3, #0
 800b71c:	9309      	str	r3, [sp, #36]	; 0x24
 800b71e:	2320      	movs	r3, #32
 800b720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b724:	f8cd 800c 	str.w	r8, [sp, #12]
 800b728:	2330      	movs	r3, #48	; 0x30
 800b72a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8d4 <_svfiprintf_r+0x1ec>
 800b72e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b732:	f04f 0901 	mov.w	r9, #1
 800b736:	4623      	mov	r3, r4
 800b738:	469a      	mov	sl, r3
 800b73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b73e:	b10a      	cbz	r2, 800b744 <_svfiprintf_r+0x5c>
 800b740:	2a25      	cmp	r2, #37	; 0x25
 800b742:	d1f9      	bne.n	800b738 <_svfiprintf_r+0x50>
 800b744:	ebba 0b04 	subs.w	fp, sl, r4
 800b748:	d00b      	beq.n	800b762 <_svfiprintf_r+0x7a>
 800b74a:	465b      	mov	r3, fp
 800b74c:	4622      	mov	r2, r4
 800b74e:	4629      	mov	r1, r5
 800b750:	4638      	mov	r0, r7
 800b752:	f7ff ff6d 	bl	800b630 <__ssputs_r>
 800b756:	3001      	adds	r0, #1
 800b758:	f000 80aa 	beq.w	800b8b0 <_svfiprintf_r+0x1c8>
 800b75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b75e:	445a      	add	r2, fp
 800b760:	9209      	str	r2, [sp, #36]	; 0x24
 800b762:	f89a 3000 	ldrb.w	r3, [sl]
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 80a2 	beq.w	800b8b0 <_svfiprintf_r+0x1c8>
 800b76c:	2300      	movs	r3, #0
 800b76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b776:	f10a 0a01 	add.w	sl, sl, #1
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	9307      	str	r3, [sp, #28]
 800b77e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b782:	931a      	str	r3, [sp, #104]	; 0x68
 800b784:	4654      	mov	r4, sl
 800b786:	2205      	movs	r2, #5
 800b788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78c:	4851      	ldr	r0, [pc, #324]	; (800b8d4 <_svfiprintf_r+0x1ec>)
 800b78e:	f7f4 fd1f 	bl	80001d0 <memchr>
 800b792:	9a04      	ldr	r2, [sp, #16]
 800b794:	b9d8      	cbnz	r0, 800b7ce <_svfiprintf_r+0xe6>
 800b796:	06d0      	lsls	r0, r2, #27
 800b798:	bf44      	itt	mi
 800b79a:	2320      	movmi	r3, #32
 800b79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a0:	0711      	lsls	r1, r2, #28
 800b7a2:	bf44      	itt	mi
 800b7a4:	232b      	movmi	r3, #43	; 0x2b
 800b7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b0:	d015      	beq.n	800b7de <_svfiprintf_r+0xf6>
 800b7b2:	9a07      	ldr	r2, [sp, #28]
 800b7b4:	4654      	mov	r4, sl
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	f04f 0c0a 	mov.w	ip, #10
 800b7bc:	4621      	mov	r1, r4
 800b7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c2:	3b30      	subs	r3, #48	; 0x30
 800b7c4:	2b09      	cmp	r3, #9
 800b7c6:	d94e      	bls.n	800b866 <_svfiprintf_r+0x17e>
 800b7c8:	b1b0      	cbz	r0, 800b7f8 <_svfiprintf_r+0x110>
 800b7ca:	9207      	str	r2, [sp, #28]
 800b7cc:	e014      	b.n	800b7f8 <_svfiprintf_r+0x110>
 800b7ce:	eba0 0308 	sub.w	r3, r0, r8
 800b7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	46a2      	mov	sl, r4
 800b7dc:	e7d2      	b.n	800b784 <_svfiprintf_r+0x9c>
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	1d19      	adds	r1, r3, #4
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	9103      	str	r1, [sp, #12]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	bfbb      	ittet	lt
 800b7ea:	425b      	neglt	r3, r3
 800b7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f0:	9307      	strge	r3, [sp, #28]
 800b7f2:	9307      	strlt	r3, [sp, #28]
 800b7f4:	bfb8      	it	lt
 800b7f6:	9204      	strlt	r2, [sp, #16]
 800b7f8:	7823      	ldrb	r3, [r4, #0]
 800b7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800b7fc:	d10c      	bne.n	800b818 <_svfiprintf_r+0x130>
 800b7fe:	7863      	ldrb	r3, [r4, #1]
 800b800:	2b2a      	cmp	r3, #42	; 0x2a
 800b802:	d135      	bne.n	800b870 <_svfiprintf_r+0x188>
 800b804:	9b03      	ldr	r3, [sp, #12]
 800b806:	1d1a      	adds	r2, r3, #4
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	9203      	str	r2, [sp, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	bfb8      	it	lt
 800b810:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b814:	3402      	adds	r4, #2
 800b816:	9305      	str	r3, [sp, #20]
 800b818:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8e4 <_svfiprintf_r+0x1fc>
 800b81c:	7821      	ldrb	r1, [r4, #0]
 800b81e:	2203      	movs	r2, #3
 800b820:	4650      	mov	r0, sl
 800b822:	f7f4 fcd5 	bl	80001d0 <memchr>
 800b826:	b140      	cbz	r0, 800b83a <_svfiprintf_r+0x152>
 800b828:	2340      	movs	r3, #64	; 0x40
 800b82a:	eba0 000a 	sub.w	r0, r0, sl
 800b82e:	fa03 f000 	lsl.w	r0, r3, r0
 800b832:	9b04      	ldr	r3, [sp, #16]
 800b834:	4303      	orrs	r3, r0
 800b836:	3401      	adds	r4, #1
 800b838:	9304      	str	r3, [sp, #16]
 800b83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83e:	4826      	ldr	r0, [pc, #152]	; (800b8d8 <_svfiprintf_r+0x1f0>)
 800b840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b844:	2206      	movs	r2, #6
 800b846:	f7f4 fcc3 	bl	80001d0 <memchr>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d038      	beq.n	800b8c0 <_svfiprintf_r+0x1d8>
 800b84e:	4b23      	ldr	r3, [pc, #140]	; (800b8dc <_svfiprintf_r+0x1f4>)
 800b850:	bb1b      	cbnz	r3, 800b89a <_svfiprintf_r+0x1b2>
 800b852:	9b03      	ldr	r3, [sp, #12]
 800b854:	3307      	adds	r3, #7
 800b856:	f023 0307 	bic.w	r3, r3, #7
 800b85a:	3308      	adds	r3, #8
 800b85c:	9303      	str	r3, [sp, #12]
 800b85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b860:	4433      	add	r3, r6
 800b862:	9309      	str	r3, [sp, #36]	; 0x24
 800b864:	e767      	b.n	800b736 <_svfiprintf_r+0x4e>
 800b866:	fb0c 3202 	mla	r2, ip, r2, r3
 800b86a:	460c      	mov	r4, r1
 800b86c:	2001      	movs	r0, #1
 800b86e:	e7a5      	b.n	800b7bc <_svfiprintf_r+0xd4>
 800b870:	2300      	movs	r3, #0
 800b872:	3401      	adds	r4, #1
 800b874:	9305      	str	r3, [sp, #20]
 800b876:	4619      	mov	r1, r3
 800b878:	f04f 0c0a 	mov.w	ip, #10
 800b87c:	4620      	mov	r0, r4
 800b87e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b882:	3a30      	subs	r2, #48	; 0x30
 800b884:	2a09      	cmp	r2, #9
 800b886:	d903      	bls.n	800b890 <_svfiprintf_r+0x1a8>
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d0c5      	beq.n	800b818 <_svfiprintf_r+0x130>
 800b88c:	9105      	str	r1, [sp, #20]
 800b88e:	e7c3      	b.n	800b818 <_svfiprintf_r+0x130>
 800b890:	fb0c 2101 	mla	r1, ip, r1, r2
 800b894:	4604      	mov	r4, r0
 800b896:	2301      	movs	r3, #1
 800b898:	e7f0      	b.n	800b87c <_svfiprintf_r+0x194>
 800b89a:	ab03      	add	r3, sp, #12
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	462a      	mov	r2, r5
 800b8a0:	4b0f      	ldr	r3, [pc, #60]	; (800b8e0 <_svfiprintf_r+0x1f8>)
 800b8a2:	a904      	add	r1, sp, #16
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f7fe f845 	bl	8009934 <_printf_float>
 800b8aa:	1c42      	adds	r2, r0, #1
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	d1d6      	bne.n	800b85e <_svfiprintf_r+0x176>
 800b8b0:	89ab      	ldrh	r3, [r5, #12]
 800b8b2:	065b      	lsls	r3, r3, #25
 800b8b4:	f53f af2c 	bmi.w	800b710 <_svfiprintf_r+0x28>
 800b8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8ba:	b01d      	add	sp, #116	; 0x74
 800b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c0:	ab03      	add	r3, sp, #12
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	462a      	mov	r2, r5
 800b8c6:	4b06      	ldr	r3, [pc, #24]	; (800b8e0 <_svfiprintf_r+0x1f8>)
 800b8c8:	a904      	add	r1, sp, #16
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f7fe fad6 	bl	8009e7c <_printf_i>
 800b8d0:	e7eb      	b.n	800b8aa <_svfiprintf_r+0x1c2>
 800b8d2:	bf00      	nop
 800b8d4:	0800c82c 	.word	0x0800c82c
 800b8d8:	0800c836 	.word	0x0800c836
 800b8dc:	08009935 	.word	0x08009935
 800b8e0:	0800b631 	.word	0x0800b631
 800b8e4:	0800c832 	.word	0x0800c832

0800b8e8 <__assert_func>:
 800b8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4b09      	ldr	r3, [pc, #36]	; (800b914 <__assert_func+0x2c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	68d8      	ldr	r0, [r3, #12]
 800b8f6:	b14c      	cbz	r4, 800b90c <__assert_func+0x24>
 800b8f8:	4b07      	ldr	r3, [pc, #28]	; (800b918 <__assert_func+0x30>)
 800b8fa:	9100      	str	r1, [sp, #0]
 800b8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b900:	4906      	ldr	r1, [pc, #24]	; (800b91c <__assert_func+0x34>)
 800b902:	462b      	mov	r3, r5
 800b904:	f000 f80e 	bl	800b924 <fiprintf>
 800b908:	f7fd fe22 	bl	8009550 <abort>
 800b90c:	4b04      	ldr	r3, [pc, #16]	; (800b920 <__assert_func+0x38>)
 800b90e:	461c      	mov	r4, r3
 800b910:	e7f3      	b.n	800b8fa <__assert_func+0x12>
 800b912:	bf00      	nop
 800b914:	2000000c 	.word	0x2000000c
 800b918:	0800c83d 	.word	0x0800c83d
 800b91c:	0800c84a 	.word	0x0800c84a
 800b920:	0800c878 	.word	0x0800c878

0800b924 <fiprintf>:
 800b924:	b40e      	push	{r1, r2, r3}
 800b926:	b503      	push	{r0, r1, lr}
 800b928:	4601      	mov	r1, r0
 800b92a:	ab03      	add	r3, sp, #12
 800b92c:	4805      	ldr	r0, [pc, #20]	; (800b944 <fiprintf+0x20>)
 800b92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b932:	6800      	ldr	r0, [r0, #0]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	f000 f875 	bl	800ba24 <_vfiprintf_r>
 800b93a:	b002      	add	sp, #8
 800b93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b940:	b003      	add	sp, #12
 800b942:	4770      	bx	lr
 800b944:	2000000c 	.word	0x2000000c

0800b948 <__retarget_lock_init_recursive>:
 800b948:	4770      	bx	lr

0800b94a <__retarget_lock_acquire_recursive>:
 800b94a:	4770      	bx	lr

0800b94c <__retarget_lock_release_recursive>:
 800b94c:	4770      	bx	lr

0800b94e <__ascii_mbtowc>:
 800b94e:	b082      	sub	sp, #8
 800b950:	b901      	cbnz	r1, 800b954 <__ascii_mbtowc+0x6>
 800b952:	a901      	add	r1, sp, #4
 800b954:	b142      	cbz	r2, 800b968 <__ascii_mbtowc+0x1a>
 800b956:	b14b      	cbz	r3, 800b96c <__ascii_mbtowc+0x1e>
 800b958:	7813      	ldrb	r3, [r2, #0]
 800b95a:	600b      	str	r3, [r1, #0]
 800b95c:	7812      	ldrb	r2, [r2, #0]
 800b95e:	1e10      	subs	r0, r2, #0
 800b960:	bf18      	it	ne
 800b962:	2001      	movne	r0, #1
 800b964:	b002      	add	sp, #8
 800b966:	4770      	bx	lr
 800b968:	4610      	mov	r0, r2
 800b96a:	e7fb      	b.n	800b964 <__ascii_mbtowc+0x16>
 800b96c:	f06f 0001 	mvn.w	r0, #1
 800b970:	e7f8      	b.n	800b964 <__ascii_mbtowc+0x16>

0800b972 <_realloc_r>:
 800b972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b976:	4680      	mov	r8, r0
 800b978:	4614      	mov	r4, r2
 800b97a:	460e      	mov	r6, r1
 800b97c:	b921      	cbnz	r1, 800b988 <_realloc_r+0x16>
 800b97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b982:	4611      	mov	r1, r2
 800b984:	f7fd bec2 	b.w	800970c <_malloc_r>
 800b988:	b92a      	cbnz	r2, 800b996 <_realloc_r+0x24>
 800b98a:	f7fd fe53 	bl	8009634 <_free_r>
 800b98e:	4625      	mov	r5, r4
 800b990:	4628      	mov	r0, r5
 800b992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b996:	f000 fc5f 	bl	800c258 <_malloc_usable_size_r>
 800b99a:	4284      	cmp	r4, r0
 800b99c:	4607      	mov	r7, r0
 800b99e:	d802      	bhi.n	800b9a6 <_realloc_r+0x34>
 800b9a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9a4:	d812      	bhi.n	800b9cc <_realloc_r+0x5a>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	f7fd feaf 	bl	800970c <_malloc_r>
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d0ed      	beq.n	800b990 <_realloc_r+0x1e>
 800b9b4:	42bc      	cmp	r4, r7
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	bf28      	it	cs
 800b9bc:	463a      	movcs	r2, r7
 800b9be:	f7fd fe09 	bl	80095d4 <memcpy>
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	f7fd fe35 	bl	8009634 <_free_r>
 800b9ca:	e7e1      	b.n	800b990 <_realloc_r+0x1e>
 800b9cc:	4635      	mov	r5, r6
 800b9ce:	e7df      	b.n	800b990 <_realloc_r+0x1e>

0800b9d0 <__sfputc_r>:
 800b9d0:	6893      	ldr	r3, [r2, #8]
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	b410      	push	{r4}
 800b9d8:	6093      	str	r3, [r2, #8]
 800b9da:	da08      	bge.n	800b9ee <__sfputc_r+0x1e>
 800b9dc:	6994      	ldr	r4, [r2, #24]
 800b9de:	42a3      	cmp	r3, r4
 800b9e0:	db01      	blt.n	800b9e6 <__sfputc_r+0x16>
 800b9e2:	290a      	cmp	r1, #10
 800b9e4:	d103      	bne.n	800b9ee <__sfputc_r+0x1e>
 800b9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ea:	f000 b94b 	b.w	800bc84 <__swbuf_r>
 800b9ee:	6813      	ldr	r3, [r2, #0]
 800b9f0:	1c58      	adds	r0, r3, #1
 800b9f2:	6010      	str	r0, [r2, #0]
 800b9f4:	7019      	strb	r1, [r3, #0]
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <__sfputs_r>:
 800b9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba00:	4606      	mov	r6, r0
 800ba02:	460f      	mov	r7, r1
 800ba04:	4614      	mov	r4, r2
 800ba06:	18d5      	adds	r5, r2, r3
 800ba08:	42ac      	cmp	r4, r5
 800ba0a:	d101      	bne.n	800ba10 <__sfputs_r+0x12>
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e007      	b.n	800ba20 <__sfputs_r+0x22>
 800ba10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba14:	463a      	mov	r2, r7
 800ba16:	4630      	mov	r0, r6
 800ba18:	f7ff ffda 	bl	800b9d0 <__sfputc_r>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d1f3      	bne.n	800ba08 <__sfputs_r+0xa>
 800ba20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba24 <_vfiprintf_r>:
 800ba24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba28:	460d      	mov	r5, r1
 800ba2a:	b09d      	sub	sp, #116	; 0x74
 800ba2c:	4614      	mov	r4, r2
 800ba2e:	4698      	mov	r8, r3
 800ba30:	4606      	mov	r6, r0
 800ba32:	b118      	cbz	r0, 800ba3c <_vfiprintf_r+0x18>
 800ba34:	6983      	ldr	r3, [r0, #24]
 800ba36:	b90b      	cbnz	r3, 800ba3c <_vfiprintf_r+0x18>
 800ba38:	f000 fb0c 	bl	800c054 <__sinit>
 800ba3c:	4b89      	ldr	r3, [pc, #548]	; (800bc64 <_vfiprintf_r+0x240>)
 800ba3e:	429d      	cmp	r5, r3
 800ba40:	d11b      	bne.n	800ba7a <_vfiprintf_r+0x56>
 800ba42:	6875      	ldr	r5, [r6, #4]
 800ba44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba46:	07d9      	lsls	r1, r3, #31
 800ba48:	d405      	bmi.n	800ba56 <_vfiprintf_r+0x32>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	059a      	lsls	r2, r3, #22
 800ba4e:	d402      	bmi.n	800ba56 <_vfiprintf_r+0x32>
 800ba50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba52:	f7ff ff7a 	bl	800b94a <__retarget_lock_acquire_recursive>
 800ba56:	89ab      	ldrh	r3, [r5, #12]
 800ba58:	071b      	lsls	r3, r3, #28
 800ba5a:	d501      	bpl.n	800ba60 <_vfiprintf_r+0x3c>
 800ba5c:	692b      	ldr	r3, [r5, #16]
 800ba5e:	b9eb      	cbnz	r3, 800ba9c <_vfiprintf_r+0x78>
 800ba60:	4629      	mov	r1, r5
 800ba62:	4630      	mov	r0, r6
 800ba64:	f000 f96e 	bl	800bd44 <__swsetup_r>
 800ba68:	b1c0      	cbz	r0, 800ba9c <_vfiprintf_r+0x78>
 800ba6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba6c:	07dc      	lsls	r4, r3, #31
 800ba6e:	d50e      	bpl.n	800ba8e <_vfiprintf_r+0x6a>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba74:	b01d      	add	sp, #116	; 0x74
 800ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7a:	4b7b      	ldr	r3, [pc, #492]	; (800bc68 <_vfiprintf_r+0x244>)
 800ba7c:	429d      	cmp	r5, r3
 800ba7e:	d101      	bne.n	800ba84 <_vfiprintf_r+0x60>
 800ba80:	68b5      	ldr	r5, [r6, #8]
 800ba82:	e7df      	b.n	800ba44 <_vfiprintf_r+0x20>
 800ba84:	4b79      	ldr	r3, [pc, #484]	; (800bc6c <_vfiprintf_r+0x248>)
 800ba86:	429d      	cmp	r5, r3
 800ba88:	bf08      	it	eq
 800ba8a:	68f5      	ldreq	r5, [r6, #12]
 800ba8c:	e7da      	b.n	800ba44 <_vfiprintf_r+0x20>
 800ba8e:	89ab      	ldrh	r3, [r5, #12]
 800ba90:	0598      	lsls	r0, r3, #22
 800ba92:	d4ed      	bmi.n	800ba70 <_vfiprintf_r+0x4c>
 800ba94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba96:	f7ff ff59 	bl	800b94c <__retarget_lock_release_recursive>
 800ba9a:	e7e9      	b.n	800ba70 <_vfiprintf_r+0x4c>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9309      	str	r3, [sp, #36]	; 0x24
 800baa0:	2320      	movs	r3, #32
 800baa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baa6:	f8cd 800c 	str.w	r8, [sp, #12]
 800baaa:	2330      	movs	r3, #48	; 0x30
 800baac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc70 <_vfiprintf_r+0x24c>
 800bab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bab4:	f04f 0901 	mov.w	r9, #1
 800bab8:	4623      	mov	r3, r4
 800baba:	469a      	mov	sl, r3
 800babc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bac0:	b10a      	cbz	r2, 800bac6 <_vfiprintf_r+0xa2>
 800bac2:	2a25      	cmp	r2, #37	; 0x25
 800bac4:	d1f9      	bne.n	800baba <_vfiprintf_r+0x96>
 800bac6:	ebba 0b04 	subs.w	fp, sl, r4
 800baca:	d00b      	beq.n	800bae4 <_vfiprintf_r+0xc0>
 800bacc:	465b      	mov	r3, fp
 800bace:	4622      	mov	r2, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	4630      	mov	r0, r6
 800bad4:	f7ff ff93 	bl	800b9fe <__sfputs_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	f000 80aa 	beq.w	800bc32 <_vfiprintf_r+0x20e>
 800bade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bae0:	445a      	add	r2, fp
 800bae2:	9209      	str	r2, [sp, #36]	; 0x24
 800bae4:	f89a 3000 	ldrb.w	r3, [sl]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 80a2 	beq.w	800bc32 <_vfiprintf_r+0x20e>
 800baee:	2300      	movs	r3, #0
 800baf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800baf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baf8:	f10a 0a01 	add.w	sl, sl, #1
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	9307      	str	r3, [sp, #28]
 800bb00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb04:	931a      	str	r3, [sp, #104]	; 0x68
 800bb06:	4654      	mov	r4, sl
 800bb08:	2205      	movs	r2, #5
 800bb0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb0e:	4858      	ldr	r0, [pc, #352]	; (800bc70 <_vfiprintf_r+0x24c>)
 800bb10:	f7f4 fb5e 	bl	80001d0 <memchr>
 800bb14:	9a04      	ldr	r2, [sp, #16]
 800bb16:	b9d8      	cbnz	r0, 800bb50 <_vfiprintf_r+0x12c>
 800bb18:	06d1      	lsls	r1, r2, #27
 800bb1a:	bf44      	itt	mi
 800bb1c:	2320      	movmi	r3, #32
 800bb1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb22:	0713      	lsls	r3, r2, #28
 800bb24:	bf44      	itt	mi
 800bb26:	232b      	movmi	r3, #43	; 0x2b
 800bb28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb2c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb30:	2b2a      	cmp	r3, #42	; 0x2a
 800bb32:	d015      	beq.n	800bb60 <_vfiprintf_r+0x13c>
 800bb34:	9a07      	ldr	r2, [sp, #28]
 800bb36:	4654      	mov	r4, sl
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f04f 0c0a 	mov.w	ip, #10
 800bb3e:	4621      	mov	r1, r4
 800bb40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb44:	3b30      	subs	r3, #48	; 0x30
 800bb46:	2b09      	cmp	r3, #9
 800bb48:	d94e      	bls.n	800bbe8 <_vfiprintf_r+0x1c4>
 800bb4a:	b1b0      	cbz	r0, 800bb7a <_vfiprintf_r+0x156>
 800bb4c:	9207      	str	r2, [sp, #28]
 800bb4e:	e014      	b.n	800bb7a <_vfiprintf_r+0x156>
 800bb50:	eba0 0308 	sub.w	r3, r0, r8
 800bb54:	fa09 f303 	lsl.w	r3, r9, r3
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	9304      	str	r3, [sp, #16]
 800bb5c:	46a2      	mov	sl, r4
 800bb5e:	e7d2      	b.n	800bb06 <_vfiprintf_r+0xe2>
 800bb60:	9b03      	ldr	r3, [sp, #12]
 800bb62:	1d19      	adds	r1, r3, #4
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	9103      	str	r1, [sp, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bfbb      	ittet	lt
 800bb6c:	425b      	neglt	r3, r3
 800bb6e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb72:	9307      	strge	r3, [sp, #28]
 800bb74:	9307      	strlt	r3, [sp, #28]
 800bb76:	bfb8      	it	lt
 800bb78:	9204      	strlt	r2, [sp, #16]
 800bb7a:	7823      	ldrb	r3, [r4, #0]
 800bb7c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb7e:	d10c      	bne.n	800bb9a <_vfiprintf_r+0x176>
 800bb80:	7863      	ldrb	r3, [r4, #1]
 800bb82:	2b2a      	cmp	r3, #42	; 0x2a
 800bb84:	d135      	bne.n	800bbf2 <_vfiprintf_r+0x1ce>
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	1d1a      	adds	r2, r3, #4
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	9203      	str	r2, [sp, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	bfb8      	it	lt
 800bb92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb96:	3402      	adds	r4, #2
 800bb98:	9305      	str	r3, [sp, #20]
 800bb9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc80 <_vfiprintf_r+0x25c>
 800bb9e:	7821      	ldrb	r1, [r4, #0]
 800bba0:	2203      	movs	r2, #3
 800bba2:	4650      	mov	r0, sl
 800bba4:	f7f4 fb14 	bl	80001d0 <memchr>
 800bba8:	b140      	cbz	r0, 800bbbc <_vfiprintf_r+0x198>
 800bbaa:	2340      	movs	r3, #64	; 0x40
 800bbac:	eba0 000a 	sub.w	r0, r0, sl
 800bbb0:	fa03 f000 	lsl.w	r0, r3, r0
 800bbb4:	9b04      	ldr	r3, [sp, #16]
 800bbb6:	4303      	orrs	r3, r0
 800bbb8:	3401      	adds	r4, #1
 800bbba:	9304      	str	r3, [sp, #16]
 800bbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc0:	482c      	ldr	r0, [pc, #176]	; (800bc74 <_vfiprintf_r+0x250>)
 800bbc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbc6:	2206      	movs	r2, #6
 800bbc8:	f7f4 fb02 	bl	80001d0 <memchr>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d03f      	beq.n	800bc50 <_vfiprintf_r+0x22c>
 800bbd0:	4b29      	ldr	r3, [pc, #164]	; (800bc78 <_vfiprintf_r+0x254>)
 800bbd2:	bb1b      	cbnz	r3, 800bc1c <_vfiprintf_r+0x1f8>
 800bbd4:	9b03      	ldr	r3, [sp, #12]
 800bbd6:	3307      	adds	r3, #7
 800bbd8:	f023 0307 	bic.w	r3, r3, #7
 800bbdc:	3308      	adds	r3, #8
 800bbde:	9303      	str	r3, [sp, #12]
 800bbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe2:	443b      	add	r3, r7
 800bbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe6:	e767      	b.n	800bab8 <_vfiprintf_r+0x94>
 800bbe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbec:	460c      	mov	r4, r1
 800bbee:	2001      	movs	r0, #1
 800bbf0:	e7a5      	b.n	800bb3e <_vfiprintf_r+0x11a>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	3401      	adds	r4, #1
 800bbf6:	9305      	str	r3, [sp, #20]
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	f04f 0c0a 	mov.w	ip, #10
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc04:	3a30      	subs	r2, #48	; 0x30
 800bc06:	2a09      	cmp	r2, #9
 800bc08:	d903      	bls.n	800bc12 <_vfiprintf_r+0x1ee>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0c5      	beq.n	800bb9a <_vfiprintf_r+0x176>
 800bc0e:	9105      	str	r1, [sp, #20]
 800bc10:	e7c3      	b.n	800bb9a <_vfiprintf_r+0x176>
 800bc12:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc16:	4604      	mov	r4, r0
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e7f0      	b.n	800bbfe <_vfiprintf_r+0x1da>
 800bc1c:	ab03      	add	r3, sp, #12
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	462a      	mov	r2, r5
 800bc22:	4b16      	ldr	r3, [pc, #88]	; (800bc7c <_vfiprintf_r+0x258>)
 800bc24:	a904      	add	r1, sp, #16
 800bc26:	4630      	mov	r0, r6
 800bc28:	f7fd fe84 	bl	8009934 <_printf_float>
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	1c78      	adds	r0, r7, #1
 800bc30:	d1d6      	bne.n	800bbe0 <_vfiprintf_r+0x1bc>
 800bc32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc34:	07d9      	lsls	r1, r3, #31
 800bc36:	d405      	bmi.n	800bc44 <_vfiprintf_r+0x220>
 800bc38:	89ab      	ldrh	r3, [r5, #12]
 800bc3a:	059a      	lsls	r2, r3, #22
 800bc3c:	d402      	bmi.n	800bc44 <_vfiprintf_r+0x220>
 800bc3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc40:	f7ff fe84 	bl	800b94c <__retarget_lock_release_recursive>
 800bc44:	89ab      	ldrh	r3, [r5, #12]
 800bc46:	065b      	lsls	r3, r3, #25
 800bc48:	f53f af12 	bmi.w	800ba70 <_vfiprintf_r+0x4c>
 800bc4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc4e:	e711      	b.n	800ba74 <_vfiprintf_r+0x50>
 800bc50:	ab03      	add	r3, sp, #12
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	462a      	mov	r2, r5
 800bc56:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <_vfiprintf_r+0x258>)
 800bc58:	a904      	add	r1, sp, #16
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7fe f90e 	bl	8009e7c <_printf_i>
 800bc60:	e7e4      	b.n	800bc2c <_vfiprintf_r+0x208>
 800bc62:	bf00      	nop
 800bc64:	0800c9a4 	.word	0x0800c9a4
 800bc68:	0800c9c4 	.word	0x0800c9c4
 800bc6c:	0800c984 	.word	0x0800c984
 800bc70:	0800c82c 	.word	0x0800c82c
 800bc74:	0800c836 	.word	0x0800c836
 800bc78:	08009935 	.word	0x08009935
 800bc7c:	0800b9ff 	.word	0x0800b9ff
 800bc80:	0800c832 	.word	0x0800c832

0800bc84 <__swbuf_r>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	460e      	mov	r6, r1
 800bc88:	4614      	mov	r4, r2
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	b118      	cbz	r0, 800bc96 <__swbuf_r+0x12>
 800bc8e:	6983      	ldr	r3, [r0, #24]
 800bc90:	b90b      	cbnz	r3, 800bc96 <__swbuf_r+0x12>
 800bc92:	f000 f9df 	bl	800c054 <__sinit>
 800bc96:	4b21      	ldr	r3, [pc, #132]	; (800bd1c <__swbuf_r+0x98>)
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	d12b      	bne.n	800bcf4 <__swbuf_r+0x70>
 800bc9c:	686c      	ldr	r4, [r5, #4]
 800bc9e:	69a3      	ldr	r3, [r4, #24]
 800bca0:	60a3      	str	r3, [r4, #8]
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	071a      	lsls	r2, r3, #28
 800bca6:	d52f      	bpl.n	800bd08 <__swbuf_r+0x84>
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	b36b      	cbz	r3, 800bd08 <__swbuf_r+0x84>
 800bcac:	6923      	ldr	r3, [r4, #16]
 800bcae:	6820      	ldr	r0, [r4, #0]
 800bcb0:	1ac0      	subs	r0, r0, r3
 800bcb2:	6963      	ldr	r3, [r4, #20]
 800bcb4:	b2f6      	uxtb	r6, r6
 800bcb6:	4283      	cmp	r3, r0
 800bcb8:	4637      	mov	r7, r6
 800bcba:	dc04      	bgt.n	800bcc6 <__swbuf_r+0x42>
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f000 f934 	bl	800bf2c <_fflush_r>
 800bcc4:	bb30      	cbnz	r0, 800bd14 <__swbuf_r+0x90>
 800bcc6:	68a3      	ldr	r3, [r4, #8]
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	60a3      	str	r3, [r4, #8]
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	6022      	str	r2, [r4, #0]
 800bcd2:	701e      	strb	r6, [r3, #0]
 800bcd4:	6963      	ldr	r3, [r4, #20]
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	4283      	cmp	r3, r0
 800bcda:	d004      	beq.n	800bce6 <__swbuf_r+0x62>
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	07db      	lsls	r3, r3, #31
 800bce0:	d506      	bpl.n	800bcf0 <__swbuf_r+0x6c>
 800bce2:	2e0a      	cmp	r6, #10
 800bce4:	d104      	bne.n	800bcf0 <__swbuf_r+0x6c>
 800bce6:	4621      	mov	r1, r4
 800bce8:	4628      	mov	r0, r5
 800bcea:	f000 f91f 	bl	800bf2c <_fflush_r>
 800bcee:	b988      	cbnz	r0, 800bd14 <__swbuf_r+0x90>
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcf4:	4b0a      	ldr	r3, [pc, #40]	; (800bd20 <__swbuf_r+0x9c>)
 800bcf6:	429c      	cmp	r4, r3
 800bcf8:	d101      	bne.n	800bcfe <__swbuf_r+0x7a>
 800bcfa:	68ac      	ldr	r4, [r5, #8]
 800bcfc:	e7cf      	b.n	800bc9e <__swbuf_r+0x1a>
 800bcfe:	4b09      	ldr	r3, [pc, #36]	; (800bd24 <__swbuf_r+0xa0>)
 800bd00:	429c      	cmp	r4, r3
 800bd02:	bf08      	it	eq
 800bd04:	68ec      	ldreq	r4, [r5, #12]
 800bd06:	e7ca      	b.n	800bc9e <__swbuf_r+0x1a>
 800bd08:	4621      	mov	r1, r4
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	f000 f81a 	bl	800bd44 <__swsetup_r>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d0cb      	beq.n	800bcac <__swbuf_r+0x28>
 800bd14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bd18:	e7ea      	b.n	800bcf0 <__swbuf_r+0x6c>
 800bd1a:	bf00      	nop
 800bd1c:	0800c9a4 	.word	0x0800c9a4
 800bd20:	0800c9c4 	.word	0x0800c9c4
 800bd24:	0800c984 	.word	0x0800c984

0800bd28 <__ascii_wctomb>:
 800bd28:	b149      	cbz	r1, 800bd3e <__ascii_wctomb+0x16>
 800bd2a:	2aff      	cmp	r2, #255	; 0xff
 800bd2c:	bf85      	ittet	hi
 800bd2e:	238a      	movhi	r3, #138	; 0x8a
 800bd30:	6003      	strhi	r3, [r0, #0]
 800bd32:	700a      	strbls	r2, [r1, #0]
 800bd34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bd38:	bf98      	it	ls
 800bd3a:	2001      	movls	r0, #1
 800bd3c:	4770      	bx	lr
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4770      	bx	lr
	...

0800bd44 <__swsetup_r>:
 800bd44:	4b32      	ldr	r3, [pc, #200]	; (800be10 <__swsetup_r+0xcc>)
 800bd46:	b570      	push	{r4, r5, r6, lr}
 800bd48:	681d      	ldr	r5, [r3, #0]
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	b125      	cbz	r5, 800bd5a <__swsetup_r+0x16>
 800bd50:	69ab      	ldr	r3, [r5, #24]
 800bd52:	b913      	cbnz	r3, 800bd5a <__swsetup_r+0x16>
 800bd54:	4628      	mov	r0, r5
 800bd56:	f000 f97d 	bl	800c054 <__sinit>
 800bd5a:	4b2e      	ldr	r3, [pc, #184]	; (800be14 <__swsetup_r+0xd0>)
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d10f      	bne.n	800bd80 <__swsetup_r+0x3c>
 800bd60:	686c      	ldr	r4, [r5, #4]
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd68:	0719      	lsls	r1, r3, #28
 800bd6a:	d42c      	bmi.n	800bdc6 <__swsetup_r+0x82>
 800bd6c:	06dd      	lsls	r5, r3, #27
 800bd6e:	d411      	bmi.n	800bd94 <__swsetup_r+0x50>
 800bd70:	2309      	movs	r3, #9
 800bd72:	6033      	str	r3, [r6, #0]
 800bd74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd78:	81a3      	strh	r3, [r4, #12]
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd7e:	e03e      	b.n	800bdfe <__swsetup_r+0xba>
 800bd80:	4b25      	ldr	r3, [pc, #148]	; (800be18 <__swsetup_r+0xd4>)
 800bd82:	429c      	cmp	r4, r3
 800bd84:	d101      	bne.n	800bd8a <__swsetup_r+0x46>
 800bd86:	68ac      	ldr	r4, [r5, #8]
 800bd88:	e7eb      	b.n	800bd62 <__swsetup_r+0x1e>
 800bd8a:	4b24      	ldr	r3, [pc, #144]	; (800be1c <__swsetup_r+0xd8>)
 800bd8c:	429c      	cmp	r4, r3
 800bd8e:	bf08      	it	eq
 800bd90:	68ec      	ldreq	r4, [r5, #12]
 800bd92:	e7e6      	b.n	800bd62 <__swsetup_r+0x1e>
 800bd94:	0758      	lsls	r0, r3, #29
 800bd96:	d512      	bpl.n	800bdbe <__swsetup_r+0x7a>
 800bd98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd9a:	b141      	cbz	r1, 800bdae <__swsetup_r+0x6a>
 800bd9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bda0:	4299      	cmp	r1, r3
 800bda2:	d002      	beq.n	800bdaa <__swsetup_r+0x66>
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7fd fc45 	bl	8009634 <_free_r>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	6363      	str	r3, [r4, #52]	; 0x34
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	6063      	str	r3, [r4, #4]
 800bdba:	6923      	ldr	r3, [r4, #16]
 800bdbc:	6023      	str	r3, [r4, #0]
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	f043 0308 	orr.w	r3, r3, #8
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	b94b      	cbnz	r3, 800bdde <__swsetup_r+0x9a>
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdd4:	d003      	beq.n	800bdde <__swsetup_r+0x9a>
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f000 f9fd 	bl	800c1d8 <__smakebuf_r>
 800bdde:	89a0      	ldrh	r0, [r4, #12]
 800bde0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bde4:	f010 0301 	ands.w	r3, r0, #1
 800bde8:	d00a      	beq.n	800be00 <__swsetup_r+0xbc>
 800bdea:	2300      	movs	r3, #0
 800bdec:	60a3      	str	r3, [r4, #8]
 800bdee:	6963      	ldr	r3, [r4, #20]
 800bdf0:	425b      	negs	r3, r3
 800bdf2:	61a3      	str	r3, [r4, #24]
 800bdf4:	6923      	ldr	r3, [r4, #16]
 800bdf6:	b943      	cbnz	r3, 800be0a <__swsetup_r+0xc6>
 800bdf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdfc:	d1ba      	bne.n	800bd74 <__swsetup_r+0x30>
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}
 800be00:	0781      	lsls	r1, r0, #30
 800be02:	bf58      	it	pl
 800be04:	6963      	ldrpl	r3, [r4, #20]
 800be06:	60a3      	str	r3, [r4, #8]
 800be08:	e7f4      	b.n	800bdf4 <__swsetup_r+0xb0>
 800be0a:	2000      	movs	r0, #0
 800be0c:	e7f7      	b.n	800bdfe <__swsetup_r+0xba>
 800be0e:	bf00      	nop
 800be10:	2000000c 	.word	0x2000000c
 800be14:	0800c9a4 	.word	0x0800c9a4
 800be18:	0800c9c4 	.word	0x0800c9c4
 800be1c:	0800c984 	.word	0x0800c984

0800be20 <__sflush_r>:
 800be20:	898a      	ldrh	r2, [r1, #12]
 800be22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be26:	4605      	mov	r5, r0
 800be28:	0710      	lsls	r0, r2, #28
 800be2a:	460c      	mov	r4, r1
 800be2c:	d458      	bmi.n	800bee0 <__sflush_r+0xc0>
 800be2e:	684b      	ldr	r3, [r1, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	dc05      	bgt.n	800be40 <__sflush_r+0x20>
 800be34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be36:	2b00      	cmp	r3, #0
 800be38:	dc02      	bgt.n	800be40 <__sflush_r+0x20>
 800be3a:	2000      	movs	r0, #0
 800be3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be42:	2e00      	cmp	r6, #0
 800be44:	d0f9      	beq.n	800be3a <__sflush_r+0x1a>
 800be46:	2300      	movs	r3, #0
 800be48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be4c:	682f      	ldr	r7, [r5, #0]
 800be4e:	602b      	str	r3, [r5, #0]
 800be50:	d032      	beq.n	800beb8 <__sflush_r+0x98>
 800be52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	075a      	lsls	r2, r3, #29
 800be58:	d505      	bpl.n	800be66 <__sflush_r+0x46>
 800be5a:	6863      	ldr	r3, [r4, #4]
 800be5c:	1ac0      	subs	r0, r0, r3
 800be5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be60:	b10b      	cbz	r3, 800be66 <__sflush_r+0x46>
 800be62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be64:	1ac0      	subs	r0, r0, r3
 800be66:	2300      	movs	r3, #0
 800be68:	4602      	mov	r2, r0
 800be6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be6c:	6a21      	ldr	r1, [r4, #32]
 800be6e:	4628      	mov	r0, r5
 800be70:	47b0      	blx	r6
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	d106      	bne.n	800be86 <__sflush_r+0x66>
 800be78:	6829      	ldr	r1, [r5, #0]
 800be7a:	291d      	cmp	r1, #29
 800be7c:	d82c      	bhi.n	800bed8 <__sflush_r+0xb8>
 800be7e:	4a2a      	ldr	r2, [pc, #168]	; (800bf28 <__sflush_r+0x108>)
 800be80:	40ca      	lsrs	r2, r1
 800be82:	07d6      	lsls	r6, r2, #31
 800be84:	d528      	bpl.n	800bed8 <__sflush_r+0xb8>
 800be86:	2200      	movs	r2, #0
 800be88:	6062      	str	r2, [r4, #4]
 800be8a:	04d9      	lsls	r1, r3, #19
 800be8c:	6922      	ldr	r2, [r4, #16]
 800be8e:	6022      	str	r2, [r4, #0]
 800be90:	d504      	bpl.n	800be9c <__sflush_r+0x7c>
 800be92:	1c42      	adds	r2, r0, #1
 800be94:	d101      	bne.n	800be9a <__sflush_r+0x7a>
 800be96:	682b      	ldr	r3, [r5, #0]
 800be98:	b903      	cbnz	r3, 800be9c <__sflush_r+0x7c>
 800be9a:	6560      	str	r0, [r4, #84]	; 0x54
 800be9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be9e:	602f      	str	r7, [r5, #0]
 800bea0:	2900      	cmp	r1, #0
 800bea2:	d0ca      	beq.n	800be3a <__sflush_r+0x1a>
 800bea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bea8:	4299      	cmp	r1, r3
 800beaa:	d002      	beq.n	800beb2 <__sflush_r+0x92>
 800beac:	4628      	mov	r0, r5
 800beae:	f7fd fbc1 	bl	8009634 <_free_r>
 800beb2:	2000      	movs	r0, #0
 800beb4:	6360      	str	r0, [r4, #52]	; 0x34
 800beb6:	e7c1      	b.n	800be3c <__sflush_r+0x1c>
 800beb8:	6a21      	ldr	r1, [r4, #32]
 800beba:	2301      	movs	r3, #1
 800bebc:	4628      	mov	r0, r5
 800bebe:	47b0      	blx	r6
 800bec0:	1c41      	adds	r1, r0, #1
 800bec2:	d1c7      	bne.n	800be54 <__sflush_r+0x34>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0c4      	beq.n	800be54 <__sflush_r+0x34>
 800beca:	2b1d      	cmp	r3, #29
 800becc:	d001      	beq.n	800bed2 <__sflush_r+0xb2>
 800bece:	2b16      	cmp	r3, #22
 800bed0:	d101      	bne.n	800bed6 <__sflush_r+0xb6>
 800bed2:	602f      	str	r7, [r5, #0]
 800bed4:	e7b1      	b.n	800be3a <__sflush_r+0x1a>
 800bed6:	89a3      	ldrh	r3, [r4, #12]
 800bed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bedc:	81a3      	strh	r3, [r4, #12]
 800bede:	e7ad      	b.n	800be3c <__sflush_r+0x1c>
 800bee0:	690f      	ldr	r7, [r1, #16]
 800bee2:	2f00      	cmp	r7, #0
 800bee4:	d0a9      	beq.n	800be3a <__sflush_r+0x1a>
 800bee6:	0793      	lsls	r3, r2, #30
 800bee8:	680e      	ldr	r6, [r1, #0]
 800beea:	bf08      	it	eq
 800beec:	694b      	ldreq	r3, [r1, #20]
 800beee:	600f      	str	r7, [r1, #0]
 800bef0:	bf18      	it	ne
 800bef2:	2300      	movne	r3, #0
 800bef4:	eba6 0807 	sub.w	r8, r6, r7
 800bef8:	608b      	str	r3, [r1, #8]
 800befa:	f1b8 0f00 	cmp.w	r8, #0
 800befe:	dd9c      	ble.n	800be3a <__sflush_r+0x1a>
 800bf00:	6a21      	ldr	r1, [r4, #32]
 800bf02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf04:	4643      	mov	r3, r8
 800bf06:	463a      	mov	r2, r7
 800bf08:	4628      	mov	r0, r5
 800bf0a:	47b0      	blx	r6
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	dc06      	bgt.n	800bf1e <__sflush_r+0xfe>
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf16:	81a3      	strh	r3, [r4, #12]
 800bf18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf1c:	e78e      	b.n	800be3c <__sflush_r+0x1c>
 800bf1e:	4407      	add	r7, r0
 800bf20:	eba8 0800 	sub.w	r8, r8, r0
 800bf24:	e7e9      	b.n	800befa <__sflush_r+0xda>
 800bf26:	bf00      	nop
 800bf28:	20400001 	.word	0x20400001

0800bf2c <_fflush_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	690b      	ldr	r3, [r1, #16]
 800bf30:	4605      	mov	r5, r0
 800bf32:	460c      	mov	r4, r1
 800bf34:	b913      	cbnz	r3, 800bf3c <_fflush_r+0x10>
 800bf36:	2500      	movs	r5, #0
 800bf38:	4628      	mov	r0, r5
 800bf3a:	bd38      	pop	{r3, r4, r5, pc}
 800bf3c:	b118      	cbz	r0, 800bf46 <_fflush_r+0x1a>
 800bf3e:	6983      	ldr	r3, [r0, #24]
 800bf40:	b90b      	cbnz	r3, 800bf46 <_fflush_r+0x1a>
 800bf42:	f000 f887 	bl	800c054 <__sinit>
 800bf46:	4b14      	ldr	r3, [pc, #80]	; (800bf98 <_fflush_r+0x6c>)
 800bf48:	429c      	cmp	r4, r3
 800bf4a:	d11b      	bne.n	800bf84 <_fflush_r+0x58>
 800bf4c:	686c      	ldr	r4, [r5, #4]
 800bf4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d0ef      	beq.n	800bf36 <_fflush_r+0xa>
 800bf56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf58:	07d0      	lsls	r0, r2, #31
 800bf5a:	d404      	bmi.n	800bf66 <_fflush_r+0x3a>
 800bf5c:	0599      	lsls	r1, r3, #22
 800bf5e:	d402      	bmi.n	800bf66 <_fflush_r+0x3a>
 800bf60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf62:	f7ff fcf2 	bl	800b94a <__retarget_lock_acquire_recursive>
 800bf66:	4628      	mov	r0, r5
 800bf68:	4621      	mov	r1, r4
 800bf6a:	f7ff ff59 	bl	800be20 <__sflush_r>
 800bf6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf70:	07da      	lsls	r2, r3, #31
 800bf72:	4605      	mov	r5, r0
 800bf74:	d4e0      	bmi.n	800bf38 <_fflush_r+0xc>
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	059b      	lsls	r3, r3, #22
 800bf7a:	d4dd      	bmi.n	800bf38 <_fflush_r+0xc>
 800bf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf7e:	f7ff fce5 	bl	800b94c <__retarget_lock_release_recursive>
 800bf82:	e7d9      	b.n	800bf38 <_fflush_r+0xc>
 800bf84:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <_fflush_r+0x70>)
 800bf86:	429c      	cmp	r4, r3
 800bf88:	d101      	bne.n	800bf8e <_fflush_r+0x62>
 800bf8a:	68ac      	ldr	r4, [r5, #8]
 800bf8c:	e7df      	b.n	800bf4e <_fflush_r+0x22>
 800bf8e:	4b04      	ldr	r3, [pc, #16]	; (800bfa0 <_fflush_r+0x74>)
 800bf90:	429c      	cmp	r4, r3
 800bf92:	bf08      	it	eq
 800bf94:	68ec      	ldreq	r4, [r5, #12]
 800bf96:	e7da      	b.n	800bf4e <_fflush_r+0x22>
 800bf98:	0800c9a4 	.word	0x0800c9a4
 800bf9c:	0800c9c4 	.word	0x0800c9c4
 800bfa0:	0800c984 	.word	0x0800c984

0800bfa4 <std>:
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	b510      	push	{r4, lr}
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	e9c0 3300 	strd	r3, r3, [r0]
 800bfae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfb2:	6083      	str	r3, [r0, #8]
 800bfb4:	8181      	strh	r1, [r0, #12]
 800bfb6:	6643      	str	r3, [r0, #100]	; 0x64
 800bfb8:	81c2      	strh	r2, [r0, #14]
 800bfba:	6183      	str	r3, [r0, #24]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	2208      	movs	r2, #8
 800bfc0:	305c      	adds	r0, #92	; 0x5c
 800bfc2:	f7fd fb2f 	bl	8009624 <memset>
 800bfc6:	4b05      	ldr	r3, [pc, #20]	; (800bfdc <std+0x38>)
 800bfc8:	6263      	str	r3, [r4, #36]	; 0x24
 800bfca:	4b05      	ldr	r3, [pc, #20]	; (800bfe0 <std+0x3c>)
 800bfcc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfce:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <std+0x40>)
 800bfd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfd2:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <std+0x44>)
 800bfd4:	6224      	str	r4, [r4, #32]
 800bfd6:	6323      	str	r3, [r4, #48]	; 0x30
 800bfd8:	bd10      	pop	{r4, pc}
 800bfda:	bf00      	nop
 800bfdc:	0800c269 	.word	0x0800c269
 800bfe0:	0800c28b 	.word	0x0800c28b
 800bfe4:	0800c2c3 	.word	0x0800c2c3
 800bfe8:	0800c2e7 	.word	0x0800c2e7

0800bfec <_cleanup_r>:
 800bfec:	4901      	ldr	r1, [pc, #4]	; (800bff4 <_cleanup_r+0x8>)
 800bfee:	f000 b8af 	b.w	800c150 <_fwalk_reent>
 800bff2:	bf00      	nop
 800bff4:	0800bf2d 	.word	0x0800bf2d

0800bff8 <__sfmoreglue>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	2268      	movs	r2, #104	; 0x68
 800bffc:	1e4d      	subs	r5, r1, #1
 800bffe:	4355      	muls	r5, r2
 800c000:	460e      	mov	r6, r1
 800c002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c006:	f7fd fb81 	bl	800970c <_malloc_r>
 800c00a:	4604      	mov	r4, r0
 800c00c:	b140      	cbz	r0, 800c020 <__sfmoreglue+0x28>
 800c00e:	2100      	movs	r1, #0
 800c010:	e9c0 1600 	strd	r1, r6, [r0]
 800c014:	300c      	adds	r0, #12
 800c016:	60a0      	str	r0, [r4, #8]
 800c018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c01c:	f7fd fb02 	bl	8009624 <memset>
 800c020:	4620      	mov	r0, r4
 800c022:	bd70      	pop	{r4, r5, r6, pc}

0800c024 <__sfp_lock_acquire>:
 800c024:	4801      	ldr	r0, [pc, #4]	; (800c02c <__sfp_lock_acquire+0x8>)
 800c026:	f7ff bc90 	b.w	800b94a <__retarget_lock_acquire_recursive>
 800c02a:	bf00      	nop
 800c02c:	20000855 	.word	0x20000855

0800c030 <__sfp_lock_release>:
 800c030:	4801      	ldr	r0, [pc, #4]	; (800c038 <__sfp_lock_release+0x8>)
 800c032:	f7ff bc8b 	b.w	800b94c <__retarget_lock_release_recursive>
 800c036:	bf00      	nop
 800c038:	20000855 	.word	0x20000855

0800c03c <__sinit_lock_acquire>:
 800c03c:	4801      	ldr	r0, [pc, #4]	; (800c044 <__sinit_lock_acquire+0x8>)
 800c03e:	f7ff bc84 	b.w	800b94a <__retarget_lock_acquire_recursive>
 800c042:	bf00      	nop
 800c044:	20000856 	.word	0x20000856

0800c048 <__sinit_lock_release>:
 800c048:	4801      	ldr	r0, [pc, #4]	; (800c050 <__sinit_lock_release+0x8>)
 800c04a:	f7ff bc7f 	b.w	800b94c <__retarget_lock_release_recursive>
 800c04e:	bf00      	nop
 800c050:	20000856 	.word	0x20000856

0800c054 <__sinit>:
 800c054:	b510      	push	{r4, lr}
 800c056:	4604      	mov	r4, r0
 800c058:	f7ff fff0 	bl	800c03c <__sinit_lock_acquire>
 800c05c:	69a3      	ldr	r3, [r4, #24]
 800c05e:	b11b      	cbz	r3, 800c068 <__sinit+0x14>
 800c060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c064:	f7ff bff0 	b.w	800c048 <__sinit_lock_release>
 800c068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c06c:	6523      	str	r3, [r4, #80]	; 0x50
 800c06e:	4b13      	ldr	r3, [pc, #76]	; (800c0bc <__sinit+0x68>)
 800c070:	4a13      	ldr	r2, [pc, #76]	; (800c0c0 <__sinit+0x6c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	62a2      	str	r2, [r4, #40]	; 0x28
 800c076:	42a3      	cmp	r3, r4
 800c078:	bf04      	itt	eq
 800c07a:	2301      	moveq	r3, #1
 800c07c:	61a3      	streq	r3, [r4, #24]
 800c07e:	4620      	mov	r0, r4
 800c080:	f000 f820 	bl	800c0c4 <__sfp>
 800c084:	6060      	str	r0, [r4, #4]
 800c086:	4620      	mov	r0, r4
 800c088:	f000 f81c 	bl	800c0c4 <__sfp>
 800c08c:	60a0      	str	r0, [r4, #8]
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f818 	bl	800c0c4 <__sfp>
 800c094:	2200      	movs	r2, #0
 800c096:	60e0      	str	r0, [r4, #12]
 800c098:	2104      	movs	r1, #4
 800c09a:	6860      	ldr	r0, [r4, #4]
 800c09c:	f7ff ff82 	bl	800bfa4 <std>
 800c0a0:	68a0      	ldr	r0, [r4, #8]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	2109      	movs	r1, #9
 800c0a6:	f7ff ff7d 	bl	800bfa4 <std>
 800c0aa:	68e0      	ldr	r0, [r4, #12]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	2112      	movs	r1, #18
 800c0b0:	f7ff ff78 	bl	800bfa4 <std>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	61a3      	str	r3, [r4, #24]
 800c0b8:	e7d2      	b.n	800c060 <__sinit+0xc>
 800c0ba:	bf00      	nop
 800c0bc:	0800c608 	.word	0x0800c608
 800c0c0:	0800bfed 	.word	0x0800bfed

0800c0c4 <__sfp>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	4607      	mov	r7, r0
 800c0c8:	f7ff ffac 	bl	800c024 <__sfp_lock_acquire>
 800c0cc:	4b1e      	ldr	r3, [pc, #120]	; (800c148 <__sfp+0x84>)
 800c0ce:	681e      	ldr	r6, [r3, #0]
 800c0d0:	69b3      	ldr	r3, [r6, #24]
 800c0d2:	b913      	cbnz	r3, 800c0da <__sfp+0x16>
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f7ff ffbd 	bl	800c054 <__sinit>
 800c0da:	3648      	adds	r6, #72	; 0x48
 800c0dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	d503      	bpl.n	800c0ec <__sfp+0x28>
 800c0e4:	6833      	ldr	r3, [r6, #0]
 800c0e6:	b30b      	cbz	r3, 800c12c <__sfp+0x68>
 800c0e8:	6836      	ldr	r6, [r6, #0]
 800c0ea:	e7f7      	b.n	800c0dc <__sfp+0x18>
 800c0ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0f0:	b9d5      	cbnz	r5, 800c128 <__sfp+0x64>
 800c0f2:	4b16      	ldr	r3, [pc, #88]	; (800c14c <__sfp+0x88>)
 800c0f4:	60e3      	str	r3, [r4, #12]
 800c0f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0fa:	6665      	str	r5, [r4, #100]	; 0x64
 800c0fc:	f7ff fc24 	bl	800b948 <__retarget_lock_init_recursive>
 800c100:	f7ff ff96 	bl	800c030 <__sfp_lock_release>
 800c104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c10c:	6025      	str	r5, [r4, #0]
 800c10e:	61a5      	str	r5, [r4, #24]
 800c110:	2208      	movs	r2, #8
 800c112:	4629      	mov	r1, r5
 800c114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c118:	f7fd fa84 	bl	8009624 <memset>
 800c11c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c124:	4620      	mov	r0, r4
 800c126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c128:	3468      	adds	r4, #104	; 0x68
 800c12a:	e7d9      	b.n	800c0e0 <__sfp+0x1c>
 800c12c:	2104      	movs	r1, #4
 800c12e:	4638      	mov	r0, r7
 800c130:	f7ff ff62 	bl	800bff8 <__sfmoreglue>
 800c134:	4604      	mov	r4, r0
 800c136:	6030      	str	r0, [r6, #0]
 800c138:	2800      	cmp	r0, #0
 800c13a:	d1d5      	bne.n	800c0e8 <__sfp+0x24>
 800c13c:	f7ff ff78 	bl	800c030 <__sfp_lock_release>
 800c140:	230c      	movs	r3, #12
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	e7ee      	b.n	800c124 <__sfp+0x60>
 800c146:	bf00      	nop
 800c148:	0800c608 	.word	0x0800c608
 800c14c:	ffff0001 	.word	0xffff0001

0800c150 <_fwalk_reent>:
 800c150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c154:	4606      	mov	r6, r0
 800c156:	4688      	mov	r8, r1
 800c158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c15c:	2700      	movs	r7, #0
 800c15e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c162:	f1b9 0901 	subs.w	r9, r9, #1
 800c166:	d505      	bpl.n	800c174 <_fwalk_reent+0x24>
 800c168:	6824      	ldr	r4, [r4, #0]
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	d1f7      	bne.n	800c15e <_fwalk_reent+0xe>
 800c16e:	4638      	mov	r0, r7
 800c170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c174:	89ab      	ldrh	r3, [r5, #12]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d907      	bls.n	800c18a <_fwalk_reent+0x3a>
 800c17a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c17e:	3301      	adds	r3, #1
 800c180:	d003      	beq.n	800c18a <_fwalk_reent+0x3a>
 800c182:	4629      	mov	r1, r5
 800c184:	4630      	mov	r0, r6
 800c186:	47c0      	blx	r8
 800c188:	4307      	orrs	r7, r0
 800c18a:	3568      	adds	r5, #104	; 0x68
 800c18c:	e7e9      	b.n	800c162 <_fwalk_reent+0x12>

0800c18e <__swhatbuf_r>:
 800c18e:	b570      	push	{r4, r5, r6, lr}
 800c190:	460e      	mov	r6, r1
 800c192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c196:	2900      	cmp	r1, #0
 800c198:	b096      	sub	sp, #88	; 0x58
 800c19a:	4614      	mov	r4, r2
 800c19c:	461d      	mov	r5, r3
 800c19e:	da08      	bge.n	800c1b2 <__swhatbuf_r+0x24>
 800c1a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	602a      	str	r2, [r5, #0]
 800c1a8:	061a      	lsls	r2, r3, #24
 800c1aa:	d410      	bmi.n	800c1ce <__swhatbuf_r+0x40>
 800c1ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1b0:	e00e      	b.n	800c1d0 <__swhatbuf_r+0x42>
 800c1b2:	466a      	mov	r2, sp
 800c1b4:	f000 f8be 	bl	800c334 <_fstat_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	dbf1      	blt.n	800c1a0 <__swhatbuf_r+0x12>
 800c1bc:	9a01      	ldr	r2, [sp, #4]
 800c1be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1c6:	425a      	negs	r2, r3
 800c1c8:	415a      	adcs	r2, r3
 800c1ca:	602a      	str	r2, [r5, #0]
 800c1cc:	e7ee      	b.n	800c1ac <__swhatbuf_r+0x1e>
 800c1ce:	2340      	movs	r3, #64	; 0x40
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	6023      	str	r3, [r4, #0]
 800c1d4:	b016      	add	sp, #88	; 0x58
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}

0800c1d8 <__smakebuf_r>:
 800c1d8:	898b      	ldrh	r3, [r1, #12]
 800c1da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1dc:	079d      	lsls	r5, r3, #30
 800c1de:	4606      	mov	r6, r0
 800c1e0:	460c      	mov	r4, r1
 800c1e2:	d507      	bpl.n	800c1f4 <__smakebuf_r+0x1c>
 800c1e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	6123      	str	r3, [r4, #16]
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	6163      	str	r3, [r4, #20]
 800c1f0:	b002      	add	sp, #8
 800c1f2:	bd70      	pop	{r4, r5, r6, pc}
 800c1f4:	ab01      	add	r3, sp, #4
 800c1f6:	466a      	mov	r2, sp
 800c1f8:	f7ff ffc9 	bl	800c18e <__swhatbuf_r>
 800c1fc:	9900      	ldr	r1, [sp, #0]
 800c1fe:	4605      	mov	r5, r0
 800c200:	4630      	mov	r0, r6
 800c202:	f7fd fa83 	bl	800970c <_malloc_r>
 800c206:	b948      	cbnz	r0, 800c21c <__smakebuf_r+0x44>
 800c208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c20c:	059a      	lsls	r2, r3, #22
 800c20e:	d4ef      	bmi.n	800c1f0 <__smakebuf_r+0x18>
 800c210:	f023 0303 	bic.w	r3, r3, #3
 800c214:	f043 0302 	orr.w	r3, r3, #2
 800c218:	81a3      	strh	r3, [r4, #12]
 800c21a:	e7e3      	b.n	800c1e4 <__smakebuf_r+0xc>
 800c21c:	4b0d      	ldr	r3, [pc, #52]	; (800c254 <__smakebuf_r+0x7c>)
 800c21e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	6020      	str	r0, [r4, #0]
 800c224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c228:	81a3      	strh	r3, [r4, #12]
 800c22a:	9b00      	ldr	r3, [sp, #0]
 800c22c:	6163      	str	r3, [r4, #20]
 800c22e:	9b01      	ldr	r3, [sp, #4]
 800c230:	6120      	str	r0, [r4, #16]
 800c232:	b15b      	cbz	r3, 800c24c <__smakebuf_r+0x74>
 800c234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c238:	4630      	mov	r0, r6
 800c23a:	f000 f88d 	bl	800c358 <_isatty_r>
 800c23e:	b128      	cbz	r0, 800c24c <__smakebuf_r+0x74>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	f043 0301 	orr.w	r3, r3, #1
 800c24a:	81a3      	strh	r3, [r4, #12]
 800c24c:	89a0      	ldrh	r0, [r4, #12]
 800c24e:	4305      	orrs	r5, r0
 800c250:	81a5      	strh	r5, [r4, #12]
 800c252:	e7cd      	b.n	800c1f0 <__smakebuf_r+0x18>
 800c254:	0800bfed 	.word	0x0800bfed

0800c258 <_malloc_usable_size_r>:
 800c258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c25c:	1f18      	subs	r0, r3, #4
 800c25e:	2b00      	cmp	r3, #0
 800c260:	bfbc      	itt	lt
 800c262:	580b      	ldrlt	r3, [r1, r0]
 800c264:	18c0      	addlt	r0, r0, r3
 800c266:	4770      	bx	lr

0800c268 <__sread>:
 800c268:	b510      	push	{r4, lr}
 800c26a:	460c      	mov	r4, r1
 800c26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c270:	f000 f894 	bl	800c39c <_read_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	bfab      	itete	ge
 800c278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c27a:	89a3      	ldrhlt	r3, [r4, #12]
 800c27c:	181b      	addge	r3, r3, r0
 800c27e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c282:	bfac      	ite	ge
 800c284:	6563      	strge	r3, [r4, #84]	; 0x54
 800c286:	81a3      	strhlt	r3, [r4, #12]
 800c288:	bd10      	pop	{r4, pc}

0800c28a <__swrite>:
 800c28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28e:	461f      	mov	r7, r3
 800c290:	898b      	ldrh	r3, [r1, #12]
 800c292:	05db      	lsls	r3, r3, #23
 800c294:	4605      	mov	r5, r0
 800c296:	460c      	mov	r4, r1
 800c298:	4616      	mov	r6, r2
 800c29a:	d505      	bpl.n	800c2a8 <__swrite+0x1e>
 800c29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f000 f868 	bl	800c378 <_lseek_r>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	4632      	mov	r2, r6
 800c2b6:	463b      	mov	r3, r7
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2be:	f000 b817 	b.w	800c2f0 <_write_r>

0800c2c2 <__sseek>:
 800c2c2:	b510      	push	{r4, lr}
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ca:	f000 f855 	bl	800c378 <_lseek_r>
 800c2ce:	1c43      	adds	r3, r0, #1
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	bf15      	itete	ne
 800c2d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2de:	81a3      	strheq	r3, [r4, #12]
 800c2e0:	bf18      	it	ne
 800c2e2:	81a3      	strhne	r3, [r4, #12]
 800c2e4:	bd10      	pop	{r4, pc}

0800c2e6 <__sclose>:
 800c2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ea:	f000 b813 	b.w	800c314 <_close_r>
	...

0800c2f0 <_write_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d07      	ldr	r5, [pc, #28]	; (800c310 <_write_r+0x20>)
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	602a      	str	r2, [r5, #0]
 800c2fe:	461a      	mov	r2, r3
 800c300:	f7f6 facd 	bl	800289e <_write>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_write_r+0x1e>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_write_r+0x1e>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	20000850 	.word	0x20000850

0800c314 <_close_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d06      	ldr	r5, [pc, #24]	; (800c330 <_close_r+0x1c>)
 800c318:	2300      	movs	r3, #0
 800c31a:	4604      	mov	r4, r0
 800c31c:	4608      	mov	r0, r1
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	f7f6 fad9 	bl	80028d6 <_close>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_close_r+0x1a>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_close_r+0x1a>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	20000850 	.word	0x20000850

0800c334 <_fstat_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4d07      	ldr	r5, [pc, #28]	; (800c354 <_fstat_r+0x20>)
 800c338:	2300      	movs	r3, #0
 800c33a:	4604      	mov	r4, r0
 800c33c:	4608      	mov	r0, r1
 800c33e:	4611      	mov	r1, r2
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	f7f6 fad4 	bl	80028ee <_fstat>
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	d102      	bne.n	800c350 <_fstat_r+0x1c>
 800c34a:	682b      	ldr	r3, [r5, #0]
 800c34c:	b103      	cbz	r3, 800c350 <_fstat_r+0x1c>
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	bd38      	pop	{r3, r4, r5, pc}
 800c352:	bf00      	nop
 800c354:	20000850 	.word	0x20000850

0800c358 <_isatty_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4d06      	ldr	r5, [pc, #24]	; (800c374 <_isatty_r+0x1c>)
 800c35c:	2300      	movs	r3, #0
 800c35e:	4604      	mov	r4, r0
 800c360:	4608      	mov	r0, r1
 800c362:	602b      	str	r3, [r5, #0]
 800c364:	f7f6 fad3 	bl	800290e <_isatty>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_isatty_r+0x1a>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_isatty_r+0x1a>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	20000850 	.word	0x20000850

0800c378 <_lseek_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d07      	ldr	r5, [pc, #28]	; (800c398 <_lseek_r+0x20>)
 800c37c:	4604      	mov	r4, r0
 800c37e:	4608      	mov	r0, r1
 800c380:	4611      	mov	r1, r2
 800c382:	2200      	movs	r2, #0
 800c384:	602a      	str	r2, [r5, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	f7f6 facc 	bl	8002924 <_lseek>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d102      	bne.n	800c396 <_lseek_r+0x1e>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	b103      	cbz	r3, 800c396 <_lseek_r+0x1e>
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	20000850 	.word	0x20000850

0800c39c <_read_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d07      	ldr	r5, [pc, #28]	; (800c3bc <_read_r+0x20>)
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	602a      	str	r2, [r5, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f7f6 fa5a 	bl	8002864 <_read>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_read_r+0x1e>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_read_r+0x1e>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	20000850 	.word	0x20000850

0800c3c0 <_sbrk>:
 800c3c0:	4a04      	ldr	r2, [pc, #16]	; (800c3d4 <_sbrk+0x14>)
 800c3c2:	6811      	ldr	r1, [r2, #0]
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	b909      	cbnz	r1, 800c3cc <_sbrk+0xc>
 800c3c8:	4903      	ldr	r1, [pc, #12]	; (800c3d8 <_sbrk+0x18>)
 800c3ca:	6011      	str	r1, [r2, #0]
 800c3cc:	6810      	ldr	r0, [r2, #0]
 800c3ce:	4403      	add	r3, r0
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	4770      	bx	lr
 800c3d4:	20000858 	.word	0x20000858
 800c3d8:	20000860 	.word	0x20000860

0800c3dc <_init>:
 800c3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3de:	bf00      	nop
 800c3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3e2:	bc08      	pop	{r3}
 800c3e4:	469e      	mov	lr, r3
 800c3e6:	4770      	bx	lr

0800c3e8 <_fini>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	bf00      	nop
 800c3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ee:	bc08      	pop	{r3}
 800c3f0:	469e      	mov	lr, r3
 800c3f2:	4770      	bx	lr
